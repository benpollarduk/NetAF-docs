{
  "api/NetAF.Assets.Attributes.Attribute.html": {
    "href": "api/NetAF.Assets.Attributes.Attribute.html",
    "title": "Class Attribute | NetAF",
    "summary": "Class Attribute Provides a description of an attribute. Inheritance object Attribute Implements IPlayerVisible Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Assets.Attributes Assembly: NetAF.dll Syntax public sealed class Attribute : IPlayerVisible Constructors Attribute(string, string, int, int, bool) Provides a description of an attribute. Declaration public Attribute(string name, string description, int minimum, int maximum, bool isPlayerVisible) Parameters Type Name Description string name Specify the name of the attribute. string description Specify the description of the attribute. int minimum Specify the minimum limit of the attribute. int maximum Specify the maximum limit of the attribute. bool isPlayerVisible Set if this is visible to the player. Properties Description Get the description of the attribute. Declaration public string Description { get; } Property Value Type Description string IsPlayerVisible Get or set if this is visible to the player. Declaration public bool IsPlayerVisible { get; set; } Property Value Type Description bool Maximum Get the maximum limit of the attribute. Declaration public int Maximum { get; } Property Value Type Description int Minimum Get the minimum limit of the attribute. Declaration public int Minimum { get; } Property Value Type Description int Name Get the name of the attribute. Declaration public string Name { get; } Property Value Type Description string Implements IPlayerVisible"
  },
  "api/NetAF.Assets.Attributes.AttributeManager.html": {
    "href": "api/NetAF.Assets.Attributes.AttributeManager.html",
    "title": "Class AttributeManager | NetAF",
    "summary": "Class AttributeManager Provides a class for managing attributes. Inheritance object AttributeManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Assets.Attributes Assembly: NetAF.dll Syntax public sealed class AttributeManager Properties Count Get the number of attributes this manager has. Declaration public int Count { get; } Property Value Type Description int HasPlayerVisibleAttributes Get if there are any player visible attributes. Declaration public bool HasPlayerVisibleAttributes { get; } Property Value Type Description bool Methods Add(Attribute, int) Add a value to an attribute. Declaration public void Add(Attribute attribute, int value) Parameters Type Name Description Attribute attribute The attribute. int value The value. Add(string, int) Add a value to an attribute. Declaration public void Add(string attributeName, int value) Parameters Type Name Description string attributeName The name of the attribute. int value The value. Any(Attribute) Get if there is any of a specified attribute. Declaration public bool Any(Attribute attribute) Parameters Type Name Description Attribute attribute The attribute. Returns Type Description bool True if there are any, else false. Any(string) Get if there is any of a specified attribute. Declaration public bool Any(string attributeName) Parameters Type Name Description string attributeName The name of the attribute. Returns Type Description bool True if there are any, else false. GetAsDictionary() Get all attributes as a dictionary. Declaration public Dictionary<Attribute, int> GetAsDictionary() Returns Type Description Dictionary<Attribute, int> A dictionary where the key are the attributes and the values are the values. GetAttributes() Get all attributes. Declaration public Attribute[] GetAttributes() Returns Type Description Attribute[] An array of attributes. GetValue(Attribute) Get the value of an attribute. Declaration public int GetValue(Attribute attribute) Parameters Type Name Description Attribute attribute The attribute. Returns Type Description int The value. GetValue(string) Get the value of an attribute. Declaration public int GetValue(string attributeName) Parameters Type Name Description string attributeName The name of the attribute. Returns Type Description int The value. Remove(Attribute) Remove an attribute. Declaration public void Remove(Attribute attribute) Parameters Type Name Description Attribute attribute The attribute. Remove(string) Remove an attribute. Declaration public void Remove(string attributeName) Parameters Type Name Description string attributeName The name of the attribute. RemoveAll() Remove all attributes. Declaration public void RemoveAll() Set(Attribute, int) Set the value of an attribute. Declaration public void Set(Attribute attribute, int value) Parameters Type Name Description Attribute attribute The attribute. int value The value. Set(string, int) Set the value of an attribute. Declaration public void Set(string attributeName, int value) Parameters Type Name Description string attributeName The name of the attribute. int value The value. Subtract(Attribute, int) Subtract a value from an attribute. Declaration public void Subtract(Attribute attribute, int value) Parameters Type Name Description Attribute attribute The attribute. int value The value. Subtract(string, int) Subtract a value from an attribute. Declaration public void Subtract(string attributeName, int value) Parameters Type Name Description string attributeName The name of the attribute. int value The value."
  },
  "api/NetAF.Assets.Attributes.html": {
    "href": "api/NetAF.Assets.Attributes.html",
    "title": "Namespace NetAF.Assets.Attributes | NetAF",
    "summary": "Namespace NetAF.Assets.Attributes Classes Attribute Provides a description of an attribute. AttributeManager Provides a class for managing attributes."
  },
  "api/NetAF.Assets.Characters.Character.html": {
    "href": "api/NetAF.Assets.Characters.Character.html",
    "title": "Class Character | NetAF",
    "summary": "Class Character Represents a generic in game character. Inheritance object ExaminableObject Character NonPlayableCharacter PlayableCharacter Implements IInteractWithItem IItemContainer IExaminable IPlayerVisible Inherited Members ExaminableObject.DefaultExamination ExaminableObject.Examination ExaminableObject.Identifier ExaminableObject.Description ExaminableObject.Commands ExaminableObject.Attributes ExaminableObject.Examine(ExaminationScene) ExaminableObject.IsPlayerVisible object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Assets.Characters Assembly: NetAF.dll Syntax public abstract class Character : ExaminableObject, IInteractWithItem, IItemContainer, IExaminable, IPlayerVisible Properties Interaction Get the interaction. Declaration public InteractionCallback Interaction { get; protected set; } Property Value Type Description InteractionCallback IsAlive Get if this character is alive. Declaration public bool IsAlive { get; protected set; } Property Value Type Description bool Items Get the items. Declaration public Item[] Items { get; protected set; } Property Value Type Description Item[] Methods AddItem(Item) Add an item. Declaration public void AddItem(Item item) Parameters Type Name Description Item item The item to add. FindItem(string, out Item, bool) Find an item. Declaration public virtual bool FindItem(string itemName, out Item item, bool includeInvisibleItems = false) Parameters Type Name Description string itemName The items name. Item item The item. bool includeInvisibleItems Specify if invisible items should be included. Returns Type Description bool True if the item was found. Give(Item, Character) Give an item to another in game Character. Declaration public virtual bool Give(Item item, Character character) Parameters Type Name Description Item item The item to give. Character character The Character to give the item to. Returns Type Description bool True if the transaction completed OK, else false. HasItem(Item, bool) Determine if this PlayableCharacter has an item. Declaration public virtual bool HasItem(Item item, bool includeInvisibleItems = false) Parameters Type Name Description Item item The item. bool includeInvisibleItems Specify if invisible items should be included. Returns Type Description bool True if the item is found, else false. Interact(Item) Interact with an item. Declaration public Interaction Interact(Item item) Parameters Type Name Description Item item The item to interact with. Returns Type Description Interaction The interaction. InteractWithItem(Item) Interact with a specified item. Declaration protected virtual Interaction InteractWithItem(Item item) Parameters Type Name Description Item item The item to interact with. Returns Type Description Interaction The interaction. Kill() Kill the character. Declaration public virtual void Kill() RemoveItem(Item) Remove an item. Declaration public void RemoveItem(Item item) Parameters Type Name Description Item item The item to remove. Implements IInteractWithItem IItemContainer IExaminable IPlayerVisible"
  },
  "api/NetAF.Assets.Characters.IConverser.html": {
    "href": "api/NetAF.Assets.Characters.IConverser.html",
    "title": "Interface IConverser | NetAF",
    "summary": "Interface IConverser Represents an object that can converse. Inherited Members IExaminable.Identifier IExaminable.Description IExaminable.Commands IExaminable.Attributes IExaminable.Examine(ExaminationScene) IPlayerVisible.IsPlayerVisible Namespace: NetAF.Assets.Characters Assembly: NetAF.dll Syntax public interface IConverser : IExaminable, IPlayerVisible Properties Conversation Get the conversation. Declaration Conversation Conversation { get; } Property Value Type Description Conversation"
  },
  "api/NetAF.Assets.Characters.NonPlayableCharacter.html": {
    "href": "api/NetAF.Assets.Characters.NonPlayableCharacter.html",
    "title": "Class NonPlayableCharacter | NetAF",
    "summary": "Class NonPlayableCharacter Represents a non-playable character. Inheritance object ExaminableObject Character NonPlayableCharacter Implements IInteractWithItem IItemContainer IConverser IExaminable IPlayerVisible Inherited Members Character.IsAlive Character.Interaction Character.Kill() Character.HasItem(Item, bool) Character.FindItem(string, out Item, bool) Character.Give(Item, Character) Character.Interact(Item) Character.Items Character.AddItem(Item) Character.RemoveItem(Item) ExaminableObject.DefaultExamination ExaminableObject.Examination ExaminableObject.Identifier ExaminableObject.Description ExaminableObject.Commands ExaminableObject.Attributes ExaminableObject.Examine(ExaminationScene) ExaminableObject.IsPlayerVisible object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Assets.Characters Assembly: NetAF.dll Syntax public sealed class NonPlayableCharacter : Character, IInteractWithItem, IItemContainer, IConverser, IExaminable, IPlayerVisible Constructors NonPlayableCharacter(Identifier, IDescription, Conversation, CustomCommand[], InteractionCallback, ExaminationCallback) Initializes a new instance of the NonPlayableCharacter class. Declaration public NonPlayableCharacter(Identifier identifier, IDescription description, Conversation conversation = null, CustomCommand[] commands = null, InteractionCallback interaction = null, ExaminationCallback examination = null) Parameters Type Name Description Identifier identifier The identifier. IDescription description The description. Conversation conversation The conversation. CustomCommand[] commands This objects commands. InteractionCallback interaction The interaction. ExaminationCallback examination The examination. NonPlayableCharacter(Identifier, IDescription, bool, Conversation, CustomCommand[], InteractionCallback, ExaminationCallback) Initializes a new instance of the NonPlayableCharacter class. Declaration public NonPlayableCharacter(Identifier identifier, IDescription description, bool isAlive, Conversation conversation = null, CustomCommand[] commands = null, InteractionCallback interaction = null, ExaminationCallback examination = null) Parameters Type Name Description Identifier identifier The identifier. IDescription description The description. bool isAlive If this character is alive. Conversation conversation The conversation. CustomCommand[] commands This objects commands. InteractionCallback interaction The interaction. ExaminationCallback examination The examination. NonPlayableCharacter(string, string, Conversation, CustomCommand[], InteractionCallback, ExaminationCallback) Initializes a new instance of the NonPlayableCharacter class. Declaration public NonPlayableCharacter(string identifier, string description, Conversation conversation = null, CustomCommand[] commands = null, InteractionCallback interaction = null, ExaminationCallback examination = null) Parameters Type Name Description string identifier The identifier. string description The description. Conversation conversation The conversation. CustomCommand[] commands This objects commands. InteractionCallback interaction The interaction. ExaminationCallback examination The examination. Properties Conversation Get the conversation. Declaration public Conversation Conversation { get; } Property Value Type Description Conversation Implements IInteractWithItem IItemContainer IConverser IExaminable IPlayerVisible"
  },
  "api/NetAF.Assets.Characters.PlayableCharacter.html": {
    "href": "api/NetAF.Assets.Characters.PlayableCharacter.html",
    "title": "Class PlayableCharacter | NetAF",
    "summary": "Class PlayableCharacter Represents a playable character. Inheritance object ExaminableObject Character PlayableCharacter Implements IInteractWithItem IItemContainer IExaminable IPlayerVisible Inherited Members Character.IsAlive Character.Interaction Character.Kill() Character.HasItem(Item, bool) Character.FindItem(string, out Item, bool) Character.Give(Item, Character) Character.Interact(Item) Character.Items Character.AddItem(Item) Character.RemoveItem(Item) ExaminableObject.DefaultExamination ExaminableObject.Examination ExaminableObject.Identifier ExaminableObject.Description ExaminableObject.Commands ExaminableObject.Attributes ExaminableObject.Examine(ExaminationScene) ExaminableObject.IsPlayerVisible object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Assets.Characters Assembly: NetAF.dll Syntax public sealed class PlayableCharacter : Character, IInteractWithItem, IItemContainer, IExaminable, IPlayerVisible Constructors PlayableCharacter(Identifier, IDescription, Item[], CustomCommand[], InteractionCallback, ExaminationCallback) Initializes a new instance of the PlayableCharacter class. Declaration public PlayableCharacter(Identifier identifier, IDescription description, Item[] items = null, CustomCommand[] commands = null, InteractionCallback interaction = null, ExaminationCallback examination = null) Parameters Type Name Description Identifier identifier The identifier. IDescription description The description. Item[] items The items. CustomCommand[] commands This objects commands. InteractionCallback interaction The interaction. ExaminationCallback examination The examination. PlayableCharacter(Identifier, IDescription, bool, bool, Item[], CustomCommand[], InteractionCallback, ExaminationCallback) Initializes a new instance of the PlayableCharacter class. Declaration public PlayableCharacter(Identifier identifier, IDescription description, bool canConverse, bool canTakeAndDropItems = true, Item[] items = null, CustomCommand[] commands = null, InteractionCallback interaction = null, ExaminationCallback examination = null) Parameters Type Name Description Identifier identifier The identifier. IDescription description The description. bool canConverse If this playable character can converse with an IConverser. bool canTakeAndDropItems If this playable character can take and drop items. Item[] items The items. CustomCommand[] commands This objects commands. InteractionCallback interaction The interaction. ExaminationCallback examination The examination. PlayableCharacter(string, string, Item[], CustomCommand[], InteractionCallback, ExaminationCallback) Initializes a new instance of the PlayableCharacter class. Declaration public PlayableCharacter(string identifier, string description, Item[] items = null, CustomCommand[] commands = null, InteractionCallback interaction = null, ExaminationCallback examination = null) Parameters Type Name Description string identifier The identifier. string description The description. Item[] items The items. CustomCommand[] commands This objects commands. InteractionCallback interaction The interaction. ExaminationCallback examination The examination. PlayableCharacter(string, string, bool, bool, Item[], CustomCommand[], InteractionCallback, ExaminationCallback) Initializes a new instance of the PlayableCharacter class. Declaration public PlayableCharacter(string identifier, string description, bool canConverse, bool canTakeAndDropItems = true, Item[] items = null, CustomCommand[] commands = null, InteractionCallback interaction = null, ExaminationCallback examination = null) Parameters Type Name Description string identifier The identifier. string description The description. bool canConverse If this playable character can converse with an IConverser. bool canTakeAndDropItems If this playable character can take and drop items. Item[] items The items. CustomCommand[] commands This objects commands. InteractionCallback interaction The interaction. ExaminationCallback examination The examination. Properties CanConverse Get if this playable character can converse with an IConverser. Declaration public bool CanConverse { get; } Property Value Type Description bool CanTakeAndDropItems Get if this playable character can take and drop items. Declaration public bool CanTakeAndDropItems { get; } Property Value Type Description bool DefaultPlayableCharacterExamination Get the default examination for a PlayableCharacter. Declaration public static ExaminationCallback DefaultPlayableCharacterExamination { get; } Property Value Type Description ExaminationCallback Implements IInteractWithItem IItemContainer IExaminable IPlayerVisible"
  },
  "api/NetAF.Assets.Characters.html": {
    "href": "api/NetAF.Assets.Characters.html",
    "title": "Namespace NetAF.Assets.Characters | NetAF",
    "summary": "Namespace NetAF.Assets.Characters Classes Character Represents a generic in game character. NonPlayableCharacter Represents a non-playable character. PlayableCharacter Represents a playable character. Interfaces IConverser Represents an object that can converse."
  },
  "api/NetAF.Assets.Condition.html": {
    "href": "api/NetAF.Assets.Condition.html",
    "title": "Delegate Condition | NetAF",
    "summary": "Delegate Condition Represents a callback for conditions. Namespace: NetAF.Assets Assembly: NetAF.dll Syntax public delegate bool Condition() Returns Type Description bool The result of the condition."
  },
  "api/NetAF.Assets.ConditionalDescription.html": {
    "href": "api/NetAF.Assets.ConditionalDescription.html",
    "title": "Class ConditionalDescription | NetAF",
    "summary": "Class ConditionalDescription Represents a conditional description of an object. Inheritance object ConditionalDescription Implements IDescription Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Assets Assembly: NetAF.dll Syntax public sealed class ConditionalDescription : IDescription Constructors ConditionalDescription(string, DescribedCondition) Represents a conditional description of an object. Declaration public ConditionalDescription(string falseDescription, DescribedCondition condition) Parameters Type Name Description string falseDescription The description of this object when the condition returns false. DescribedCondition condition The condition. ConditionalDescription(string, string, Condition) Initializes a new instance of the ConditionalDescription class. Declaration public ConditionalDescription(string trueDescription, string falseDescription, Condition condition) Parameters Type Name Description string trueDescription The description of this object when the condition returns true. string falseDescription The description of this object when the condition returns false. Condition condition The condition. Methods GetDescription() Get the description. Declaration public string GetDescription() Returns Type Description string The description. Implements IDescription"
  },
  "api/NetAF.Assets.DescribedCondition.html": {
    "href": "api/NetAF.Assets.DescribedCondition.html",
    "title": "Class DescribedCondition | NetAF",
    "summary": "Class DescribedCondition A described condition. Inheritance object DescribedCondition Implements IEquatable<DescribedCondition> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Assets Assembly: NetAF.dll Syntax public sealed record DescribedCondition : IEquatable<DescribedCondition> Constructors DescribedCondition(Condition, string) A described condition. Declaration public DescribedCondition(Condition Condition, string Description) Parameters Type Name Description Condition Condition The condition. string Description The description of the condition. Properties Condition The condition. Declaration public Condition Condition { get; init; } Property Value Type Description Condition Description The description of the condition. Declaration public string Description { get; init; } Property Value Type Description string Implements IEquatable<T>"
  },
  "api/NetAF.Assets.Description.html": {
    "href": "api/NetAF.Assets.Description.html",
    "title": "Class Description | NetAF",
    "summary": "Class Description Represents a description of an object. Inheritance object Description Implements IDescription Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Assets Assembly: NetAF.dll Syntax public sealed class Description : IDescription Constructors Description(string) Represents a description of an object. Declaration public Description(string description) Parameters Type Name Description string description The description of this object. Properties Empty Get an empty description. Declaration public static Description Empty { get; } Property Value Type Description Description Methods GetDescription() Get the description. Declaration public string GetDescription() Returns Type Description string The description. Implements IDescription"
  },
  "api/NetAF.Assets.ExaminableObject.html": {
    "href": "api/NetAF.Assets.ExaminableObject.html",
    "title": "Class ExaminableObject | NetAF",
    "summary": "Class ExaminableObject Represents an object that can be examined. Inheritance object ExaminableObject Character Item Exit Overworld Region Room Implements IExaminable IPlayerVisible Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Assets Assembly: NetAF.dll Syntax public class ExaminableObject : IExaminable, IPlayerVisible Properties Attributes Get the attribute manager for this object. Declaration public AttributeManager Attributes { get; } Property Value Type Description AttributeManager Commands Get this objects commands. Declaration public CustomCommand[] Commands { get; protected set; } Property Value Type Description CustomCommand[] DefaultExamination Get a default examination for an ExaminableObject. Declaration public static ExaminationCallback DefaultExamination { get; } Property Value Type Description ExaminationCallback Description Get a description of this object. Declaration public IDescription Description { get; protected set; } Property Value Type Description IDescription Examination Get the callback handling all examination of this object. Declaration public ExaminationCallback Examination { get; protected set; } Property Value Type Description ExaminationCallback Identifier Get this objects identifier. Declaration public Identifier Identifier { get; protected set; } Property Value Type Description Identifier IsPlayerVisible Get or set if this is visible to the player. Declaration public bool IsPlayerVisible { get; set; } Property Value Type Description bool Methods Examine(ExaminationScene) Examine this object. Declaration public Examination Examine(ExaminationScene scene) Parameters Type Name Description ExaminationScene scene The scene this object is being examined from. Returns Type Description Examination The examination. Implements IExaminable IPlayerVisible"
  },
  "api/NetAF.Assets.Examination.html": {
    "href": "api/NetAF.Assets.Examination.html",
    "title": "Class Examination | NetAF",
    "summary": "Class Examination Represents an examination. Inheritance object Examination Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Assets Assembly: NetAF.dll Syntax public sealed class Examination Constructors Examination(string) Represents an examination. Declaration public Examination(string description) Parameters Type Name Description string description A description of the examination. Properties Description Get the description of the examination. Declaration public string Description { get; } Property Value Type Description string"
  },
  "api/NetAF.Assets.ExaminationCallback.html": {
    "href": "api/NetAF.Assets.ExaminationCallback.html",
    "title": "Delegate ExaminationCallback | NetAF",
    "summary": "Delegate ExaminationCallback Represents the callback for examinations. Namespace: NetAF.Assets Assembly: NetAF.dll Syntax public delegate Examination ExaminationCallback(ExaminationRequest request) Parameters Type Name Description ExaminationRequest request The examination request. Returns Type Description Examination The examination."
  },
  "api/NetAF.Assets.ExaminationRequest.html": {
    "href": "api/NetAF.Assets.ExaminationRequest.html",
    "title": "Class ExaminationRequest | NetAF",
    "summary": "Class ExaminationRequest Represents a request to examine an IExaminable. Inheritance object ExaminationRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Assets Assembly: NetAF.dll Syntax public class ExaminationRequest Constructors ExaminationRequest(IExaminable, ExaminationScene) Represents a request to examine an IExaminable. Declaration public ExaminationRequest(IExaminable examinable, ExaminationScene scene) Parameters Type Name Description IExaminable examinable The object being examined. ExaminationScene scene The scene the object is being examined from. ExaminationRequest(IExaminable, Game) Initializes a new instance of the ExaminationRequest class. Declaration public ExaminationRequest(IExaminable examinable, Game game) Parameters Type Name Description IExaminable examinable The object being examined. Game game The executing game. Properties Examinable Get the examinable object. Declaration public IExaminable Examinable { get; } Property Value Type Description IExaminable Scene Get the examination scene. Declaration public ExaminationScene Scene { get; } Property Value Type Description ExaminationScene"
  },
  "api/NetAF.Assets.ExaminationScene.html": {
    "href": "api/NetAF.Assets.ExaminationScene.html",
    "title": "Class ExaminationScene | NetAF",
    "summary": "Class ExaminationScene Represents a scene that an examination occurs in. Inheritance object ExaminationScene Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Assets Assembly: NetAF.dll Syntax public class ExaminationScene Constructors ExaminationScene(Character, Room) Represents a scene that an examination occurs in. Declaration public ExaminationScene(Character examiner, Room room) Parameters Type Name Description Character examiner The character who is examining the object. Room room The room the examinable is being examined from. ExaminationScene(Game) Initializes a new instance of the ExaminationScene class. Declaration public ExaminationScene(Game game) Parameters Type Name Description Game game The executing game. Properties Examiner Get the examiner. Declaration public Character Examiner { get; } Property Value Type Description Character NoScene Get a default value for when there is no scene. Declaration public static ExaminationScene NoScene { get; } Property Value Type Description ExaminationScene Room Get the room the examinable is being examined from. Declaration public Room Room { get; } Property Value Type Description Room"
  },
  "api/NetAF.Assets.IDescription.html": {
    "href": "api/NetAF.Assets.IDescription.html",
    "title": "Interface IDescription | NetAF",
    "summary": "Interface IDescription Provides a description of an object. Namespace: NetAF.Assets Assembly: NetAF.dll Syntax public interface IDescription Methods GetDescription() Get the description. Declaration string GetDescription() Returns Type Description string The description."
  },
  "api/NetAF.Assets.IExaminable.html": {
    "href": "api/NetAF.Assets.IExaminable.html",
    "title": "Interface IExaminable | NetAF",
    "summary": "Interface IExaminable Represents any object that is examinable. Inherited Members IPlayerVisible.IsPlayerVisible Namespace: NetAF.Assets Assembly: NetAF.dll Syntax public interface IExaminable : IPlayerVisible Properties Attributes Get the attribute manager for this object. Declaration AttributeManager Attributes { get; } Property Value Type Description AttributeManager Commands Get this objects commands. Declaration CustomCommand[] Commands { get; } Property Value Type Description CustomCommand[] Description Get a description of this object. Declaration IDescription Description { get; } Property Value Type Description IDescription Identifier Get this objects identifier. Declaration Identifier Identifier { get; } Property Value Type Description Identifier Methods Examine(ExaminationScene) Examine this object. Declaration Examination Examine(ExaminationScene scene) Parameters Type Name Description ExaminationScene scene The scene this object is being examined from. Returns Type Description Examination The examination."
  },
  "api/NetAF.Assets.IInteractWithItem.html": {
    "href": "api/NetAF.Assets.IInteractWithItem.html",
    "title": "Interface IInteractWithItem | NetAF",
    "summary": "Interface IInteractWithItem Represents any object that can interact with an item. Namespace: NetAF.Assets Assembly: NetAF.dll Syntax public interface IInteractWithItem Methods Interact(Item) Interact with an item. Declaration Interaction Interact(Item item) Parameters Type Name Description Item item The item to interact with. Returns Type Description Interaction The interaction."
  },
  "api/NetAF.Assets.IItemContainer.html": {
    "href": "api/NetAF.Assets.IItemContainer.html",
    "title": "Interface IItemContainer | NetAF",
    "summary": "Interface IItemContainer Represents any object that is a container of items. Inherited Members IExaminable.Identifier IExaminable.Description IExaminable.Commands IExaminable.Attributes IExaminable.Examine(ExaminationScene) IPlayerVisible.IsPlayerVisible Namespace: NetAF.Assets Assembly: NetAF.dll Syntax public interface IItemContainer : IExaminable, IPlayerVisible Properties Items Get the items. Declaration Item[] Items { get; } Property Value Type Description Item[] Methods AddItem(Item) Add an item. Declaration void AddItem(Item item) Parameters Type Name Description Item item The item to add. RemoveItem(Item) Remove an item. Declaration void RemoveItem(Item item) Parameters Type Name Description Item item The item to remove."
  },
  "api/NetAF.Assets.IPlayerVisible.html": {
    "href": "api/NetAF.Assets.IPlayerVisible.html",
    "title": "Interface IPlayerVisible | NetAF",
    "summary": "Interface IPlayerVisible Represents any object that is visible to a player. Namespace: NetAF.Assets Assembly: NetAF.dll Syntax public interface IPlayerVisible Properties IsPlayerVisible Get or set if this is visible to the player. Declaration bool IsPlayerVisible { get; set; } Property Value Type Description bool"
  },
  "api/NetAF.Assets.Identifier.html": {
    "href": "api/NetAF.Assets.Identifier.html",
    "title": "Class Identifier | NetAF",
    "summary": "Class Identifier Provides a class that can be used as an identifier. Inheritance object Identifier Implements IEquatable<string> IEquatable<Identifier> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Namespace: NetAF.Assets Assembly: NetAF.dll Syntax public sealed class Identifier : IEquatable<string>, IEquatable<Identifier> Constructors Identifier(string) Provides a class that can be used as an identifier. Declaration public Identifier(string name) Parameters Type Name Description string name The name. Properties Empty Get an empty identifier. Declaration public static Identifier Empty { get; } Property Value Type Description Identifier IdentifiableName Get the name as a case insensitive identifier. Declaration public string IdentifiableName { get; } Property Value Type Description string Name Get the name. Declaration public string Name { get; } Property Value Type Description string Methods Equals(Identifier) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(Identifier other) Parameters Type Name Description Identifier other An object to compare with this object. Returns Type Description bool true if the current object is equal to the other parameter; otherwise, false. Equals(string) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(string other) Parameters Type Name Description string other An object to compare with this object. Returns Type Description bool true if the current object is equal to the other parameter; otherwise, false. ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description string A string that represents the current object. Overrides object.ToString() Implements IEquatable<T> IEquatable<T>"
  },
  "api/NetAF.Assets.Interaction.html": {
    "href": "api/NetAF.Assets.Interaction.html",
    "title": "Class Interaction | NetAF",
    "summary": "Class Interaction Represents an interaction. Inheritance object Interaction Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Assets Assembly: NetAF.dll Syntax public sealed class Interaction Constructors Interaction(InteractionResult, Item) Initializes a new instance of the Interaction class. Declaration public Interaction(InteractionResult result, Item item) Parameters Type Name Description InteractionResult result The result of the interaction. Item item The item used in the interaction. Interaction(InteractionResult, Item, string) Initializes a new instance of the Interaction class. Declaration public Interaction(InteractionResult result, Item item, string description) Parameters Type Name Description InteractionResult result The result of the interaction. Item item The item used in the interaction. string description A description of the interaction. Properties Description Get the description of the interaction. Declaration public string Description { get; } Property Value Type Description string Item Get the item used in the interaction. Declaration public Item Item { get; } Property Value Type Description Item Result Get the result. Declaration public InteractionResult Result { get; } Property Value Type Description InteractionResult"
  },
  "api/NetAF.Assets.InteractionCallback.html": {
    "href": "api/NetAF.Assets.InteractionCallback.html",
    "title": "Delegate InteractionCallback | NetAF",
    "summary": "Delegate InteractionCallback Represents the callback for interacting with objects. Namespace: NetAF.Assets Assembly: NetAF.dll Syntax public delegate Interaction InteractionCallback(Item item) Parameters Type Name Description Item item The item to interact with. Returns Type Description Interaction The interaction."
  },
  "api/NetAF.Assets.InteractionResult.html": {
    "href": "api/NetAF.Assets.InteractionResult.html",
    "title": "Enum InteractionResult | NetAF",
    "summary": "Enum InteractionResult Enumeration of interaction results. Namespace: NetAF.Assets Assembly: NetAF.dll Syntax public enum InteractionResult Fields Name Description ItemAndTargetExpires The item and the target expires. ItemExpires The item expires. NoChange No change. PlayerDies The player dies. TargetExpires The target expires."
  },
  "api/NetAF.Assets.Item.html": {
    "href": "api/NetAF.Assets.Item.html",
    "title": "Class Item | NetAF",
    "summary": "Class Item Represents an item that can be used within the game. Inheritance object ExaminableObject Item Implements IExaminable IPlayerVisible IInteractWithItem Inherited Members ExaminableObject.DefaultExamination ExaminableObject.Examination ExaminableObject.Identifier ExaminableObject.Description ExaminableObject.Commands ExaminableObject.Attributes ExaminableObject.Examine(ExaminationScene) ExaminableObject.IsPlayerVisible object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Assets Assembly: NetAF.dll Syntax public sealed class Item : ExaminableObject, IExaminable, IPlayerVisible, IInteractWithItem Constructors Item(Identifier, IDescription, bool, CustomCommand[], InteractionCallback, ExaminationCallback) Initializes a new instance of the Item class. Declaration public Item(Identifier identifier, IDescription description, bool isTakeable = false, CustomCommand[] commands = null, InteractionCallback interaction = null, ExaminationCallback examination = null) Parameters Type Name Description Identifier identifier This Items identifier. IDescription description A description of this Item. bool isTakeable Specify if this item is takeable. CustomCommand[] commands This objects commands. InteractionCallback interaction The interaction. ExaminationCallback examination The examination. Item(string, string, bool, CustomCommand[], InteractionCallback, ExaminationCallback) Initializes a new instance of the Item class. Declaration public Item(string identifier, string description, bool isTakeable = false, CustomCommand[] commands = null, InteractionCallback interaction = null, ExaminationCallback examination = null) Parameters Type Name Description string identifier This Items identifier. string description A description of this Item. bool isTakeable Specify if this item is takeable. CustomCommand[] commands This objects commands. InteractionCallback interaction The interaction. ExaminationCallback examination The examination. Properties Interaction Get the interaction. Declaration public InteractionCallback Interaction { get; } Property Value Type Description InteractionCallback IsTakeable Get or set if this is takeable. Declaration public bool IsTakeable { get; } Property Value Type Description bool Methods Interact(Item) Interact with an item. Declaration public Interaction Interact(Item item) Parameters Type Name Description Item item The item to interact with. Returns Type Description Interaction The interaction. Implements IExaminable IPlayerVisible IInteractWithItem"
  },
  "api/NetAF.Assets.Locations.Direction.html": {
    "href": "api/NetAF.Assets.Locations.Direction.html",
    "title": "Enum Direction | NetAF",
    "summary": "Enum Direction Enumeration of directions. Namespace: NetAF.Assets.Locations Assembly: NetAF.dll Syntax public enum Direction Fields Name Description Down Down. East East. North North. South South. Up Up. West West. Extension Methods DirectionExtensions.Inverse(Direction)"
  },
  "api/NetAF.Assets.Locations.Exit.html": {
    "href": "api/NetAF.Assets.Locations.Exit.html",
    "title": "Class Exit | NetAF",
    "summary": "Class Exit Represents an exit from a room. Inheritance object ExaminableObject Exit Implements IExaminable IPlayerVisible IInteractWithItem Inherited Members ExaminableObject.DefaultExamination ExaminableObject.Examination ExaminableObject.Identifier ExaminableObject.Description ExaminableObject.Commands ExaminableObject.Attributes ExaminableObject.Examine(ExaminationScene) ExaminableObject.IsPlayerVisible object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Assets.Locations Assembly: NetAF.dll Syntax public sealed class Exit : ExaminableObject, IExaminable, IPlayerVisible, IInteractWithItem Constructors Exit(Direction, bool, Identifier, IDescription, CustomCommand[], InteractionCallback, ExaminationCallback) Initializes a new instance of the Exit class. Declaration public Exit(Direction direction, bool isLocked = false, Identifier identifier = null, IDescription description = null, CustomCommand[] commands = null, InteractionCallback interaction = null, ExaminationCallback examination = null) Parameters Type Name Description Direction direction The direction of the exit. bool isLocked If this exit is locked. Identifier identifier An identifier for the exit. IDescription description A description of the exit. CustomCommand[] commands This objects commands. InteractionCallback interaction The interaction. ExaminationCallback examination The examination. Properties Direction Get the direction of the exit. Declaration public Direction Direction { get; } Property Value Type Description Direction Interaction Get the interaction. Declaration public InteractionCallback Interaction { get; } Property Value Type Description InteractionCallback IsLocked Get if this Exit is locked. Declaration public bool IsLocked { get; } Property Value Type Description bool Methods Interact(Item) Interact with an item. Declaration public Interaction Interact(Item item) Parameters Type Name Description Item item The item to interact with. Returns Type Description Interaction The interaction. Lock() Lock this exit. Declaration public void Lock() Unlock() Unlock this exit. Declaration public void Unlock() Implements IExaminable IPlayerVisible IInteractWithItem"
  },
  "api/NetAF.Assets.Locations.Matrix.html": {
    "href": "api/NetAF.Assets.Locations.Matrix.html",
    "title": "Class Matrix | NetAF",
    "summary": "Class Matrix Provides a 3D matrix of rooms. Inheritance object Matrix Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Assets.Locations Assembly: NetAF.dll Syntax public sealed class Matrix Constructors Matrix(RoomPosition[]) Provides a 3D matrix of rooms. Declaration public Matrix(RoomPosition[] roomPositions) Parameters Type Name Description RoomPosition[] roomPositions The rooms to be represented. Properties Depth Get the depth of the matrix. Declaration public int Depth { get; } Property Value Type Description int Height Get the height of the matrix. Declaration public int Height { get; } Property Value Type Description int this[Room] Get the position of a room in this matrix. Declaration public Point3D? this[Room room] { get; } Parameters Type Name Description Room room The room. Property Value Type Description Point3D? The position of the room, else false. this[int, int, int] Get a room in this matrix. Declaration public Room this[int x, int y, int z] { get; } Parameters Type Name Description int x The x position. int y The y position. int z The z position. Property Value Type Description Room The room. Width Get the width of the matrix. Declaration public int Width { get; } Property Value Type Description int Methods DistanceBetweenPoints(Point3D, Point3D) Find the distance between two points. Declaration public static double DistanceBetweenPoints(Point3D a, Point3D b) Parameters Type Name Description Point3D a Point a. Point3D b Point b. Returns Type Description double The distance between the two points. DistanceBetweenRooms(Room, Room) Find the distance between two rooms. Declaration public double DistanceBetweenRooms(Room a, Room b) Parameters Type Name Description Room a Room a. Room b Room b. Returns Type Description double The distance between the two rooms. FindAllRoomsOnZ(int) Find all rooms on a specified Z plane. Declaration public Room[] FindAllRoomsOnZ(int z) Parameters Type Name Description int z The Z plane. Returns Type Description Room[] All rooms on the specified Z plane. FindAllZWithVisitedRooms() Find all Z that have visited rooms. Declaration public int[] FindAllZWithVisitedRooms() Returns Type Description int[] An array containing all Z with visited rooms. ToRooms() Return this matrix as a one dimensional array of rooms. Declaration public Room[] ToRooms() Returns Type Description Room[] The rooms, as a one dimensional array."
  },
  "api/NetAF.Assets.Locations.Overworld.html": {
    "href": "api/NetAF.Assets.Locations.Overworld.html",
    "title": "Class Overworld | NetAF",
    "summary": "Class Overworld Represents an entire overworld. Inheritance object ExaminableObject Overworld Implements IExaminable IPlayerVisible Inherited Members ExaminableObject.DefaultExamination ExaminableObject.Examination ExaminableObject.Identifier ExaminableObject.Description ExaminableObject.Commands ExaminableObject.Attributes ExaminableObject.Examine(ExaminationScene) ExaminableObject.IsPlayerVisible object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Assets.Locations Assembly: NetAF.dll Syntax public sealed class Overworld : ExaminableObject, IExaminable, IPlayerVisible Constructors Overworld(Identifier, IDescription, CustomCommand[], ExaminationCallback) Initializes a new instance of the overworld class. Declaration public Overworld(Identifier identifier, IDescription description, CustomCommand[] commands = null, ExaminationCallback examination = null) Parameters Type Name Description Identifier identifier The identifier for this overworld. IDescription description A description of this overworld. CustomCommand[] commands This objects commands. ExaminationCallback examination The examination. Overworld(string, string, CustomCommand[], ExaminationCallback) Initializes a new instance of the overworld class. Declaration public Overworld(string identifier, string description, CustomCommand[] commands = null, ExaminationCallback examination = null) Parameters Type Name Description string identifier The identifier for this overworld. string description A description of this overworld. CustomCommand[] commands This objects commands. ExaminationCallback examination The examination. Properties CurrentRegion Get the current region. Declaration public Region CurrentRegion { get; } Property Value Type Description Region DefaultOverworldExamination Get the default examination for an Overworld. Declaration public static ExaminationCallback DefaultOverworldExamination { get; } Property Value Type Description ExaminationCallback Regions Get the regions in this overworld. Declaration public Region[] Regions { get; } Property Value Type Description Region[] Methods AddRegion(Region) Add a region to this overworld. Declaration public void AddRegion(Region region) Parameters Type Name Description Region region The region to add. FindRegion(string, out Region) Find a region. Declaration public bool FindRegion(string regionName, out Region region) Parameters Type Name Description string regionName The regions name. Region region The region. Returns Type Description bool True if the region was found. Move(Region) Move to a region. Declaration public bool Move(Region region) Parameters Type Name Description Region region The region to move to. Returns Type Description bool True if the region could be moved to, else false. RemoveRegion(Region) Remove a region from this overworld. Declaration public void RemoveRegion(Region region) Parameters Type Name Description Region region The region to remove. Implements IExaminable IPlayerVisible"
  },
  "api/NetAF.Assets.Locations.Region.html": {
    "href": "api/NetAF.Assets.Locations.Region.html",
    "title": "Class Region | NetAF",
    "summary": "Class Region Represents a region. Inheritance object ExaminableObject Region Implements IExaminable IPlayerVisible Inherited Members ExaminableObject.DefaultExamination ExaminableObject.Examination ExaminableObject.Identifier ExaminableObject.Description ExaminableObject.Commands ExaminableObject.Attributes ExaminableObject.Examine(ExaminationScene) ExaminableObject.IsPlayerVisible object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Assets.Locations Assembly: NetAF.dll Syntax public sealed class Region : ExaminableObject, IExaminable, IPlayerVisible Constructors Region(Identifier, IDescription, CustomCommand[], ExaminationCallback) Initializes a new instance of the Region class. Declaration public Region(Identifier identifier, IDescription description, CustomCommand[] commands = null, ExaminationCallback examination = null) Parameters Type Name Description Identifier identifier This Regions identifier. IDescription description The description of this Region. CustomCommand[] commands This objects commands. ExaminationCallback examination The examination. Region(string, string, CustomCommand[], ExaminationCallback) Initializes a new instance of the Region class. Declaration public Region(string identifier, string description, CustomCommand[] commands = null, ExaminationCallback examination = null) Parameters Type Name Description string identifier This Regions identifier. string description The description of this Region. CustomCommand[] commands This objects commands. ExaminationCallback examination The examination. Properties CurrentRoom Get the current room. Declaration public Room CurrentRoom { get; } Property Value Type Description Room DefaultRegionExamination Get the default examination for a Region. Declaration public static ExaminationCallback DefaultRegionExamination { get; } Property Value Type Description ExaminationCallback IsVisibleWithoutDiscovery Get if the current region is visible without discovery. Declaration public bool IsVisibleWithoutDiscovery { get; set; } Property Value Type Description bool this[int, int, int] Get a room at a specified location. Declaration public Room this[int x, int y, int z] { get; } Parameters Type Name Description int x The x position. int y The y position. int z The z position. Property Value Type Description Room The room. Rooms Get the number of rooms region contains. Declaration public int Rooms { get; } Property Value Type Description int Methods AddRoom(Room, int, int, int) Add a Room to this region. Declaration public bool AddRoom(Room room, int x, int y, int z) Parameters Type Name Description Room room The room to add. int x The x position within the region. int y The y position within the region. int z The z position within the region. Returns Type Description bool GetAdjoiningRoom(Direction) Get an adjoining room to the Region.CurrentRoom property. Declaration public Room GetAdjoiningRoom(Direction direction) Parameters Type Name Description Direction direction The direction of the adjoining Room. Returns Type Description Room The adjoining Room. GetAdjoiningRoom(Direction, Room) Get an adjoining room to a room. Declaration public Room GetAdjoiningRoom(Direction direction, Room room) Parameters Type Name Description Direction direction The direction of the adjoining room. Room room The room to use as the reference. Returns Type Description Room The adjoining room. GetPositionOfRoom(Room) Get the position of a room. Declaration public RoomPosition GetPositionOfRoom(Room room) Parameters Type Name Description Room room The room. Returns Type Description RoomPosition The position of the room. JumpToRoom(Point3D) Jump to a room. Declaration public bool JumpToRoom(Point3D location) Parameters Type Name Description Point3D location The location of the room. Returns Type Description bool True if the room could be jumped to, else false. Move(Direction) Move in a direction. Declaration public bool Move(Direction direction) Parameters Type Name Description Direction direction The direction to move in. Returns Type Description bool True if the move was successful, else false. SetStartRoom(Room) Set the room to start in. Declaration public void SetStartRoom(Room room) Parameters Type Name Description Room room The Room to start in. SetStartRoom(int, int, int) Set the room to start in. Declaration public void SetStartRoom(int x, int y, int z) Parameters Type Name Description int x The x position. int y The y position. int z The z position. ToMatrix() Get this region as a 3D matrix of rooms. Declaration public Matrix ToMatrix() Returns Type Description Matrix This region, as a 3D matrix. TryFindRoom(string, out Room) Try and find a room within this region. Declaration public bool TryFindRoom(string name, out Room room) Parameters Type Name Description string name The rooms name. Room room The room, if found, else null. Returns Type Description bool True if the room could be found, else false. UnlockDoorPair(Direction) Unlock a pair of doors in a specified direction in the CurrentRoom. Declaration public bool UnlockDoorPair(Direction direction) Parameters Type Name Description Direction direction The direction to unlock in. Returns Type Description bool True if the door pair could be unlocked, else false. Implements IExaminable IPlayerVisible"
  },
  "api/NetAF.Assets.Locations.Room.html": {
    "href": "api/NetAF.Assets.Locations.Room.html",
    "title": "Class Room | NetAF",
    "summary": "Class Room Represents a room. Inheritance object ExaminableObject Room Implements IInteractWithItem IItemContainer IExaminable IPlayerVisible Inherited Members ExaminableObject.DefaultExamination ExaminableObject.Examination ExaminableObject.Identifier ExaminableObject.Description ExaminableObject.Commands ExaminableObject.Attributes ExaminableObject.Examine(ExaminationScene) ExaminableObject.IsPlayerVisible object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Assets.Locations Assembly: NetAF.dll Syntax public sealed class Room : ExaminableObject, IInteractWithItem, IItemContainer, IExaminable, IPlayerVisible Constructors Room(Identifier, IDescription, IDescription, Exit[], Item[], CustomCommand[], InteractionCallback, ExaminationCallback, RoomTransitionCallback, RoomTransitionCallback) Initializes a new instance of the Room class. Declaration public Room(Identifier identifier, IDescription description, IDescription introduction, Exit[] exits = null, Item[] items = null, CustomCommand[] commands = null, InteractionCallback interaction = null, ExaminationCallback examination = null, RoomTransitionCallback enterCallback = null, RoomTransitionCallback exitCallback = null) Parameters Type Name Description Identifier identifier This rooms identifier. IDescription description This rooms description. IDescription introduction An introduction to this room. Exit[] exits The exits from this room. Item[] items The items in this room. CustomCommand[] commands This objects commands. InteractionCallback interaction The interaction. ExaminationCallback examination The examination. RoomTransitionCallback enterCallback The callback to invoke when this room is entered. RoomTransitionCallback exitCallback The callback to invoke when this room is exited. Room(Identifier, IDescription, Exit[], Item[], CustomCommand[], InteractionCallback, ExaminationCallback, RoomTransitionCallback, RoomTransitionCallback) Initializes a new instance of the Room class. Declaration public Room(Identifier identifier, IDescription description, Exit[] exits = null, Item[] items = null, CustomCommand[] commands = null, InteractionCallback interaction = null, ExaminationCallback examination = null, RoomTransitionCallback enterCallback = null, RoomTransitionCallback exitCallback = null) Parameters Type Name Description Identifier identifier This rooms identifier. IDescription description This rooms description. Exit[] exits The exits from this room. Item[] items The items in this room. CustomCommand[] commands This objects commands. InteractionCallback interaction The interaction. ExaminationCallback examination The examination. RoomTransitionCallback enterCallback The callback to invoke when this room is entered. RoomTransitionCallback exitCallback The callback to invoke when this room is exited. Room(string, string, Exit[], Item[], CustomCommand[], InteractionCallback, ExaminationCallback, RoomTransitionCallback, RoomTransitionCallback) Initializes a new instance of the Room class. Declaration public Room(string identifier, string description, Exit[] exits = null, Item[] items = null, CustomCommand[] commands = null, InteractionCallback interaction = null, ExaminationCallback examination = null, RoomTransitionCallback enterCallback = null, RoomTransitionCallback exitCallback = null) Parameters Type Name Description string identifier This rooms identifier. string description This rooms description. Exit[] exits The exits from this room. Item[] items The items in this room. CustomCommand[] commands This objects commands. InteractionCallback interaction The interaction. ExaminationCallback examination The examination. RoomTransitionCallback enterCallback The callback to invoke when this room is entered. RoomTransitionCallback exitCallback The callback to invoke when this room is exited. Room(string, string, string, Exit[], Item[], CustomCommand[], InteractionCallback, ExaminationCallback, RoomTransitionCallback, RoomTransitionCallback) Initializes a new instance of the Room class. Declaration public Room(string identifier, string description, string introduction, Exit[] exits = null, Item[] items = null, CustomCommand[] commands = null, InteractionCallback interaction = null, ExaminationCallback examination = null, RoomTransitionCallback enterCallback = null, RoomTransitionCallback exitCallback = null) Parameters Type Name Description string identifier This rooms identifier. string description This rooms description. string introduction An introduction to this room. Exit[] exits The exits from this room. Item[] items The items in this room. CustomCommand[] commands This objects commands. InteractionCallback interaction The interaction. ExaminationCallback examination The examination. RoomTransitionCallback enterCallback The callback to invoke when this room is entered. RoomTransitionCallback exitCallback The callback to invoke when this room is exited. Properties Characters Get the characters in this Room. Declaration public NonPlayableCharacter[] Characters { get; } Property Value Type Description NonPlayableCharacter[] DefaultRoomExamination Get the default examination for a Room. Declaration public static ExaminationCallback DefaultRoomExamination { get; } Property Value Type Description ExaminationCallback EnterCallback Get the callback to invoke when this room is entered. Declaration public RoomTransitionCallback EnterCallback { get; } Property Value Type Description RoomTransitionCallback EnteredFrom Get which direction this room was entered from. Declaration public Direction? EnteredFrom { get; } Property Value Type Description Direction? ExitCallback Get the callback to invoke when this room is exited. Declaration public RoomTransitionCallback ExitCallback { get; } Property Value Type Description RoomTransitionCallback Exits Get the exits. Declaration public Exit[] Exits { get; } Property Value Type Description Exit[] HasBeenVisited Get if this location has been visited. Declaration public bool HasBeenVisited { get; } Property Value Type Description bool Interaction Get the interaction. Declaration public InteractionCallback Interaction { get; } Property Value Type Description InteractionCallback Introduction Get an introduction for this room. Declaration public IDescription Introduction { get; } Property Value Type Description IDescription this[Direction] Get an exit. Declaration public Exit this[Direction direction] { get; } Parameters Type Name Description Direction direction The direction of an exit. Property Value Type Description Exit The exit. Items Get the items. Declaration public Item[] Items { get; } Property Value Type Description Item[] UnlockedExits Get all unlocked exits. Declaration public Exit[] UnlockedExits { get; } Property Value Type Description Exit[] Methods AddCharacter(NonPlayableCharacter) Add a character to this room. Declaration public void AddCharacter(NonPlayableCharacter character) Parameters Type Name Description NonPlayableCharacter character The character to add. AddItem(Item) Add an item. Declaration public void AddItem(Item item) Parameters Type Name Description Item item The item to add. CanMove(Direction) Test if a move is possible. Declaration public bool CanMove(Direction direction) Parameters Type Name Description Direction direction The direction to test. Returns Type Description bool If a move in the specified direction is possible. ContainsCharacter(NonPlayableCharacter, bool) Get if this Room contains a character. Declaration public bool ContainsCharacter(NonPlayableCharacter character, bool includeInvisibleCharacters = false) Parameters Type Name Description NonPlayableCharacter character The character. bool includeInvisibleCharacters Specify if invisible characters should be included. Returns Type Description bool True if the item is in this room, else false. ContainsExit(Direction, bool) Get if this Room contains an exit. Declaration public bool ContainsExit(Direction direction, bool includeInvisibleExits = false) Parameters Type Name Description Direction direction The direction of the exit to check for. bool includeInvisibleExits Specify if invisible exits should be included. Returns Type Description bool True if the exit exists, else false. ContainsExit(bool) Get if this Room contains an exit. Declaration public bool ContainsExit(bool includeInvisibleExits = false) Parameters Type Name Description bool includeInvisibleExits Specify if invisible exits should be included. Returns Type Description bool True if the exit exists, else false. ContainsItem(Item, bool) Get if this Room contains an item. Declaration public bool ContainsItem(Item item, bool includeInvisibleItems = false) Parameters Type Name Description Item item The item to check for. bool includeInvisibleItems Specify if invisible exits should be included. Returns Type Description bool True if the item is in this room, else false. FindCharacter(string, out NonPlayableCharacter) Find a character. This will not include characters whose ExaminableObject.IsPlayerVisible property is set to false. Declaration public bool FindCharacter(string characterName, out NonPlayableCharacter character) Parameters Type Name Description string characterName The character. NonPlayableCharacter character The character name. Returns Type Description bool True if the character was found. FindCharacter(string, out NonPlayableCharacter, bool) Find a character. Declaration public bool FindCharacter(string characterName, out NonPlayableCharacter character, bool includeInvisibleCharacters) Parameters Type Name Description string characterName The character name. NonPlayableCharacter character The character. bool includeInvisibleCharacters Specify if invisible characters should be included. Returns Type Description bool True if the character was found. FindExit(Direction, bool, out Exit) Find an exit. Declaration public bool FindExit(Direction direction, bool includeInvisibleExits, out Exit exit) Parameters Type Name Description Direction direction The exits direction. bool includeInvisibleExits Specify if invisible exists should be included. Exit exit The exit. Returns Type Description bool True if the exit was found. FindInteractionTarget(string, out IInteractWithItem) Find an interaction target. Declaration public bool FindInteractionTarget(string targetName, out IInteractWithItem target) Parameters Type Name Description string targetName The targets name. IInteractWithItem target The target. Returns Type Description bool True if the target was found. FindItem(string, out Item) Find an item. This will not include items whose ExaminableObject.IsPlayerVisible property is set to false Declaration public bool FindItem(string itemName, out Item item) Parameters Type Name Description string itemName The items name. This is case insensitive Item item The item Returns Type Description bool True if the item was found FindItem(string, out Item, bool) Find an item. Declaration public bool FindItem(string itemName, out Item item, bool includeInvisibleItems) Parameters Type Name Description string itemName The items name. Item item The item. bool includeInvisibleItems Specify is invisible items should be included. Returns Type Description bool True if the item was found. GetAllInteractionTargets() Get all interaction targets for this room. Declaration public IInteractWithItem[] GetAllInteractionTargets() Returns Type Description IInteractWithItem[] An array containing all interaction targets. HasLockedExitInDirection(Direction, bool) Get if this room has a visible locked exit in a specified direction. Declaration public bool HasLockedExitInDirection(Direction direction, bool includeInvisibleExits = false) Parameters Type Name Description Direction direction The direction to check. bool includeInvisibleExits Specify if invisible exits should be included. Returns Type Description bool If there is a locked exit in the specified direction. HasUnlockedExitInDirection(Direction, bool) Get if this room has a visible unlocked exit in a specified direction. Declaration public bool HasUnlockedExitInDirection(Direction direction, bool includeInvisibleExits = false) Parameters Type Name Description Direction direction The direction to check. bool includeInvisibleExits Specify if invisible exits should be included. Returns Type Description bool If there is a unlocked exit in the specified direction. Interact(Item) Interact with an item. Declaration public Interaction Interact(Item item) Parameters Type Name Description Item item The item to interact with. Returns Type Description Interaction The interaction. RemoveCharacter(NonPlayableCharacter) Remove a character from the room. Declaration public void RemoveCharacter(NonPlayableCharacter character) Parameters Type Name Description NonPlayableCharacter character The character to remove. RemoveInteractionTarget(IInteractWithItem) Remove an interaction target from the room. Declaration public IInteractWithItem RemoveInteractionTarget(IInteractWithItem target) Parameters Type Name Description IInteractWithItem target The target to remove. Returns Type Description IInteractWithItem The target removed from this room. RemoveItem(Item) Remove an item. Declaration public void RemoveItem(Item item) Parameters Type Name Description Item item The item to remove. Implements IInteractWithItem IItemContainer IExaminable IPlayerVisible"
  },
  "api/NetAF.Assets.Locations.RoomPosition.html": {
    "href": "api/NetAF.Assets.Locations.RoomPosition.html",
    "title": "Class RoomPosition | NetAF",
    "summary": "Class RoomPosition Represents a room position. Inheritance object RoomPosition Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Assets.Locations Assembly: NetAF.dll Syntax public class RoomPosition Constructors RoomPosition(Room, Point3D) Represents a room position. Declaration public RoomPosition(Room room, Point3D position) Parameters Type Name Description Room room The room/ Point3D position The position of the room. Properties Position Get the position of the room. Declaration public Point3D Position { get; } Property Value Type Description Point3D Room Get the room. Declaration public Room Room { get; } Property Value Type Description Room Methods IsAtPosition(Point3D) Get if this RoomPosition is at a position. Declaration public bool IsAtPosition(Point3D position) Parameters Type Name Description Point3D position The position. Returns Type Description bool True if this is at the position, else false. IsAtPosition(int, int, int) Get if this RoomPosition is at a position. Declaration public bool IsAtPosition(int x, int y, int z) Parameters Type Name Description int x The X position. int y The Y position. int z The Z position. Returns Type Description bool True if this is at the position, else false."
  },
  "api/NetAF.Assets.Locations.ViewPoint.html": {
    "href": "api/NetAF.Assets.Locations.ViewPoint.html",
    "title": "Class ViewPoint | NetAF",
    "summary": "Class ViewPoint Represents a view point from a room. Inheritance object ViewPoint Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Assets.Locations Assembly: NetAF.dll Syntax public sealed class ViewPoint Properties Any Get if there is a view in any direction. Declaration public bool Any { get; } Property Value Type Description bool AnyNotVisited Get if there is a view in any direction. Declaration public bool AnyNotVisited { get; } Property Value Type Description bool AnyVisited Get if there is a view in any direction. Declaration public bool AnyVisited { get; } Property Value Type Description bool this[Direction] Get the room that lies in a specified direction. Declaration public Room this[Direction direction] { get; } Parameters Type Name Description Direction direction The direction to check. Property Value Type Description Room The room. NoView Get a view point representing no view. Declaration public static ViewPoint NoView { get; } Property Value Type Description ViewPoint Methods Create(Region) Create a new ViewPoint. Declaration public static ViewPoint Create(Region region) Parameters Type Name Description Region region The region to create the view point from. Returns Type Description ViewPoint The view point. Create(Region, Room) Create a new ViewPoint. Declaration public static ViewPoint Create(Region region, Room room) Parameters Type Name Description Region region The region to create the view point from. Room room The room within the region to create the view point from. Returns Type Description ViewPoint The view point."
  },
  "api/NetAF.Assets.Locations.html": {
    "href": "api/NetAF.Assets.Locations.html",
    "title": "Namespace NetAF.Assets.Locations | NetAF",
    "summary": "Namespace NetAF.Assets.Locations Classes Exit Represents an exit from a room. Matrix Provides a 3D matrix of rooms. Overworld Represents an entire overworld. Region Represents a region. Room Represents a room. RoomPosition Represents a room position. ViewPoint Represents a view point from a room. Enums Direction Enumeration of directions."
  },
  "api/NetAF.Assets.MultiConditionalDescription.html": {
    "href": "api/NetAF.Assets.MultiConditionalDescription.html",
    "title": "Class MultiConditionalDescription | NetAF",
    "summary": "Class MultiConditionalDescription Represents a multi conditional description of an object. Inheritance object MultiConditionalDescription Implements IDescription Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Assets Assembly: NetAF.dll Syntax public sealed class MultiConditionalDescription : IDescription Constructors MultiConditionalDescription(string, params DescribedCondition[]) Represents a multi conditional description of an object. Declaration public MultiConditionalDescription(string fallbackDescription, params DescribedCondition[] describedConditions) Parameters Type Name Description string fallbackDescription The description of this object when no condition is true. DescribedCondition[] describedConditions The conditional descriptions. Methods GetDescription() Get the description. Declaration public string GetDescription() Returns Type Description string The description. Implements IDescription"
  },
  "api/NetAF.Assets.Point2D.html": {
    "href": "api/NetAF.Assets.Point2D.html",
    "title": "Struct Point2D | NetAF",
    "summary": "Struct Point2D Represents a two-dimensional point. Implements IEquatable<Point2D> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: NetAF.Assets Assembly: NetAF.dll Syntax public readonly struct Point2D : IEquatable<Point2D> Constructors Point2D(int, int) Represents a two-dimensional point. Declaration public Point2D(int x, int y) Parameters Type Name Description int x The x position. int y The y position. Properties X Get the X position. Declaration public int X { get; } Property Value Type Description int Y Get the Y position. Declaration public int Y { get; } Property Value Type Description int Methods Equals(Point2D) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(Point2D other) Parameters Type Name Description Point2D other An object to compare with this object. Returns Type Description bool true if the current object is equal to the other parameter; otherwise, false. Implements IEquatable<T>"
  },
  "api/NetAF.Assets.Point3D.html": {
    "href": "api/NetAF.Assets.Point3D.html",
    "title": "Struct Point3D | NetAF",
    "summary": "Struct Point3D Represents a three-dimensional point. Implements IEquatable<Point3D> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: NetAF.Assets Assembly: NetAF.dll Syntax public readonly struct Point3D : IEquatable<Point3D> Constructors Point3D(int, int, int) Represents a three-dimensional point. Declaration public Point3D(int x, int y, int z) Parameters Type Name Description int x The x position. int y The y position. int z The z position. Properties X Get the X position. Declaration public int X { get; } Property Value Type Description int Y Get the Y position. Declaration public int Y { get; } Property Value Type Description int Z Get the Z position. Declaration public int Z { get; } Property Value Type Description int Methods Equals(Point3D) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(Point3D other) Parameters Type Name Description Point3D other An object to compare with this object. Returns Type Description bool true if the current object is equal to the other parameter; otherwise, false. Implements IEquatable<T>"
  },
  "api/NetAF.Assets.RoomTransition.html": {
    "href": "api/NetAF.Assets.RoomTransition.html",
    "title": "Class RoomTransition | NetAF",
    "summary": "Class RoomTransition Provides information on a transition between rooms. Inheritance object RoomTransition Implements IEquatable<RoomTransition> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Assets Assembly: NetAF.dll Syntax public sealed record RoomTransition : IEquatable<RoomTransition> Constructors RoomTransition(Room, Room, Exit, Exit, Direction?) Provides information on a transition between rooms. Declaration public RoomTransition(Room Room, Room AdjoiningRoom, Exit Exit, Exit AdjoiningExit, Direction? Direction) Parameters Type Name Description Room Room The room. Room AdjoiningRoom The adjoining room. Exit Exit The exit that was used during the transition. Exit AdjoiningExit The adjoining exit being used in the transition. Direction? Direction The direction of the transition. Properties AdjoiningExit The adjoining exit being used in the transition. Declaration public Exit AdjoiningExit { get; init; } Property Value Type Description Exit AdjoiningRoom The adjoining room. Declaration public Room AdjoiningRoom { get; init; } Property Value Type Description Room Direction The direction of the transition. Declaration public Direction? Direction { get; init; } Property Value Type Description Direction? Exit The exit that was used during the transition. Declaration public Exit Exit { get; init; } Property Value Type Description Exit Room The room. Declaration public Room Room { get; init; } Property Value Type Description Room Implements IEquatable<T>"
  },
  "api/NetAF.Assets.RoomTransitionCallback.html": {
    "href": "api/NetAF.Assets.RoomTransitionCallback.html",
    "title": "Delegate RoomTransitionCallback | NetAF",
    "summary": "Delegate RoomTransitionCallback Represents the callback for handling transitioning between rooms. Namespace: NetAF.Assets Assembly: NetAF.dll Syntax public delegate void RoomTransitionCallback(RoomTransition transition) Parameters Type Name Description RoomTransition transition The transition."
  },
  "api/NetAF.Assets.Size.html": {
    "href": "api/NetAF.Assets.Size.html",
    "title": "Struct Size | NetAF",
    "summary": "Struct Size Represents a size. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: NetAF.Assets Assembly: NetAF.dll Syntax public readonly struct Size Constructors Size(int, int) Represents a size. Declaration public Size(int width, int height) Parameters Type Name Description int width The width. int height The height. Properties Height Get the height. Declaration public int Height { get; } Property Value Type Description int Width Get the width. Declaration public int Width { get; } Property Value Type Description int"
  },
  "api/NetAF.Assets.html": {
    "href": "api/NetAF.Assets.html",
    "title": "Namespace NetAF.Assets | NetAF",
    "summary": "Namespace NetAF.Assets Classes ConditionalDescription Represents a conditional description of an object. DescribedCondition A described condition. Description Represents a description of an object. ExaminableObject Represents an object that can be examined. Examination Represents an examination. ExaminationRequest Represents a request to examine an IExaminable. ExaminationScene Represents a scene that an examination occurs in. Identifier Provides a class that can be used as an identifier. Interaction Represents an interaction. Item Represents an item that can be used within the game. MultiConditionalDescription Represents a multi conditional description of an object. RoomTransition Provides information on a transition between rooms. Structs Point2D Represents a two-dimensional point. Point3D Represents a three-dimensional point. Size Represents a size. Interfaces IDescription Provides a description of an object. IExaminable Represents any object that is examinable. IInteractWithItem Represents any object that can interact with an item. IItemContainer Represents any object that is a container of items. IPlayerVisible Represents any object that is visible to a player. Enums InteractionResult Enumeration of interaction results. Delegates Condition Represents a callback for conditions. ExaminationCallback Represents the callback for examinations. InteractionCallback Represents the callback for interacting with objects. RoomTransitionCallback Represents the callback for handling transitioning between rooms."
  },
  "api/NetAF.Commands.CommandCategory.html": {
    "href": "api/NetAF.Commands.CommandCategory.html",
    "title": "Enum CommandCategory | NetAF",
    "summary": "Enum CommandCategory Enumeration of command categories. Namespace: NetAF.Commands Assembly: NetAF.dll Syntax public enum CommandCategory Fields Name Description Conversation Conversation commands. Custom Custom commands. Execution Execution commands. Frame Frame commands. Global Global commands. Information Information commands. Movement Movement commands. Persistence Persistence commands. RegionMap Region map commands. Scene Scene commands. Uncategorized Uncategorized"
  },
  "api/NetAF.Commands.CommandHelp.html": {
    "href": "api/NetAF.Commands.CommandHelp.html",
    "title": "Class CommandHelp | NetAF",
    "summary": "Class CommandHelp Provides help for a command. Inheritance object CommandHelp Implements IEquatable<CommandHelp> IEquatable<string> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Commands Assembly: NetAF.dll Syntax public sealed class CommandHelp : IEquatable<CommandHelp>, IEquatable<string> Constructors CommandHelp(string, string, CommandCategory, string, string, string) Provides help for a command. Declaration public CommandHelp(string command, string description, CommandCategory category = CommandCategory.Uncategorized, string shortcut = \"\", string instructions = \"\", string displayAs = \"\") Parameters Type Name Description string command The command. string description A description of the command. CommandCategory category A category for the command. string shortcut A shortcut for the command. string instructions A instructions on how to use the command. string displayAs A string overriding how the command should be displayed. Properties Category Get the category for this command. Declaration public CommandCategory Category { get; } Property Value Type Description CommandCategory Command Get the command. Declaration public string Command { get; } Property Value Type Description string Description Get the description of the command. Declaration public string Description { get; } Property Value Type Description string DisplayAs Get how this command should be displayed. Declaration public string DisplayAs { get; } Property Value Type Description string DisplayCommand Get a string representing the command as it should be displayed to the user. Declaration public string DisplayCommand { get; } Property Value Type Description string Instructions Get the instructions of the command. Declaration public string Instructions { get; } Property Value Type Description string Shortcut Get the shortcut for the command. Declaration public string Shortcut { get; } Property Value Type Description string Methods Equals(CommandHelp) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(CommandHelp other) Parameters Type Name Description CommandHelp other An object to compare with this object. Returns Type Description bool true if the current object is equal to the other parameter; otherwise, false. Equals(string) Indicates whether the current object is equal to another object of a different type. Declaration public bool Equals(string other) Parameters Type Name Description string other An object to compare with this object. Returns Type Description bool true if the current object is equal to the other parameter; otherwise, false. Implements IEquatable<T> IEquatable<T>"
  },
  "api/NetAF.Commands.Conversation.Next.html": {
    "href": "api/NetAF.Commands.Conversation.Next.html",
    "title": "Class Next | NetAF",
    "summary": "Class Next Represents the Next command. Inheritance object Next Implements ICommand Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Commands.Conversation Assembly: NetAF.dll Syntax public sealed class Next : ICommand Properties CommandHelp Get the command help. Declaration public static CommandHelp CommandHelp { get; } Property Value Type Description CommandHelp Methods GetPrompts(Game) Get all prompts for this command. Declaration public Prompt[] GetPrompts(Game game) Parameters Type Name Description Game game The game to get the prompts for. Returns Type Description Prompt[] And array of prompts. Invoke(Game) Invoke the command. Declaration public Reaction Invoke(Game game) Parameters Type Name Description Game game The game to invoke the command on. Returns Type Description Reaction The reaction. Implements ICommand"
  },
  "api/NetAF.Commands.Conversation.Respond.html": {
    "href": "api/NetAF.Commands.Conversation.Respond.html",
    "title": "Class Respond | NetAF",
    "summary": "Class Respond Represents the Respond command. Inheritance object Respond Implements ICommand Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Commands.Conversation Assembly: NetAF.dll Syntax public sealed class Respond : ICommand Constructors Respond(Response) Represents the Respond command. Declaration public Respond(Response response) Parameters Type Name Description Response response The response. Methods GetPrompts(Game) Get all prompts for this command. Declaration public Prompt[] GetPrompts(Game game) Parameters Type Name Description Game game The game to get the prompts for. Returns Type Description Prompt[] And array of prompts. Invoke(Game) Invoke the command. Declaration public Reaction Invoke(Game game) Parameters Type Name Description Game game The game to invoke the command on. Returns Type Description Reaction The reaction. Implements ICommand"
  },
  "api/NetAF.Commands.Conversation.html": {
    "href": "api/NetAF.Commands.Conversation.html",
    "title": "Namespace NetAF.Commands.Conversation | NetAF",
    "summary": "Namespace NetAF.Commands.Conversation Classes Next Represents the Next command. Respond Represents the Respond command."
  },
  "api/NetAF.Commands.CustomCommand.html": {
    "href": "api/NetAF.Commands.CustomCommand.html",
    "title": "Class CustomCommand | NetAF",
    "summary": "Class CustomCommand Provides a custom command. Inheritance object CustomCommand Load Save Implements ICommand IPlayerVisible ICloneable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Commands Assembly: NetAF.dll Syntax public class CustomCommand : ICommand, IPlayerVisible, ICloneable Constructors CustomCommand(CommandHelp, bool, bool, CustomCommandCallback) Provides a custom command. Declaration public CustomCommand(CommandHelp help, bool isPlayerVisible, bool interpretIfNotPlayerVisible, CustomCommandCallback callback) Parameters Type Name Description CommandHelp help The help for this command. bool isPlayerVisible If this is visible to the player. bool interpretIfNotPlayerVisible If this command can be interpreted when the IsPlayerVisible is false. CustomCommandCallback callback The callback to invoke when this command is invoked. Properties Arguments Get or set the arguments. Declaration public string[] Arguments { get; set; } Property Value Type Description string[] Help Get the help for this command. Declaration public CommandHelp Help { get; } Property Value Type Description CommandHelp InterpretIfNotPlayerVisible Get if this command can be interpreted when the IsPlayerVisible is false. Declaration public bool InterpretIfNotPlayerVisible { get; set; } Property Value Type Description bool IsPlayerVisible Get or set if this is visible to the player. Declaration public bool IsPlayerVisible { get; set; } Property Value Type Description bool Methods AddPrompt(Prompt) Add a prompt. Declaration public void AddPrompt(Prompt prompt) Parameters Type Name Description Prompt prompt The prompt to add. Clone() Creates a new object that is a copy of the current instance. Declaration public object Clone() Returns Type Description object A new object that is a copy of this instance. GetPrompts(Game) Get all prompts for this command. Declaration public virtual Prompt[] GetPrompts(Game game) Parameters Type Name Description Game game The game to get the prompts for. Returns Type Description Prompt[] And array of prompts. Invoke(Game) Invoke the command. Declaration public Reaction Invoke(Game game) Parameters Type Name Description Game game The game to invoke the command on. Returns Type Description Reaction The reaction. RemovePrompt(Prompt) Remove a prompt. Declaration public void RemovePrompt(Prompt prompt) Parameters Type Name Description Prompt prompt The prompt to remove. Implements ICommand IPlayerVisible ICloneable"
  },
  "api/NetAF.Commands.CustomCommandCallback.html": {
    "href": "api/NetAF.Commands.CustomCommandCallback.html",
    "title": "Delegate CustomCommandCallback | NetAF",
    "summary": "Delegate CustomCommandCallback Provides a callback for custom commands. Namespace: NetAF.Commands Assembly: NetAF.dll Syntax public delegate Reaction CustomCommandCallback(Game game, string[] arguments) Parameters Type Name Description Game game The game to invoke the command on. string[] arguments The arguments to invoke the command with. Returns Type Description Reaction The reaction to the command."
  },
  "api/NetAF.Commands.Execution.Exit.html": {
    "href": "api/NetAF.Commands.Execution.Exit.html",
    "title": "Class Exit | NetAF",
    "summary": "Class Exit Represents the Exit command. Inheritance object Exit Implements ICommand Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Commands.Execution Assembly: NetAF.dll Syntax public sealed class Exit : ICommand Properties CommandHelp Get the command help. Declaration public static CommandHelp CommandHelp { get; } Property Value Type Description CommandHelp Methods GetPrompts(Game) Get all prompts for this command. Declaration public Prompt[] GetPrompts(Game game) Parameters Type Name Description Game game The game to get the prompts for. Returns Type Description Prompt[] And array of prompts. Invoke(Game) Invoke the command. Declaration public Reaction Invoke(Game game) Parameters Type Name Description Game game The game to invoke the command on. Returns Type Description Reaction The reaction. Implements ICommand"
  },
  "api/NetAF.Commands.Execution.New.html": {
    "href": "api/NetAF.Commands.Execution.New.html",
    "title": "Class New | NetAF",
    "summary": "Class New Represents the New command. Inheritance object New Implements ICommand Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Commands.Execution Assembly: NetAF.dll Syntax public sealed class New : ICommand Properties CommandHelp Get the command help. Declaration public static CommandHelp CommandHelp { get; } Property Value Type Description CommandHelp Methods GetPrompts(Game) Get all prompts for this command. Declaration public Prompt[] GetPrompts(Game game) Parameters Type Name Description Game game The game to get the prompts for. Returns Type Description Prompt[] And array of prompts. Invoke(Game) Invoke the command. Declaration public Reaction Invoke(Game game) Parameters Type Name Description Game game The game to invoke the command on. Returns Type Description Reaction The reaction. Implements ICommand"
  },
  "api/NetAF.Commands.Execution.html": {
    "href": "api/NetAF.Commands.Execution.html",
    "title": "Namespace NetAF.Commands.Execution | NetAF",
    "summary": "Namespace NetAF.Commands.Execution Classes Exit Represents the Exit command. New Represents the New command."
  },
  "api/NetAF.Commands.Frame.CommandsOff.html": {
    "href": "api/NetAF.Commands.Frame.CommandsOff.html",
    "title": "Class CommandsOff | NetAF",
    "summary": "Class CommandsOff Represents the Commands Off command. Inheritance object CommandsOff Implements ICommand Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Commands.Frame Assembly: NetAF.dll Syntax public sealed class CommandsOff : ICommand Properties CommandHelp Get the command help. Declaration public static CommandHelp CommandHelp { get; } Property Value Type Description CommandHelp Methods GetPrompts(Game) Get all prompts for this command. Declaration public Prompt[] GetPrompts(Game game) Parameters Type Name Description Game game The game to get the prompts for. Returns Type Description Prompt[] And array of prompts. Invoke(Game) Invoke the command. Declaration public Reaction Invoke(Game game) Parameters Type Name Description Game game The game to invoke the command on. Returns Type Description Reaction The reaction. Implements ICommand"
  },
  "api/NetAF.Commands.Frame.CommandsOn.html": {
    "href": "api/NetAF.Commands.Frame.CommandsOn.html",
    "title": "Class CommandsOn | NetAF",
    "summary": "Class CommandsOn Represents the Commands On command. Inheritance object CommandsOn Implements ICommand Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Commands.Frame Assembly: NetAF.dll Syntax public sealed class CommandsOn : ICommand Properties CommandHelp Get the command help. Declaration public static CommandHelp CommandHelp { get; } Property Value Type Description CommandHelp Methods GetPrompts(Game) Get all prompts for this command. Declaration public Prompt[] GetPrompts(Game game) Parameters Type Name Description Game game The game to get the prompts for. Returns Type Description Prompt[] And array of prompts. Invoke(Game) Invoke the command. Declaration public Reaction Invoke(Game game) Parameters Type Name Description Game game The game to invoke the command on. Returns Type Description Reaction The reaction. Implements ICommand"
  },
  "api/NetAF.Commands.Frame.KeyOff.html": {
    "href": "api/NetAF.Commands.Frame.KeyOff.html",
    "title": "Class KeyOff | NetAF",
    "summary": "Class KeyOff Represents the Key Off command. Inheritance object KeyOff Implements ICommand Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Commands.Frame Assembly: NetAF.dll Syntax public sealed class KeyOff : ICommand Properties CommandHelp Get the command help. Declaration public static CommandHelp CommandHelp { get; } Property Value Type Description CommandHelp Methods GetPrompts(Game) Get all prompts for this command. Declaration public Prompt[] GetPrompts(Game game) Parameters Type Name Description Game game The game to get the prompts for. Returns Type Description Prompt[] And array of prompts. Invoke(Game) Invoke the command. Declaration public Reaction Invoke(Game game) Parameters Type Name Description Game game The game to invoke the command on. Returns Type Description Reaction The reaction. Implements ICommand"
  },
  "api/NetAF.Commands.Frame.KeyOn.html": {
    "href": "api/NetAF.Commands.Frame.KeyOn.html",
    "title": "Class KeyOn | NetAF",
    "summary": "Class KeyOn Represents the Key On command. Inheritance object KeyOn Implements ICommand Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Commands.Frame Assembly: NetAF.dll Syntax public sealed class KeyOn : ICommand Properties CommandHelp Get the command help. Declaration public static CommandHelp CommandHelp { get; } Property Value Type Description CommandHelp Methods GetPrompts(Game) Get all prompts for this command. Declaration public Prompt[] GetPrompts(Game game) Parameters Type Name Description Game game The game to get the prompts for. Returns Type Description Prompt[] And array of prompts. Invoke(Game) Invoke the command. Declaration public Reaction Invoke(Game game) Parameters Type Name Description Game game The game to invoke the command on. Returns Type Description Reaction The reaction. Implements ICommand"
  },
  "api/NetAF.Commands.Frame.ZoomIn.html": {
    "href": "api/NetAF.Commands.Frame.ZoomIn.html",
    "title": "Class ZoomIn | NetAF",
    "summary": "Class ZoomIn Represents the Zoom In command. Inheritance object ZoomIn Implements ICommand Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Commands.Frame Assembly: NetAF.dll Syntax public sealed class ZoomIn : ICommand Properties CommandHelp Get the command help. Declaration public static CommandHelp CommandHelp { get; } Property Value Type Description CommandHelp Methods GetPrompts(Game) Get all prompts for this command. Declaration public Prompt[] GetPrompts(Game game) Parameters Type Name Description Game game The game to get the prompts for. Returns Type Description Prompt[] And array of prompts. Invoke(Game) Invoke the command. Declaration public Reaction Invoke(Game game) Parameters Type Name Description Game game The game to invoke the command on. Returns Type Description Reaction The reaction. Implements ICommand"
  },
  "api/NetAF.Commands.Frame.ZoomOut.html": {
    "href": "api/NetAF.Commands.Frame.ZoomOut.html",
    "title": "Class ZoomOut | NetAF",
    "summary": "Class ZoomOut Represents the Zoom Out command. Inheritance object ZoomOut Implements ICommand Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Commands.Frame Assembly: NetAF.dll Syntax public sealed class ZoomOut : ICommand Properties CommandHelp Get the command help. Declaration public static CommandHelp CommandHelp { get; } Property Value Type Description CommandHelp Methods GetPrompts(Game) Get all prompts for this command. Declaration public Prompt[] GetPrompts(Game game) Parameters Type Name Description Game game The game to get the prompts for. Returns Type Description Prompt[] And array of prompts. Invoke(Game) Invoke the command. Declaration public Reaction Invoke(Game game) Parameters Type Name Description Game game The game to invoke the command on. Returns Type Description Reaction The reaction. Implements ICommand"
  },
  "api/NetAF.Commands.Frame.html": {
    "href": "api/NetAF.Commands.Frame.html",
    "title": "Namespace NetAF.Commands.Frame | NetAF",
    "summary": "Namespace NetAF.Commands.Frame Classes CommandsOff Represents the Commands Off command. CommandsOn Represents the Commands On command. KeyOff Represents the Key Off command. KeyOn Represents the Key On command. ZoomIn Represents the Zoom In command. ZoomOut Represents the Zoom Out command."
  },
  "api/NetAF.Commands.Global.CommandList.html": {
    "href": "api/NetAF.Commands.Global.CommandList.html",
    "title": "Class CommandList | NetAF",
    "summary": "Class CommandList Represents the Commands command. Inheritance object CommandList Implements ICommand Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Commands.Global Assembly: NetAF.dll Syntax public sealed class CommandList : ICommand Properties CommandHelp Get the command help. Declaration public static CommandHelp CommandHelp { get; } Property Value Type Description CommandHelp Methods GetPrompts(Game) Get all prompts for this command. Declaration public Prompt[] GetPrompts(Game game) Parameters Type Name Description Game game The game to get the prompts for. Returns Type Description Prompt[] And array of prompts. Invoke(Game) Invoke the command. Declaration public Reaction Invoke(Game game) Parameters Type Name Description Game game The game to invoke the command on. Returns Type Description Reaction The reaction. Implements ICommand"
  },
  "api/NetAF.Commands.Global.End.html": {
    "href": "api/NetAF.Commands.Global.End.html",
    "title": "Class End | NetAF",
    "summary": "Class End Represents the End command. Inheritance object End Implements ICommand Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Commands.Global Assembly: NetAF.dll Syntax public sealed class End : ICommand Properties CommandHelp Get the command help. Declaration public static CommandHelp CommandHelp { get; } Property Value Type Description CommandHelp Methods GetPrompts(Game) Get all prompts for this command. Declaration public Prompt[] GetPrompts(Game game) Parameters Type Name Description Game game The game to get the prompts for. Returns Type Description Prompt[] And array of prompts. Invoke(Game) Invoke the command. Declaration public Reaction Invoke(Game game) Parameters Type Name Description Game game The game to invoke the command on. Returns Type Description Reaction The reaction. Implements ICommand"
  },
  "api/NetAF.Commands.Global.Help.html": {
    "href": "api/NetAF.Commands.Global.Help.html",
    "title": "Class Help | NetAF",
    "summary": "Class Help Represents the Help command. Inheritance object Help Implements ICommand Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Commands.Global Assembly: NetAF.dll Syntax public sealed class Help : ICommand Constructors Help(CommandHelp, Prompt[]) Represents the Help command. Declaration public Help(CommandHelp command, Prompt[] prompts) Parameters Type Name Description CommandHelp command The command to display help for. Prompt[] prompts The prompts to display for the command. Properties CommandHelp Get the command help. Declaration public static CommandHelp CommandHelp { get; } Property Value Type Description CommandHelp Methods GetPrompts(Game) Get all prompts for this command. Declaration public Prompt[] GetPrompts(Game game) Parameters Type Name Description Game game The game to get the prompts for. Returns Type Description Prompt[] And array of prompts. Invoke(Game) Invoke the command. Declaration public Reaction Invoke(Game game) Parameters Type Name Description Game game The game to invoke the command on. Returns Type Description Reaction The reaction. Implements ICommand"
  },
  "api/NetAF.Commands.Global.Map.html": {
    "href": "api/NetAF.Commands.Global.Map.html",
    "title": "Class Map | NetAF",
    "summary": "Class Map Represents the Map command. Inheritance object Map Implements ICommand Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Commands.Global Assembly: NetAF.dll Syntax public sealed class Map : ICommand Properties CommandHelp Get the command help. Declaration public static CommandHelp CommandHelp { get; } Property Value Type Description CommandHelp Methods GetPrompts(Game) Get all prompts for this command. Declaration public Prompt[] GetPrompts(Game game) Parameters Type Name Description Game game The game to get the prompts for. Returns Type Description Prompt[] And array of prompts. Invoke(Game) Invoke the command. Declaration public Reaction Invoke(Game game) Parameters Type Name Description Game game The game to invoke the command on. Returns Type Description Reaction The reaction. Implements ICommand"
  },
  "api/NetAF.Commands.Global.html": {
    "href": "api/NetAF.Commands.Global.html",
    "title": "Namespace NetAF.Commands.Global | NetAF",
    "summary": "Namespace NetAF.Commands.Global Classes CommandList Represents the Commands command. End Represents the End command. Help Represents the Help command. Map Represents the Map command."
  },
  "api/NetAF.Commands.ICommand.html": {
    "href": "api/NetAF.Commands.ICommand.html",
    "title": "Interface ICommand | NetAF",
    "summary": "Interface ICommand Represents a command. Namespace: NetAF.Commands Assembly: NetAF.dll Syntax public interface ICommand Methods GetPrompts(Game) Get all prompts for this command. Declaration Prompt[] GetPrompts(Game game) Parameters Type Name Description Game game The game to get the prompts for. Returns Type Description Prompt[] And array of prompts. Invoke(Game) Invoke the command. Declaration Reaction Invoke(Game game) Parameters Type Name Description Game game The game to invoke the command on. Returns Type Description Reaction The reaction."
  },
  "api/NetAF.Commands.Information.About.html": {
    "href": "api/NetAF.Commands.Information.About.html",
    "title": "Class About | NetAF",
    "summary": "Class About Represents the About command. Inheritance object About Implements ICommand Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Commands.Information Assembly: NetAF.dll Syntax public sealed class About : ICommand Properties CommandHelp Get the command help. Declaration public static CommandHelp CommandHelp { get; } Property Value Type Description CommandHelp Methods GetPrompts(Game) Get all prompts for this command. Declaration public Prompt[] GetPrompts(Game game) Parameters Type Name Description Game game The game to get the prompts for. Returns Type Description Prompt[] And array of prompts. Invoke(Game) Invoke the command. Declaration public Reaction Invoke(Game game) Parameters Type Name Description Game game The game to invoke the command on. Returns Type Description Reaction The reaction. Implements ICommand"
  },
  "api/NetAF.Commands.Information.History.html": {
    "href": "api/NetAF.Commands.Information.History.html",
    "title": "Class History | NetAF",
    "summary": "Class History Represents the History command. Inheritance object History Implements ICommand Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Commands.Information Assembly: NetAF.dll Syntax public sealed class History : ICommand Properties CommandHelp Get the command help. Declaration public static CommandHelp CommandHelp { get; } Property Value Type Description CommandHelp Methods GetPrompts(Game) Get all prompts for this command. Declaration public Prompt[] GetPrompts(Game game) Parameters Type Name Description Game game The game to get the prompts for. Returns Type Description Prompt[] And array of prompts. Invoke(Game) Invoke the command. Declaration public Reaction Invoke(Game game) Parameters Type Name Description Game game The game to invoke the command on. Returns Type Description Reaction The reaction. Implements ICommand"
  },
  "api/NetAF.Commands.Information.Notes.html": {
    "href": "api/NetAF.Commands.Information.Notes.html",
    "title": "Class Notes | NetAF",
    "summary": "Class Notes Represents the Notes command. Inheritance object Notes Implements ICommand Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Commands.Information Assembly: NetAF.dll Syntax public sealed class Notes : ICommand Properties CommandHelp Get the command help. Declaration public static CommandHelp CommandHelp { get; } Property Value Type Description CommandHelp Methods GetPrompts(Game) Get all prompts for this command. Declaration public Prompt[] GetPrompts(Game game) Parameters Type Name Description Game game The game to get the prompts for. Returns Type Description Prompt[] And array of prompts. Invoke(Game) Invoke the command. Declaration public Reaction Invoke(Game game) Parameters Type Name Description Game game The game to invoke the command on. Returns Type Description Reaction The reaction. Implements ICommand"
  },
  "api/NetAF.Commands.Information.html": {
    "href": "api/NetAF.Commands.Information.html",
    "title": "Namespace NetAF.Commands.Information | NetAF",
    "summary": "Namespace NetAF.Commands.Information Classes About Represents the About command. History Represents the History command. Notes Represents the Notes command."
  },
  "api/NetAF.Commands.Persistence.Load.html": {
    "href": "api/NetAF.Commands.Persistence.Load.html",
    "title": "Class Load | NetAF",
    "summary": "Class Load Represents the Load command. Inheritance object CustomCommand Load Implements ICommand IPlayerVisible ICloneable Inherited Members CustomCommand.Arguments CustomCommand.Help CustomCommand.InterpretIfNotPlayerVisible CustomCommand.AddPrompt(Prompt) CustomCommand.RemovePrompt(Prompt) CustomCommand.Invoke(Game) CustomCommand.GetPrompts(Game) CustomCommand.IsPlayerVisible CustomCommand.Clone() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Commands.Persistence Assembly: NetAF.dll Syntax public sealed class Load : CustomCommand, ICommand, IPlayerVisible, ICloneable Constructors Load() Initializes a new instance of the Load class. Declaration public Load() Implements ICommand IPlayerVisible ICloneable"
  },
  "api/NetAF.Commands.Persistence.Save.html": {
    "href": "api/NetAF.Commands.Persistence.Save.html",
    "title": "Class Save | NetAF",
    "summary": "Class Save Represents the Save command. Inheritance object CustomCommand Save Implements ICommand IPlayerVisible ICloneable Inherited Members CustomCommand.Arguments CustomCommand.Help CustomCommand.InterpretIfNotPlayerVisible CustomCommand.AddPrompt(Prompt) CustomCommand.RemovePrompt(Prompt) CustomCommand.Invoke(Game) CustomCommand.GetPrompts(Game) CustomCommand.IsPlayerVisible CustomCommand.Clone() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Commands.Persistence Assembly: NetAF.dll Syntax public sealed class Save : CustomCommand, ICommand, IPlayerVisible, ICloneable Constructors Save() Initializes a new instance of the Save class. Declaration public Save() Implements ICommand IPlayerVisible ICloneable"
  },
  "api/NetAF.Commands.Persistence.html": {
    "href": "api/NetAF.Commands.Persistence.html",
    "title": "Namespace NetAF.Commands.Persistence | NetAF",
    "summary": "Namespace NetAF.Commands.Persistence Classes Load Represents the Load command. Save Represents the Save command."
  },
  "api/NetAF.Commands.Prompt.html": {
    "href": "api/NetAF.Commands.Prompt.html",
    "title": "Class Prompt | NetAF",
    "summary": "Class Prompt Represents a prompt. Inheritance object Prompt Implements IEquatable<Prompt> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Commands Assembly: NetAF.dll Syntax public record Prompt : IEquatable<Prompt> Constructors Prompt(string) Represents a prompt. Declaration public Prompt(string Entry) Parameters Type Name Description string Entry The entry. Properties Entry The entry. Declaration public string Entry { get; init; } Property Value Type Description string Implements IEquatable<T>"
  },
  "api/NetAF.Commands.Reaction.html": {
    "href": "api/NetAF.Commands.Reaction.html",
    "title": "Class Reaction | NetAF",
    "summary": "Class Reaction Represents a reaction. Inheritance object Reaction Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Commands Assembly: NetAF.dll Syntax public sealed class Reaction Constructors Reaction(ReactionResult, string) Initializes a new instance of the Reaction class. Declaration public Reaction(ReactionResult result, string description) Parameters Type Name Description ReactionResult result The result. string description A description of the result. Reaction(ReactionResult, string, string) Represents a reaction. Declaration public Reaction(ReactionResult result, string title, string description) Parameters Type Name Description ReactionResult result The result. string title A title for the reaction. string description A description of the result. Properties Description Get a description of the result. Declaration public string Description { get; } Property Value Type Description string Result Get the result. Declaration public ReactionResult Result { get; } Property Value Type Description ReactionResult Title Get the title for the reaction. Declaration public string Title { get; } Property Value Type Description string"
  },
  "api/NetAF.Commands.ReactionResult.html": {
    "href": "api/NetAF.Commands.ReactionResult.html",
    "title": "Enum ReactionResult | NetAF",
    "summary": "Enum ReactionResult Enumeration of reaction results. Namespace: NetAF.Commands Assembly: NetAF.dll Syntax public enum ReactionResult Fields Name Description Error An error occurred. GameModeChanged The game mode was changed. Inform The user should be informed. Silent The user should not be informed."
  },
  "api/NetAF.Commands.RegionMap.Pan.html": {
    "href": "api/NetAF.Commands.RegionMap.Pan.html",
    "title": "Class Pan | NetAF",
    "summary": "Class Pan Represents the Pan command. Inheritance object Pan Implements ICommand Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Commands.RegionMap Assembly: NetAF.dll Syntax public sealed class Pan : ICommand Constructors Pan(Direction) Represents the Pan command. Declaration public Pan(Direction direction) Parameters Type Name Description Direction direction The direction to pan. Properties DownCommandHelp Get the command help for down. Declaration public static CommandHelp DownCommandHelp { get; } Property Value Type Description CommandHelp EastCommandHelp Get the command help for east. Declaration public static CommandHelp EastCommandHelp { get; } Property Value Type Description CommandHelp NorthCommandHelp Get the command help for north. Declaration public static CommandHelp NorthCommandHelp { get; } Property Value Type Description CommandHelp SouthCommandHelp Get the command help for south. Declaration public static CommandHelp SouthCommandHelp { get; } Property Value Type Description CommandHelp UpCommandHelp Get the command help for up. Declaration public static CommandHelp UpCommandHelp { get; } Property Value Type Description CommandHelp WestCommandHelp Get the command help for west. Declaration public static CommandHelp WestCommandHelp { get; } Property Value Type Description CommandHelp Methods GetPanPosition(Point3D, Direction) Get the pan position. Declaration public static Point3D GetPanPosition(Point3D current, Direction direction) Parameters Type Name Description Point3D current The current pan position. Direction direction The direction to pan. Returns Type Description Point3D The modified pan position. GetPrompts(Game) Get all prompts for this command. Declaration public Prompt[] GetPrompts(Game game) Parameters Type Name Description Game game The game to get the prompts for. Returns Type Description Prompt[] And array of prompts. Invoke(Game) Invoke the command. Declaration public Reaction Invoke(Game game) Parameters Type Name Description Game game The game to invoke the command on. Returns Type Description Reaction The reaction. Implements ICommand"
  },
  "api/NetAF.Commands.RegionMap.PanReset.html": {
    "href": "api/NetAF.Commands.RegionMap.PanReset.html",
    "title": "Class PanReset | NetAF",
    "summary": "Class PanReset Represents the PanReset command. Inheritance object PanReset Implements ICommand Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Commands.RegionMap Assembly: NetAF.dll Syntax public sealed class PanReset : ICommand Properties CommandHelp Get the command help. Declaration public static CommandHelp CommandHelp { get; } Property Value Type Description CommandHelp Methods GetPrompts(Game) Get all prompts for this command. Declaration public Prompt[] GetPrompts(Game game) Parameters Type Name Description Game game The game to get the prompts for. Returns Type Description Prompt[] And array of prompts. Invoke(Game) Invoke the command. Declaration public Reaction Invoke(Game game) Parameters Type Name Description Game game The game to invoke the command on. Returns Type Description Reaction The reaction. Implements ICommand"
  },
  "api/NetAF.Commands.RegionMap.html": {
    "href": "api/NetAF.Commands.RegionMap.html",
    "title": "Namespace NetAF.Commands.RegionMap | NetAF",
    "summary": "Namespace NetAF.Commands.RegionMap Classes Pan Represents the Pan command. PanReset Represents the PanReset command."
  },
  "api/NetAF.Commands.Scene.Drop.html": {
    "href": "api/NetAF.Commands.Scene.Drop.html",
    "title": "Class Drop | NetAF",
    "summary": "Class Drop Represents the Drop command. Inheritance object Drop Implements ICommand Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Commands.Scene Assembly: NetAF.dll Syntax public sealed class Drop : ICommand Constructors Drop(Item) Represents the Drop command. Declaration public Drop(Item item) Parameters Type Name Description Item item The item to take. Properties CommandHelp Get the command help. Declaration public static CommandHelp CommandHelp { get; } Property Value Type Description CommandHelp Methods GetPrompts(Game) Get all prompts for this command. Declaration public Prompt[] GetPrompts(Game game) Parameters Type Name Description Game game The game to get the prompts for. Returns Type Description Prompt[] And array of prompts. Invoke(Game) Invoke the command. Declaration public Reaction Invoke(Game game) Parameters Type Name Description Game game The game to invoke the command on. Returns Type Description Reaction The reaction. Implements ICommand"
  },
  "api/NetAF.Commands.Scene.DropAll.html": {
    "href": "api/NetAF.Commands.Scene.DropAll.html",
    "title": "Class DropAll | NetAF",
    "summary": "Class DropAll Represents the Drop All command. Inheritance object DropAll Implements ICommand Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Commands.Scene Assembly: NetAF.dll Syntax public sealed class DropAll : ICommand Properties CommandHelp Get the command help. Declaration public static CommandHelp CommandHelp { get; } Property Value Type Description CommandHelp Methods GetPrompts(Game) Get all prompts for this command. Declaration public Prompt[] GetPrompts(Game game) Parameters Type Name Description Game game The game to get the prompts for. Returns Type Description Prompt[] And array of prompts. Invoke(Game) Invoke the command. Declaration public Reaction Invoke(Game game) Parameters Type Name Description Game game The game to invoke the command on. Returns Type Description Reaction The reaction. Implements ICommand"
  },
  "api/NetAF.Commands.Scene.Examine.html": {
    "href": "api/NetAF.Commands.Scene.Examine.html",
    "title": "Class Examine | NetAF",
    "summary": "Class Examine Represents the Examine command. Inheritance object Examine Implements ICommand Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Commands.Scene Assembly: NetAF.dll Syntax public sealed class Examine : ICommand Constructors Examine(IExaminable) Represents the Examine command. Declaration public Examine(IExaminable examinable) Parameters Type Name Description IExaminable examinable The examinable. Properties CommandHelp Get the command help. Declaration public static CommandHelp CommandHelp { get; } Property Value Type Description CommandHelp Methods GetPrompts(Game) Get all prompts for this command. Declaration public Prompt[] GetPrompts(Game game) Parameters Type Name Description Game game The game to get the prompts for. Returns Type Description Prompt[] And array of prompts. Invoke(Game) Invoke the command. Declaration public Reaction Invoke(Game game) Parameters Type Name Description Game game The game to invoke the command on. Returns Type Description Reaction The reaction. Implements ICommand"
  },
  "api/NetAF.Commands.Scene.Move.html": {
    "href": "api/NetAF.Commands.Scene.Move.html",
    "title": "Class Move | NetAF",
    "summary": "Class Move Represents the Move command. Inheritance object Move Implements ICommand Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Commands.Scene Assembly: NetAF.dll Syntax public sealed class Move : ICommand Constructors Move(Direction) Represents the Move command. Declaration public Move(Direction direction) Parameters Type Name Description Direction direction The direction to move. Properties DownCommandHelp Get the command help for down. Declaration public static CommandHelp DownCommandHelp { get; } Property Value Type Description CommandHelp EastCommandHelp Get the command help for east. Declaration public static CommandHelp EastCommandHelp { get; } Property Value Type Description CommandHelp NorthCommandHelp Get the command help for north. Declaration public static CommandHelp NorthCommandHelp { get; } Property Value Type Description CommandHelp SouthCommandHelp Get the command help for south. Declaration public static CommandHelp SouthCommandHelp { get; } Property Value Type Description CommandHelp UpCommandHelp Get the command help for up. Declaration public static CommandHelp UpCommandHelp { get; } Property Value Type Description CommandHelp WestCommandHelp Get the command help for west. Declaration public static CommandHelp WestCommandHelp { get; } Property Value Type Description CommandHelp Methods GetPrompts(Game) Get all prompts for this command. Declaration public Prompt[] GetPrompts(Game game) Parameters Type Name Description Game game The game to get the prompts for. Returns Type Description Prompt[] And array of prompts. Invoke(Game) Invoke the command. Declaration public Reaction Invoke(Game game) Parameters Type Name Description Game game The game to invoke the command on. Returns Type Description Reaction The reaction. Implements ICommand"
  },
  "api/NetAF.Commands.Scene.Take.html": {
    "href": "api/NetAF.Commands.Scene.Take.html",
    "title": "Class Take | NetAF",
    "summary": "Class Take Represents the Take command. Inheritance object Take Implements ICommand Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Commands.Scene Assembly: NetAF.dll Syntax public sealed class Take : ICommand Constructors Take(Item) Represents the Take command. Declaration public Take(Item item) Parameters Type Name Description Item item The item to take. Properties CommandHelp Get the command help. Declaration public static CommandHelp CommandHelp { get; } Property Value Type Description CommandHelp Methods GetPrompts(Game) Get all prompts for this command. Declaration public Prompt[] GetPrompts(Game game) Parameters Type Name Description Game game The game to get the prompts for. Returns Type Description Prompt[] And array of prompts. Invoke(Game) Invoke the command. Declaration public Reaction Invoke(Game game) Parameters Type Name Description Game game The game to invoke the command on. Returns Type Description Reaction The reaction. Implements ICommand"
  },
  "api/NetAF.Commands.Scene.TakeAll.html": {
    "href": "api/NetAF.Commands.Scene.TakeAll.html",
    "title": "Class TakeAll | NetAF",
    "summary": "Class TakeAll Represents the Take All command. Inheritance object TakeAll Implements ICommand Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Commands.Scene Assembly: NetAF.dll Syntax public sealed class TakeAll : ICommand Properties CommandHelp Get the command help. Declaration public static CommandHelp CommandHelp { get; } Property Value Type Description CommandHelp Methods GetPrompts(Game) Get all prompts for this command. Declaration public Prompt[] GetPrompts(Game game) Parameters Type Name Description Game game The game to get the prompts for. Returns Type Description Prompt[] And array of prompts. Invoke(Game) Invoke the command. Declaration public Reaction Invoke(Game game) Parameters Type Name Description Game game The game to invoke the command on. Returns Type Description Reaction The reaction. Implements ICommand"
  },
  "api/NetAF.Commands.Scene.Talk.html": {
    "href": "api/NetAF.Commands.Scene.Talk.html",
    "title": "Class Talk | NetAF",
    "summary": "Class Talk Represents the Talk command. Inheritance object Talk Implements ICommand Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Commands.Scene Assembly: NetAF.dll Syntax public sealed class Talk : ICommand Constructors Talk(IConverser) Represents the Talk command. Declaration public Talk(IConverser converser) Parameters Type Name Description IConverser converser The converser. Properties TalkCommandHelp Get the command help. Declaration public static CommandHelp TalkCommandHelp { get; } Property Value Type Description CommandHelp ToCommandHelp Get the command help for to. Declaration public static CommandHelp ToCommandHelp { get; } Property Value Type Description CommandHelp Methods GetPrompts(Game) Get all prompts for this command. Declaration public Prompt[] GetPrompts(Game game) Parameters Type Name Description Game game The game to get the prompts for. Returns Type Description Prompt[] And array of prompts. Invoke(Game) Invoke the command. Declaration public Reaction Invoke(Game game) Parameters Type Name Description Game game The game to invoke the command on. Returns Type Description Reaction The reaction. Implements ICommand"
  },
  "api/NetAF.Commands.Scene.Unactionable.html": {
    "href": "api/NetAF.Commands.Scene.Unactionable.html",
    "title": "Class Unactionable | NetAF",
    "summary": "Class Unactionable Represents the Unactionable command. Inheritance object Unactionable Implements ICommand Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Commands.Scene Assembly: NetAF.dll Syntax public sealed class Unactionable : ICommand Constructors Unactionable() Initializes a new instance of the Unactionable class. Declaration public Unactionable() Unactionable(string) Initializes a new instance of the Unactionable class. Declaration public Unactionable(string description) Parameters Type Name Description string description The description. Properties Description Get the description. Declaration public string Description { get; } Property Value Type Description string Methods GetPrompts(Game) Get all prompts for this command. Declaration public Prompt[] GetPrompts(Game game) Parameters Type Name Description Game game The game to get the prompts for. Returns Type Description Prompt[] And array of prompts. Invoke(Game) Invoke the command. Declaration public Reaction Invoke(Game game) Parameters Type Name Description Game game The game to invoke the command on. Returns Type Description Reaction The reaction. Implements ICommand"
  },
  "api/NetAF.Commands.Scene.UseOn.html": {
    "href": "api/NetAF.Commands.Scene.UseOn.html",
    "title": "Class UseOn | NetAF",
    "summary": "Class UseOn Represents the UseOn command. Inheritance object UseOn Implements ICommand Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Commands.Scene Assembly: NetAF.dll Syntax public sealed class UseOn : ICommand Constructors UseOn(Item, IInteractWithItem) Represents the UseOn command. Declaration public UseOn(Item item, IInteractWithItem target) Parameters Type Name Description Item item The item to use. IInteractWithItem target The target of the command. Properties OnCommandHelp Get the command help for on. Declaration public static CommandHelp OnCommandHelp { get; } Property Value Type Description CommandHelp UseCommandHelp Get the command help. Declaration public static CommandHelp UseCommandHelp { get; } Property Value Type Description CommandHelp Methods GetPrompts(Game) Get all prompts for this command. Declaration public Prompt[] GetPrompts(Game game) Parameters Type Name Description Game game The game to get the prompts for. Returns Type Description Prompt[] And array of prompts. Invoke(Game) Invoke the command. Declaration public Reaction Invoke(Game game) Parameters Type Name Description Game game The game to invoke the command on. Returns Type Description Reaction The reaction. Implements ICommand"
  },
  "api/NetAF.Commands.Scene.html": {
    "href": "api/NetAF.Commands.Scene.html",
    "title": "Namespace NetAF.Commands.Scene | NetAF",
    "summary": "Namespace NetAF.Commands.Scene Classes Drop Represents the Drop command. DropAll Represents the Drop All command. Examine Represents the Examine command. Move Represents the Move command. Take Represents the Take command. TakeAll Represents the Take All command. Talk Represents the Talk command. Unactionable Represents the Unactionable command. UseOn Represents the UseOn command."
  },
  "api/NetAF.Commands.html": {
    "href": "api/NetAF.Commands.html",
    "title": "Namespace NetAF.Commands | NetAF",
    "summary": "Namespace NetAF.Commands Classes CommandHelp Provides help for a command. CustomCommand Provides a custom command. Prompt Represents a prompt. Reaction Represents a reaction. Interfaces ICommand Represents a command. Enums CommandCategory Enumeration of command categories. ReactionResult Enumeration of reaction results. Delegates CustomCommandCallback Provides a callback for custom commands."
  },
  "api/NetAF.Conversations.Conversation.html": {
    "href": "api/NetAF.Conversations.Conversation.html",
    "title": "Class Conversation | NetAF",
    "summary": "Class Conversation Represents a conversation. Inheritance object Conversation Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Conversations Assembly: NetAF.dll Syntax public sealed class Conversation Constructors Conversation(params Paragraph[]) Represents a conversation. Declaration public Conversation(params Paragraph[] paragraphs) Parameters Type Name Description Paragraph[] paragraphs The paragraphs. Properties CurrentParagraph Get the current paragraph in the conversation. Declaration public Paragraph CurrentParagraph { get; } Property Value Type Description Paragraph Log Get the log. Declaration public LogItem[] Log { get; } Property Value Type Description LogItem[] Paragraphs Get the current paragraph in the conversation. Declaration public Paragraph[] Paragraphs { get; } Property Value Type Description Paragraph[] Methods Next(Game) Trigger the next line in this conversation. Declaration public Reaction Next(Game game) Parameters Type Name Description Game game The game. Returns Type Description Reaction The reaction to the line. Respond(Response, Game) Respond to the conversation. Declaration public Reaction Respond(Response response, Game game) Parameters Type Name Description Response response The response. Game game The game. Returns Type Description Reaction The reaction to the response."
  },
  "api/NetAF.Conversations.ConversationActionCallback.html": {
    "href": "api/NetAF.Conversations.ConversationActionCallback.html",
    "title": "Delegate ConversationActionCallback | NetAF",
    "summary": "Delegate ConversationActionCallback Provides a callback that can be used in conversations invoking actions. Namespace: NetAF.Conversations Assembly: NetAF.dll Syntax public delegate void ConversationActionCallback(Game game) Parameters Type Name Description Game game The game to invoke the callback on."
  },
  "api/NetAF.Conversations.Instructions.ByCallback.html": {
    "href": "api/NetAF.Conversations.Instructions.ByCallback.html",
    "title": "Class ByCallback | NetAF",
    "summary": "Class ByCallback An end of paragraph instruction that shifts paragraphs based on a callback. Inheritance object ByCallback Implements IEndOfPargraphInstruction Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Conversations.Instructions Assembly: NetAF.dll Syntax public sealed class ByCallback : IEndOfPargraphInstruction Constructors ByCallback(Func<IEndOfPargraphInstruction>) An end of paragraph instruction that shifts paragraphs based on a callback. Declaration public ByCallback(Func<IEndOfPargraphInstruction> callback) Parameters Type Name Description Func<IEndOfPargraphInstruction> callback The callback that decides the instruction to use. Properties Callback Get the callback that decides the instruction to use. Declaration public Func<IEndOfPargraphInstruction> Callback { get; } Property Value Type Description Func<IEndOfPargraphInstruction> Methods GetIndexOfNext(Paragraph, Paragraph[]) Get the index of the next paragraph. Declaration public int GetIndexOfNext(Paragraph current, Paragraph[] paragraphs) Parameters Type Name Description Paragraph current The current paragraph. Paragraph[] paragraphs The collection of paragraphs. Returns Type Description int The index of the next paragraph. Implements IEndOfPargraphInstruction"
  },
  "api/NetAF.Conversations.Instructions.First.html": {
    "href": "api/NetAF.Conversations.Instructions.First.html",
    "title": "Class First | NetAF",
    "summary": "Class First An end of paragraph instruction that shifts paragraphs to the start. Inheritance object First Implements IEndOfPargraphInstruction Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Conversations.Instructions Assembly: NetAF.dll Syntax public sealed class First : IEndOfPargraphInstruction Methods GetIndexOfNext(Paragraph, Paragraph[]) Get the index of the next paragraph. Declaration public int GetIndexOfNext(Paragraph current, Paragraph[] paragraphs) Parameters Type Name Description Paragraph current The current paragraph. Paragraph[] paragraphs The collection of paragraphs. Returns Type Description int The index of the next paragraph. Implements IEndOfPargraphInstruction"
  },
  "api/NetAF.Conversations.Instructions.GoTo.html": {
    "href": "api/NetAF.Conversations.Instructions.GoTo.html",
    "title": "Class GoTo | NetAF",
    "summary": "Class GoTo An end of paragraph instruction that shifts paragraphs based on an absolute index. Inheritance object GoTo Implements IEndOfPargraphInstruction Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Conversations.Instructions Assembly: NetAF.dll Syntax public sealed class GoTo : IEndOfPargraphInstruction Constructors GoTo(int) An end of paragraph instruction that shifts paragraphs based on an absolute index. Declaration public GoTo(int index) Parameters Type Name Description int index The index of the next paragraph. Properties Index Get the index. Declaration public int Index { get; } Property Value Type Description int Methods GetIndexOfNext(Paragraph, Paragraph[]) Get the index of the next paragraph. Declaration public int GetIndexOfNext(Paragraph current, Paragraph[] paragraphs) Parameters Type Name Description Paragraph current The current paragraph. Paragraph[] paragraphs The collection of paragraphs. Returns Type Description int The index of the next paragraph. Implements IEndOfPargraphInstruction"
  },
  "api/NetAF.Conversations.Instructions.IEndOfPargraphInstruction.html": {
    "href": "api/NetAF.Conversations.Instructions.IEndOfPargraphInstruction.html",
    "title": "Interface IEndOfPargraphInstruction | NetAF",
    "summary": "Interface IEndOfPargraphInstruction Represents an instructon to be carried out at the end of a paragraph. Namespace: NetAF.Conversations.Instructions Assembly: NetAF.dll Syntax public interface IEndOfPargraphInstruction Methods GetIndexOfNext(Paragraph, Paragraph[]) Get the index of the next paragraph. Declaration int GetIndexOfNext(Paragraph current, Paragraph[] paragraphs) Parameters Type Name Description Paragraph current The current paragraph. Paragraph[] paragraphs The collection of paragraphs. Returns Type Description int The index of the next paragraph."
  },
  "api/NetAF.Conversations.Instructions.Jump.html": {
    "href": "api/NetAF.Conversations.Instructions.Jump.html",
    "title": "Class Jump | NetAF",
    "summary": "Class Jump An end of paragraph instruction that shifts paragraphs based on a delta. Inheritance object Jump Implements IEndOfPargraphInstruction Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Conversations.Instructions Assembly: NetAF.dll Syntax public sealed class Jump : IEndOfPargraphInstruction Constructors Jump(int) An end of paragraph instruction that shifts paragraphs based on a delta. Declaration public Jump(int delta) Parameters Type Name Description int delta The delta to shift paragraphs by. Properties Delta Get the delta. Declaration public int Delta { get; } Property Value Type Description int Methods GetIndexOfNext(Paragraph, Paragraph[]) Get the index of the next paragraph. Declaration public int GetIndexOfNext(Paragraph current, Paragraph[] paragraphs) Parameters Type Name Description Paragraph current The current paragraph. Paragraph[] paragraphs The collection of paragraphs. Returns Type Description int The index of the next paragraph. Implements IEndOfPargraphInstruction"
  },
  "api/NetAF.Conversations.Instructions.Last.html": {
    "href": "api/NetAF.Conversations.Instructions.Last.html",
    "title": "Class Last | NetAF",
    "summary": "Class Last An end of paragraph instruction that shifts paragraphs to the end. Inheritance object Last Implements IEndOfPargraphInstruction Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Conversations.Instructions Assembly: NetAF.dll Syntax public sealed class Last : IEndOfPargraphInstruction Methods GetIndexOfNext(Paragraph, Paragraph[]) Get the index of the next paragraph. Declaration public int GetIndexOfNext(Paragraph current, Paragraph[] paragraphs) Parameters Type Name Description Paragraph current The current paragraph. Paragraph[] paragraphs The collection of paragraphs. Returns Type Description int The index of the next paragraph. Implements IEndOfPargraphInstruction"
  },
  "api/NetAF.Conversations.Instructions.Next.html": {
    "href": "api/NetAF.Conversations.Instructions.Next.html",
    "title": "Class Next | NetAF",
    "summary": "Class Next An end of paragraph instruction that shifts paragraphs to the next paragraph. Inheritance object Next Implements IEndOfPargraphInstruction Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Conversations.Instructions Assembly: NetAF.dll Syntax public sealed class Next : IEndOfPargraphInstruction Methods GetIndexOfNext(Paragraph, Paragraph[]) Get the index of the next paragraph. Declaration public int GetIndexOfNext(Paragraph current, Paragraph[] paragraphs) Parameters Type Name Description Paragraph current The current paragraph. Paragraph[] paragraphs The collection of paragraphs. Returns Type Description int The index of the next paragraph. Implements IEndOfPargraphInstruction"
  },
  "api/NetAF.Conversations.Instructions.Previous.html": {
    "href": "api/NetAF.Conversations.Instructions.Previous.html",
    "title": "Class Previous | NetAF",
    "summary": "Class Previous An end of paragraph instruction that shifts paragraphs to the previous paragraph. Inheritance object Previous Implements IEndOfPargraphInstruction Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Conversations.Instructions Assembly: NetAF.dll Syntax public sealed class Previous : IEndOfPargraphInstruction Methods GetIndexOfNext(Paragraph, Paragraph[]) Get the index of the next paragraph. Declaration public int GetIndexOfNext(Paragraph current, Paragraph[] paragraphs) Parameters Type Name Description Paragraph current The current paragraph. Paragraph[] paragraphs The collection of paragraphs. Returns Type Description int The index of the next paragraph. Implements IEndOfPargraphInstruction"
  },
  "api/NetAF.Conversations.Instructions.Repeat.html": {
    "href": "api/NetAF.Conversations.Instructions.Repeat.html",
    "title": "Class Repeat | NetAF",
    "summary": "Class Repeat An end of paragraph instruction that repeats. Inheritance object Repeat Implements IEndOfPargraphInstruction Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Conversations.Instructions Assembly: NetAF.dll Syntax public sealed class Repeat : IEndOfPargraphInstruction Methods GetIndexOfNext(Paragraph, Paragraph[]) Get the index of the next paragraph. Declaration public int GetIndexOfNext(Paragraph current, Paragraph[] paragraphs) Parameters Type Name Description Paragraph current The current paragraph. Paragraph[] paragraphs The collection of paragraphs. Returns Type Description int The index of the next paragraph. Implements IEndOfPargraphInstruction"
  },
  "api/NetAF.Conversations.Instructions.ToName.html": {
    "href": "api/NetAF.Conversations.Instructions.ToName.html",
    "title": "Class ToName | NetAF",
    "summary": "Class ToName An end of paragraph instruction that shifts paragraphs based on a name. Inheritance object ToName Implements IEndOfPargraphInstruction Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Conversations.Instructions Assembly: NetAF.dll Syntax public sealed class ToName : IEndOfPargraphInstruction Constructors ToName(string) An end of paragraph instruction that shifts paragraphs based on a name. Declaration public ToName(string name) Parameters Type Name Description string name The name of the paragraph to jump to. Properties Name Get the name of the paragraph to jump to. Declaration public string Name { get; } Property Value Type Description string Methods GetIndexOfNext(Paragraph, Paragraph[]) Get the index of the next paragraph. Declaration public int GetIndexOfNext(Paragraph current, Paragraph[] paragraphs) Parameters Type Name Description Paragraph current The current paragraph. Paragraph[] paragraphs The collection of paragraphs. Returns Type Description int The index of the next paragraph. Implements IEndOfPargraphInstruction"
  },
  "api/NetAF.Conversations.Instructions.html": {
    "href": "api/NetAF.Conversations.Instructions.html",
    "title": "Namespace NetAF.Conversations.Instructions | NetAF",
    "summary": "Namespace NetAF.Conversations.Instructions Classes ByCallback An end of paragraph instruction that shifts paragraphs based on a callback. First An end of paragraph instruction that shifts paragraphs to the start. GoTo An end of paragraph instruction that shifts paragraphs based on an absolute index. Jump An end of paragraph instruction that shifts paragraphs based on a delta. Last An end of paragraph instruction that shifts paragraphs to the end. Next An end of paragraph instruction that shifts paragraphs to the next paragraph. Previous An end of paragraph instruction that shifts paragraphs to the previous paragraph. Repeat An end of paragraph instruction that repeats. ToName An end of paragraph instruction that shifts paragraphs based on a name. Interfaces IEndOfPargraphInstruction Represents an instructon to be carried out at the end of a paragraph."
  },
  "api/NetAF.Conversations.LogItem.html": {
    "href": "api/NetAF.Conversations.LogItem.html",
    "title": "Class LogItem | NetAF",
    "summary": "Class LogItem Provides a container for log items. Inheritance object LogItem Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Conversations Assembly: NetAF.dll Syntax public sealed class LogItem Constructors LogItem(Participant, string) Provides a container for log items. Declaration public LogItem(Participant participant, string line) Parameters Type Name Description Participant participant The participant. string line The line. Properties Line Get the line. Declaration public string Line { get; } Property Value Type Description string Participant Get the participant. Declaration public Participant Participant { get; } Property Value Type Description Participant"
  },
  "api/NetAF.Conversations.Paragraph.html": {
    "href": "api/NetAF.Conversations.Paragraph.html",
    "title": "Class Paragraph | NetAF",
    "summary": "Class Paragraph Represents a paragraph in a Conversation. Inheritance object Paragraph Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Conversations Assembly: NetAF.dll Syntax public sealed class Paragraph Constructors Paragraph(string, ConversationActionCallback, IEndOfPargraphInstruction, string) Represents a paragraph in a Conversation. Declaration public Paragraph(string line, ConversationActionCallback action, IEndOfPargraphInstruction instruction, string name = \"\") Parameters Type Name Description string line Specify the line. ConversationActionCallback action Specify any action to be carried out with this line. IEndOfPargraphInstruction instruction Specify the end of paragraph instruction. This can be applied to a conversation to direct the conversation after this paragraph. string name Specify the name of the paragraph. Paragraph(string, ConversationActionCallback, string) Initializes a new instance of the Paragraph class. Declaration public Paragraph(string line, ConversationActionCallback action, string name = \"\") Parameters Type Name Description string line Specify the line. ConversationActionCallback action Specify any action to be carried out with this line. string name Specify the name of the paragraph. Paragraph(string, IEndOfPargraphInstruction, string) Initializes a new instance of the Paragraph class. Declaration public Paragraph(string line, IEndOfPargraphInstruction instruction, string name = \"\") Parameters Type Name Description string line Specify the line. IEndOfPargraphInstruction instruction Specify the end of paragraph instruction. This can be applied to a conversation to direct the conversation after this paragraph. string name Specify the name of the paragraph. Paragraph(string, string) Initializes a new instance of the Paragraph class. Declaration public Paragraph(string line, string name = \"\") Parameters Type Name Description string line Specify the line. string name Specify the name of the paragraph. Properties Action Get or set any action to carry out on this line. Declaration public ConversationActionCallback Action { get; set; } Property Value Type Description ConversationActionCallback CanRespond Get if a response is possible. Declaration public bool CanRespond { get; } Property Value Type Description bool Instruction Get the end of paragraph instruction. This can be applied to a conversation to direct the conversation after this paragraph. Declaration public IEndOfPargraphInstruction Instruction { get; } Property Value Type Description IEndOfPargraphInstruction Line Get or set the line. Declaration public string Line { get; set; } Property Value Type Description string Name Get the name. Declaration public string Name { get; } Property Value Type Description string Responses Get or set the responses, applicable to the last line. Declaration public Response[] Responses { get; set; } Property Value Type Description Response[]"
  },
  "api/NetAF.Conversations.Participant.html": {
    "href": "api/NetAF.Conversations.Participant.html",
    "title": "Enum Participant | NetAF",
    "summary": "Enum Participant Enumeration of participants in a conversation. Namespace: NetAF.Conversations Assembly: NetAF.dll Syntax public enum Participant Fields Name Description Other Any other participant. Player The player."
  },
  "api/NetAF.Conversations.Response.html": {
    "href": "api/NetAF.Conversations.Response.html",
    "title": "Class Response | NetAF",
    "summary": "Class Response Provides a response to a conversation. Inheritance object Response Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Conversations Assembly: NetAF.dll Syntax public sealed class Response Constructors Response(string) Initializes a new instance of the Response class. Declaration public Response(string line) Parameters Type Name Description string line The line to trigger this response. Response(string, IEndOfPargraphInstruction) Provides a response to a conversation. Declaration public Response(string line, IEndOfPargraphInstruction instruction) Parameters Type Name Description string line The line to trigger this response. IEndOfPargraphInstruction instruction Specify the end of paragraph instruction. This can be applied to a conversation to direct the conversation after this paragraph. Properties Instruction Get the end of paragraph instruction. This can be applied to a conversation to direct the conversation after this paragraph. Declaration public IEndOfPargraphInstruction Instruction { get; } Property Value Type Description IEndOfPargraphInstruction Line Get the line. Declaration public string Line { get; } Property Value Type Description string"
  },
  "api/NetAF.Conversations.html": {
    "href": "api/NetAF.Conversations.html",
    "title": "Namespace NetAF.Conversations | NetAF",
    "summary": "Namespace NetAF.Conversations Classes Conversation Represents a conversation. LogItem Provides a container for log items. Paragraph Represents a paragraph in a Conversation. Response Provides a response to a conversation. Enums Participant Enumeration of participants in a conversation. Delegates ConversationActionCallback Provides a callback that can be used in conversations invoking actions."
  },
  "api/NetAF.Extensions.DirectionExtensions.html": {
    "href": "api/NetAF.Extensions.DirectionExtensions.html",
    "title": "Class DirectionExtensions | NetAF",
    "summary": "Class DirectionExtensions Provides extension versions for Directions. Inheritance object DirectionExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Extensions Assembly: NetAF.dll Syntax public static class DirectionExtensions Methods Inverse(Direction) Get an inverse direction. Declaration public static Direction Inverse(this Direction value) Parameters Type Name Description Direction value The direction. Returns Type Description Direction The inverse direction."
  },
  "api/NetAF.Extensions.StringBuilderExtensions.html": {
    "href": "api/NetAF.Extensions.StringBuilderExtensions.html",
    "title": "Class StringBuilderExtensions | NetAF",
    "summary": "Class StringBuilderExtensions Provides extension methods for StringBuilder. Inheritance object StringBuilderExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Extensions Assembly: NetAF.dll Syntax public static class StringBuilderExtensions Methods EnsureFinishedSentence(StringBuilder) Ensure this string is a finished sentence, ending in either ?, ! or . Declaration public static void EnsureFinishedSentence(this StringBuilder value) Parameters Type Name Description StringBuilder value The string to finish."
  },
  "api/NetAF.Extensions.StringExtensions.html": {
    "href": "api/NetAF.Extensions.StringExtensions.html",
    "title": "Class StringExtensions | NetAF",
    "summary": "Class StringExtensions Provides extension methods for strings. Inheritance object StringExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Extensions Assembly: NetAF.dll Syntax public static class StringExtensions Methods AddSentence(string, string) Add a sentence to this string. Declaration public static string AddSentence(this string value, string other) Parameters Type Name Description string value The value. string other The other value. Returns Type Description string The concatenated string. CaseInsensitiveContains(string, string) Returns a value indicating whether a specified substring occurs within this string. This is not case sensitive. Declaration public static bool CaseInsensitiveContains(this string value, string subString) Parameters Type Name Description string value The value. string subString The string to seek. Returns Type Description bool True if the value parameter occurs within this string, or if value is the empty string (\"\"); otherwise, false. EnsureFinishedSentence(string) Ensure this string is a finished sentence, ending in either ?, ! or . Declaration public static string EnsureFinishedSentence(this string value) Parameters Type Name Description string value The string to finish. Returns Type Description string The finished string. EqualsExaminable(string, IExaminable) Determine if this string equals an IExaminable. Declaration public static bool EqualsExaminable(this string value, IExaminable examinable) Parameters Type Name Description string value The value. IExaminable examinable The examinable. Returns Type Description bool True if this string equals the identifier, else false. EqualsIdentifier(string, Identifier) Determine if this string equals an identifier. Declaration public static bool EqualsIdentifier(this string value, Identifier identifier) Parameters Type Name Description string value The value. Identifier identifier The identifier. Returns Type Description bool True if this string equals the identifier, else false. GetObjectifier(string) Get an objectifier for a word. Declaration public static string GetObjectifier(this string word) Parameters Type Name Description string word The word. Returns Type Description string The objectifier. InsensitiveEquals(string, string) Compare this string to another, with no case sensitivity. Declaration public static bool InsensitiveEquals(this string value, string other) Parameters Type Name Description string value The value. string other The other value. Returns Type Description bool The number of lines in the string. IsPlural(string) Get if a word is plural. Declaration public static bool IsPlural(this string word) Parameters Type Name Description string word The word to check. Returns Type Description bool True if the word is plural. IsVowel(string) Get if a character is a vowel. Declaration public static bool IsVowel(this string value) Parameters Type Name Description string value The value to check. Returns Type Description bool True if the character is a vowel. LineCount(string) Determine the number of lines in this string. Declaration public static int LineCount(this string value) Parameters Type Name Description string value The value. Returns Type Description int The number of lines in the string. RemoveSentenceEnd(string) Ensure this string is not a finished sentence, ending in either ?, ! or . Declaration public static string RemoveSentenceEnd(this string value) Parameters Type Name Description string value The string to ensure isn't finished finish. Returns Type Description string The unfinished string. StartWithLower(string) Ensure this string starts with a lower case character. Declaration public static string StartWithLower(this string value) Parameters Type Name Description string value The value. Returns Type Description string The modified string. ToDescription(string) Returns this string as a Description. Declaration public static Description ToDescription(this string value) Parameters Type Name Description string value The value. Returns Type Description Description This string as a description. ToIdentifier(string) Returns this string as an Identifier. Declaration public static Identifier ToIdentifier(this string value) Parameters Type Name Description string value The value. Returns Type Description Identifier This string as an identifier. ToSentenceCase(string) Convert a string to sentence case. Declaration public static string ToSentenceCase(this string value) Parameters Type Name Description string value The value. Returns Type Description string The word in sentence case. ToSpeech(string) Convert a string to speech. Declaration public static string ToSpeech(this string value) Parameters Type Name Description string value The value. Returns Type Description string The value in sentence case. ToTexture(string) Create a texture from this string. Declaration public static Texture ToTexture(this string value) Parameters Type Name Description string value The value. Returns Type Description Texture The texture."
  },
  "api/NetAF.Extensions.html": {
    "href": "api/NetAF.Extensions.html",
    "title": "Namespace NetAF.Extensions | NetAF",
    "summary": "Namespace NetAF.Extensions Classes DirectionExtensions Provides extension versions for Directions. StringBuilderExtensions Provides extension methods for StringBuilder. StringExtensions Provides extension methods for strings."
  },
  "api/NetAF.Interpretation.ConversationCommandInterpreter.html": {
    "href": "api/NetAF.Interpretation.ConversationCommandInterpreter.html",
    "title": "Class ConversationCommandInterpreter | NetAF",
    "summary": "Class ConversationCommandInterpreter Provides an object that can be used for interpreting conversation commands. Inheritance object ConversationCommandInterpreter Implements IInterpreter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Interpretation Assembly: NetAF.dll Syntax public sealed class ConversationCommandInterpreter : IInterpreter Properties DefaultSupportedCommands Get an array of all supported commands. Declaration public static CommandHelp[] DefaultSupportedCommands { get; } Property Value Type Description CommandHelp[] SupportedCommands Get an array of all supported commands. Declaration public CommandHelp[] SupportedCommands { get; } Property Value Type Description CommandHelp[] Methods GetContextualCommandHelp(Game) Get contextual command help for a game, based on its current state. Declaration public CommandHelp[] GetContextualCommandHelp(Game game) Parameters Type Name Description Game game The game. Returns Type Description CommandHelp[] The contextual help. Interpret(string, Game) Interpret a string. Declaration public InterpretationResult Interpret(string input, Game game) Parameters Type Name Description string input The string to interpret. Game game The game. Returns Type Description InterpretationResult The result of the interpretation. Implements IInterpreter"
  },
  "api/NetAF.Interpretation.CustomCommandInterpreter.html": {
    "href": "api/NetAF.Interpretation.CustomCommandInterpreter.html",
    "title": "Class CustomCommandInterpreter | NetAF",
    "summary": "Class CustomCommandInterpreter Provides an object that can be used for interpreting custom commands. Inheritance object CustomCommandInterpreter Implements IInterpreter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Interpretation Assembly: NetAF.dll Syntax public sealed class CustomCommandInterpreter : IInterpreter Properties SupportedCommands Get an array of all supported commands. Declaration public CommandHelp[] SupportedCommands { get; } Property Value Type Description CommandHelp[] Methods GetContextualCommandHelp(Game) Get contextual command help for a game, based on its current state. Declaration public CommandHelp[] GetContextualCommandHelp(Game game) Parameters Type Name Description Game game The game. Returns Type Description CommandHelp[] The contextual help. Interpret(string, Game) Interpret a string. Declaration public InterpretationResult Interpret(string input, Game game) Parameters Type Name Description string input The string to interpret. Game game The game. Returns Type Description InterpretationResult The result of the interpretation. Implements IInterpreter"
  },
  "api/NetAF.Interpretation.ExecutionCommandInterpreter.html": {
    "href": "api/NetAF.Interpretation.ExecutionCommandInterpreter.html",
    "title": "Class ExecutionCommandInterpreter | NetAF",
    "summary": "Class ExecutionCommandInterpreter Provides an object that can be used for interpreting execution commands. Inheritance object ExecutionCommandInterpreter Implements IInterpreter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Interpretation Assembly: NetAF.dll Syntax public sealed class ExecutionCommandInterpreter : IInterpreter Properties DefaultSupportedCommands Get an array of all supported commands. Declaration public static CommandHelp[] DefaultSupportedCommands { get; } Property Value Type Description CommandHelp[] SupportedCommands Get an array of all supported commands. Declaration public CommandHelp[] SupportedCommands { get; } Property Value Type Description CommandHelp[] Methods GetContextualCommandHelp(Game) Get contextual command help for a game, based on its current state. Declaration public CommandHelp[] GetContextualCommandHelp(Game game) Parameters Type Name Description Game game The game. Returns Type Description CommandHelp[] The contextual help. Interpret(string, Game) Interpret a string. Declaration public InterpretationResult Interpret(string input, Game game) Parameters Type Name Description string input The string to interpret. Game game The game. Returns Type Description InterpretationResult The result of the interpretation. Implements IInterpreter"
  },
  "api/NetAF.Interpretation.FrameCommandInterpreter.html": {
    "href": "api/NetAF.Interpretation.FrameCommandInterpreter.html",
    "title": "Class FrameCommandInterpreter | NetAF",
    "summary": "Class FrameCommandInterpreter Provides an object that can be used for interpreting frame commands. Inheritance object FrameCommandInterpreter Implements IInterpreter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Interpretation Assembly: NetAF.dll Syntax public sealed class FrameCommandInterpreter : IInterpreter Properties DefaultSupportedCommands Get an array of all supported commands. Declaration public static CommandHelp[] DefaultSupportedCommands { get; } Property Value Type Description CommandHelp[] SupportedCommands Get an array of all supported commands. Declaration public CommandHelp[] SupportedCommands { get; } Property Value Type Description CommandHelp[] Methods GetContextualCommandHelp(Game) Get contextual command help for a game, based on its current state. Declaration public CommandHelp[] GetContextualCommandHelp(Game game) Parameters Type Name Description Game game The game. Returns Type Description CommandHelp[] The contextual help. Interpret(string, Game) Interpret a string. Declaration public InterpretationResult Interpret(string input, Game game) Parameters Type Name Description string input The string to interpret. Game game The game. Returns Type Description InterpretationResult The result of the interpretation. Implements IInterpreter"
  },
  "api/NetAF.Interpretation.GlobalCommandInterpreter.html": {
    "href": "api/NetAF.Interpretation.GlobalCommandInterpreter.html",
    "title": "Class GlobalCommandInterpreter | NetAF",
    "summary": "Class GlobalCommandInterpreter Provides an object that can be used for interpreting global commands. Inheritance object GlobalCommandInterpreter Implements IInterpreter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Interpretation Assembly: NetAF.dll Syntax public sealed class GlobalCommandInterpreter : IInterpreter Properties DefaultSupportedCommands Get an array of all supported commands. Declaration public static CommandHelp[] DefaultSupportedCommands { get; } Property Value Type Description CommandHelp[] SupportedCommands Get an array of all supported commands. Declaration public CommandHelp[] SupportedCommands { get; } Property Value Type Description CommandHelp[] Methods GetContextualCommandHelp(Game) Get contextual command help for a game, based on its current state. Declaration public CommandHelp[] GetContextualCommandHelp(Game game) Parameters Type Name Description Game game The game. Returns Type Description CommandHelp[] The contextual help. Interpret(string, Game) Interpret a string. Declaration public InterpretationResult Interpret(string input, Game game) Parameters Type Name Description string input The string to interpret. Game game The game. Returns Type Description InterpretationResult The result of the interpretation. Implements IInterpreter"
  },
  "api/NetAF.Interpretation.IInterpreter.html": {
    "href": "api/NetAF.Interpretation.IInterpreter.html",
    "title": "Interface IInterpreter | NetAF",
    "summary": "Interface IInterpreter Represents any object that can act as an interpreter for input. Namespace: NetAF.Interpretation Assembly: NetAF.dll Syntax public interface IInterpreter Properties SupportedCommands Get an array of all supported commands. Declaration CommandHelp[] SupportedCommands { get; } Property Value Type Description CommandHelp[] Methods GetContextualCommandHelp(Game) Get contextual command help for a game, based on its current state. Declaration CommandHelp[] GetContextualCommandHelp(Game game) Parameters Type Name Description Game game The game. Returns Type Description CommandHelp[] The contextual help. Interpret(string, Game) Interpret a string. Declaration InterpretationResult Interpret(string input, Game game) Parameters Type Name Description string input The string to interpret. Game game The game. Returns Type Description InterpretationResult The result of the interpretation."
  },
  "api/NetAF.Interpretation.InputInterpreter.html": {
    "href": "api/NetAF.Interpretation.InputInterpreter.html",
    "title": "Class InputInterpreter | NetAF",
    "summary": "Class InputInterpreter Provides an object that can be used for interpreting game input. Inheritance object InputInterpreter Implements IInterpreter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Interpretation Assembly: NetAF.dll Syntax public sealed class InputInterpreter : IInterpreter Constructors InputInterpreter(params IInterpreter[]) Provides an object that can be used for interpreting game input. Declaration public InputInterpreter(params IInterpreter[] interpreters) Parameters Type Name Description IInterpreter[] interpreters The interpreters. Properties SupportedCommands Get an array of all supported commands. Declaration public CommandHelp[] SupportedCommands { get; } Property Value Type Description CommandHelp[] Methods GetContextualCommandHelp(Game) Get contextual command help for a game, based on its current state. Declaration public CommandHelp[] GetContextualCommandHelp(Game game) Parameters Type Name Description Game game The game. Returns Type Description CommandHelp[] The contextual help. Interpret(string, Game) Interpret a string. Declaration public InterpretationResult Interpret(string input, Game game) Parameters Type Name Description string input The string to interpret. Game game The game. Returns Type Description InterpretationResult The result of the interpretation. Implements IInterpreter"
  },
  "api/NetAF.Interpretation.InterpretationResult.html": {
    "href": "api/NetAF.Interpretation.InterpretationResult.html",
    "title": "Class InterpretationResult | NetAF",
    "summary": "Class InterpretationResult Represents the result of an interpretation. Inheritance object InterpretationResult Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Interpretation Assembly: NetAF.dll Syntax public class InterpretationResult Constructors InterpretationResult(bool, ICommand) Represents the result of an interpretation. Declaration public InterpretationResult(bool wasInterpretedSuccessfully, ICommand command) Parameters Type Name Description bool wasInterpretedSuccessfully If interpretation was successful. ICommand command The command. Properties Command Get the command. Declaration public ICommand Command { get; } Property Value Type Description ICommand Fail Get a default result for failure. Declaration public static InterpretationResult Fail { get; } Property Value Type Description InterpretationResult WasInterpretedSuccessfully Get if interpretation was successful. Declaration public bool WasInterpretedSuccessfully { get; } Property Value Type Description bool"
  },
  "api/NetAF.Interpretation.Interpreters.html": {
    "href": "api/NetAF.Interpretation.Interpreters.html",
    "title": "Class Interpreters | NetAF",
    "summary": "Class Interpreters Provides collections of interpreters. Inheritance object Interpreters Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Interpretation Assembly: NetAF.dll Syntax public static class Interpreters Properties ConversationInterpreter Get the conversation command interpreter. Declaration public static IInterpreter ConversationInterpreter { get; } Property Value Type Description IInterpreter CustomCommandInterpreter Get the custom command interpreter. Declaration public static IInterpreter CustomCommandInterpreter { get; } Property Value Type Description IInterpreter Default Get the default interpreters. Declaration public static IInterpreter Default { get; } Property Value Type Description IInterpreter ExecutionCommandInterpreter Get the execution command interpreter. Declaration public static IInterpreter ExecutionCommandInterpreter { get; } Property Value Type Description IInterpreter FrameCommandInterpreter Get the frame command interpreter. Declaration public static IInterpreter FrameCommandInterpreter { get; } Property Value Type Description IInterpreter GlobalCommandInterpreter Get the frame command interpreter. Declaration public static IInterpreter GlobalCommandInterpreter { get; } Property Value Type Description IInterpreter RegionMapCommandInterpreter Get the region map command interpreter. Declaration public static IInterpreter RegionMapCommandInterpreter { get; } Property Value Type Description IInterpreter SceneInterpreter Get the scene command interpreter. Declaration public static IInterpreter SceneInterpreter { get; } Property Value Type Description IInterpreter"
  },
  "api/NetAF.Interpretation.RegionMapCommandInterpreter.html": {
    "href": "api/NetAF.Interpretation.RegionMapCommandInterpreter.html",
    "title": "Class RegionMapCommandInterpreter | NetAF",
    "summary": "Class RegionMapCommandInterpreter Provides an object that can be used for interpreting region map commands. Inheritance object RegionMapCommandInterpreter Implements IInterpreter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Interpretation Assembly: NetAF.dll Syntax public sealed class RegionMapCommandInterpreter : IInterpreter Properties DefaultSupportedCommands Get an array of all supported commands. Declaration public static CommandHelp[] DefaultSupportedCommands { get; } Property Value Type Description CommandHelp[] SupportedCommands Get an array of all supported commands. Declaration public CommandHelp[] SupportedCommands { get; } Property Value Type Description CommandHelp[] Methods GetContextualCommandHelp(Game) Get contextual command help for a game, based on its current state. Declaration public CommandHelp[] GetContextualCommandHelp(Game game) Parameters Type Name Description Game game The game. Returns Type Description CommandHelp[] The contextual help. Interpret(string, Game) Interpret a string. Declaration public InterpretationResult Interpret(string input, Game game) Parameters Type Name Description string input The string to interpret. Game game The game. Returns Type Description InterpretationResult The result of the interpretation. Implements IInterpreter"
  },
  "api/NetAF.Interpretation.SceneCommandInterpreter.html": {
    "href": "api/NetAF.Interpretation.SceneCommandInterpreter.html",
    "title": "Class SceneCommandInterpreter | NetAF",
    "summary": "Class SceneCommandInterpreter Provides an object that can be used for interpreting scene commands. Inheritance object SceneCommandInterpreter Implements IInterpreter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Interpretation Assembly: NetAF.dll Syntax public sealed class SceneCommandInterpreter : IInterpreter Properties DefaultSupportedCommands Get an array of all supported commands. Declaration public static CommandHelp[] DefaultSupportedCommands { get; } Property Value Type Description CommandHelp[] SupportedCommands Get an array of all supported commands. Declaration public CommandHelp[] SupportedCommands { get; } Property Value Type Description CommandHelp[] Methods GetContextualCommandHelp(Game) Get contextual command help for a game, based on its current state. Declaration public CommandHelp[] GetContextualCommandHelp(Game game) Parameters Type Name Description Game game The game. Returns Type Description CommandHelp[] The contextual help. Interpret(string, Game) Interpret a string. Declaration public InterpretationResult Interpret(string input, Game game) Parameters Type Name Description string input The string to interpret. Game game The game. Returns Type Description InterpretationResult The result of the interpretation. Implements IInterpreter"
  },
  "api/NetAF.Interpretation.html": {
    "href": "api/NetAF.Interpretation.html",
    "title": "Namespace NetAF.Interpretation | NetAF",
    "summary": "Namespace NetAF.Interpretation Classes ConversationCommandInterpreter Provides an object that can be used for interpreting conversation commands. CustomCommandInterpreter Provides an object that can be used for interpreting custom commands. ExecutionCommandInterpreter Provides an object that can be used for interpreting execution commands. FrameCommandInterpreter Provides an object that can be used for interpreting frame commands. GlobalCommandInterpreter Provides an object that can be used for interpreting global commands. InputInterpreter Provides an object that can be used for interpreting game input. InterpretationResult Represents the result of an interpretation. Interpreters Provides collections of interpreters. RegionMapCommandInterpreter Provides an object that can be used for interpreting region map commands. SceneCommandInterpreter Provides an object that can be used for interpreting scene commands. Interfaces IInterpreter Represents any object that can act as an interpreter for input."
  },
  "api/NetAF.Logging.History.HistoryEntry.html": {
    "href": "api/NetAF.Logging.History.HistoryEntry.html",
    "title": "Class HistoryEntry | NetAF",
    "summary": "Class HistoryEntry Provides an entry to the history log. Inheritance object HistoryEntry Implements IEquatable<HistoryEntry> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Logging.History Assembly: NetAF.dll Syntax public record HistoryEntry : IEquatable<HistoryEntry> Constructors HistoryEntry(string, string) Provides an entry to the history log. Declaration public HistoryEntry(string Name, string Content) Parameters Type Name Description string Name The name of the entry. string Content The content of the entry. Properties Content The content of the entry. Declaration public string Content { get; init; } Property Value Type Description string CreationTime Get the time this element was created Declaration public DateTime CreationTime { get; } Property Value Type Description DateTime Name The name of the entry. Declaration public string Name { get; init; } Property Value Type Description string Implements IEquatable<T>"
  },
  "api/NetAF.Logging.History.HistoryManager.html": {
    "href": "api/NetAF.Logging.History.HistoryManager.html",
    "title": "Class HistoryManager | NetAF",
    "summary": "Class HistoryManager Provides a manager for in-game history. Inheritance object HistoryManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Logging.History Assembly: NetAF.dll Syntax public class HistoryManager Fields NoLimit Get a value representing no limit. Declaration public const int NoLimit = -1 Field Value Type Description int Properties Count Get the number of entries. Declaration public int Count { get; } Property Value Type Description int MaxEntries Get or set the maximum number of entries to be displayed. For unlimited use HistoryManager.NoLimit. Declaration public int MaxEntries { get; set; } Property Value Type Description int Methods Add(HistoryEntry) Add a new entry. Declaration public void Add(HistoryEntry entry) Parameters Type Name Description HistoryEntry entry The entry to add. Add(string, string) Add a new entry. Declaration public void Add(string name, string content) Parameters Type Name Description string name The name of the entry to add. string content The content of the entry to add. Clear() Clear all entries. Declaration public void Clear() GetAll() Get all entries. Declaration public HistoryEntry[] GetAll() Returns Type Description HistoryEntry[] An array of all entries."
  },
  "api/NetAF.Logging.History.html": {
    "href": "api/NetAF.Logging.History.html",
    "title": "Namespace NetAF.Logging.History | NetAF",
    "summary": "Namespace NetAF.Logging.History Classes HistoryEntry Provides an entry to the history log. HistoryManager Provides a manager for in-game history."
  },
  "api/NetAF.Logging.Notes.NoteEntry.html": {
    "href": "api/NetAF.Logging.Notes.NoteEntry.html",
    "title": "Class NoteEntry | NetAF",
    "summary": "Class NoteEntry Provides a note log entry. Inheritance object NoteEntry Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Logging.Notes Assembly: NetAF.dll Syntax public class NoteEntry Constructors NoteEntry(string, string) Provides a note log entry. Declaration public NoteEntry(string name, string content) Parameters Type Name Description string name The name of the entry. string content The content of the entry. Properties Content Get the content of this entry. Declaration public string Content { get; } Property Value Type Description string HasExpired Get if this entry has expired. Declaration public bool HasExpired { get; } Property Value Type Description bool Name Get the name of this entry. Declaration public string Name { get; } Property Value Type Description string Methods Expire() Mark this entry as expired. Declaration public void Expire() FromSerialization(NoteEntrySerialization) Create a new instance of NoteEntry from a serialization. Declaration public static NoteEntry FromSerialization(NoteEntrySerialization serialization) Parameters Type Name Description NoteEntrySerialization serialization The serialization. Returns Type Description NoteEntry The log entry."
  },
  "api/NetAF.Logging.Notes.NoteManager.html": {
    "href": "api/NetAF.Logging.Notes.NoteManager.html",
    "title": "Class NoteManager | NetAF",
    "summary": "Class NoteManager Provides a manager for in-game notes. Inheritance object NoteManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Logging.Notes Assembly: NetAF.dll Syntax public class NoteManager Properties Count Get the number of entries. Declaration public int Count { get; } Property Value Type Description int Methods Add(NoteEntry) Add a new entry. Declaration public void Add(NoteEntry entry) Parameters Type Name Description NoteEntry entry The entry to add. Add(string, string) Add a new entry. Declaration public void Add(string name, string content) Parameters Type Name Description string name The name of the entry to add. string content The content of the entry to add. Clear() Clear all entries. Declaration public void Clear() ContainsEntry(string) Get is an entry is present. Declaration public bool ContainsEntry(string name) Parameters Type Name Description string name The name of the entry to check. Returns Type Description bool True if an entry with the same name is present. Expire(string) Expire an entry. Declaration public void Expire(string name) Parameters Type Name Description string name The name of the entry to expire. FromSerialization(NoteManagerSerialization) Create a new instance of NoteManager from a serialization. Declaration public static NoteManager FromSerialization(NoteManagerSerialization serialization) Parameters Type Name Description NoteManagerSerialization serialization The serialization. Returns Type Description NoteManager The note manager. GetAll() Get all entries. Declaration public NoteEntry[] GetAll() Returns Type Description NoteEntry[] An array of all entries. HasExpired(string) Get is an entry has expired. Declaration public bool HasExpired(string name) Parameters Type Name Description string name The name of the entry to check. Returns Type Description bool True if an entry with the same name is present and has expired, else false. Remove(string) Remove an entry. Declaration public void Remove(string name) Parameters Type Name Description string name The name of the entry to remove."
  },
  "api/NetAF.Logging.Notes.html": {
    "href": "api/NetAF.Logging.Notes.html",
    "title": "Namespace NetAF.Logging.Notes | NetAF",
    "summary": "Namespace NetAF.Logging.Notes Classes NoteEntry Provides a note log entry. NoteManager Provides a manager for in-game notes."
  },
  "api/NetAF.Logic.AssetCatalog.html": {
    "href": "api/NetAF.Logic.AssetCatalog.html",
    "title": "Class AssetCatalog | NetAF",
    "summary": "Class AssetCatalog Provides a catalog of all assets in a game. Inheritance object AssetCatalog Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Logic Assembly: NetAF.dll Syntax public class AssetCatalog Properties Characters Get the characters. Declaration public NonPlayableCharacter[] Characters { get; } Property Value Type Description NonPlayableCharacter[] Examinables Get the examinables. Declaration public IExaminable[] Examinables { get; } Property Value Type Description IExaminable[] ItemContainers Get the item containers. Declaration public IItemContainer[] ItemContainers { get; } Property Value Type Description IItemContainer[] Items Get the items. Declaration public Item[] Items { get; } Property Value Type Description Item[] Players Get the players. Declaration public PlayableCharacter[] Players { get; } Property Value Type Description PlayableCharacter[] Rooms Get the rooms. Declaration public Room[] Rooms { get; } Property Value Type Description Room[] Methods FromGame(Game) Create a new AssetCatalog from a game. Declaration public static AssetCatalog FromGame(Game game) Parameters Type Name Description Game game The game to create the catalog from. Returns Type Description AssetCatalog The populate asset catalog. Register(params IExaminable[]) Registers a collection of examinables. Declaration public void Register(params IExaminable[] examinables) Parameters Type Name Description IExaminable[] examinables The examinables to register. Register(params IAssetTemplate<IExaminable>[]) Registers a collection of examinables. Declaration public void Register(params IAssetTemplate<IExaminable>[] templates) Parameters Type Name Description IAssetTemplate<IExaminable>[] templates The templates to register."
  },
  "api/NetAF.Logic.AssetGenerator.html": {
    "href": "api/NetAF.Logic.AssetGenerator.html",
    "title": "Class AssetGenerator | NetAF",
    "summary": "Class AssetGenerator Represents a generator for game assets. Inheritance object AssetGenerator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Logic Assembly: NetAF.dll Syntax public sealed class AssetGenerator Methods Custom(OverworldCreationCallback, PlayerCreationCallback) Create an asset generator that creates custom values. Callbacks determine the overworld and player that will be returned on each call to GetOverworld and GetPlayer. Declaration public static AssetGenerator Custom(OverworldCreationCallback overworldCreationCallback, PlayerCreationCallback playerCreationCallback) Parameters Type Name Description OverworldCreationCallback overworldCreationCallback The overworld creation callback. PlayerCreationCallback playerCreationCallback The player creation callback. Returns Type Description AssetGenerator Asset generation that will always return an overworld and a player as defined by the callbacks. GetOverworld() Get the overworld. Declaration public Overworld GetOverworld() Returns Type Description Overworld The overworld. GetPlayer() Get the player. Declaration public PlayableCharacter GetPlayer() Returns Type Description PlayableCharacter The player. New(IAssetTemplate<Overworld>, IAssetTemplate<PlayableCharacter>) Create an asset generator that creates new values. Different instances of overworld and player will be returned on each call to GetOverworld and GetPlayer. Declaration public static AssetGenerator New(IAssetTemplate<Overworld> overworldTemplate, IAssetTemplate<PlayableCharacter> playerTemplate) Parameters Type Name Description IAssetTemplate<Overworld> overworldTemplate The overworld template. IAssetTemplate<PlayableCharacter> playerTemplate The player template. Returns Type Description AssetGenerator Asset generation that will always return a new overworld and a new player. New(OverworldMaker, IAssetTemplate<PlayableCharacter>) Create an asset generator that creates new values. Different instances of overworld and player will be returned on each call to GetOverworld and GetPlayer. Declaration public static AssetGenerator New(OverworldMaker overworldMaker, IAssetTemplate<PlayableCharacter> playerTemplate) Parameters Type Name Description OverworldMaker overworldMaker The overworld maker. IAssetTemplate<PlayableCharacter> playerTemplate The player template. Returns Type Description AssetGenerator Asset generation that will always return a new overworld and a new player. Retained(Overworld, PlayableCharacter) Create an asset generator that uses retained value. The same instance of overworld and player will be returned on each call to GetOverworld and GetPlayer. Declaration public static AssetGenerator Retained(Overworld overworld, PlayableCharacter player) Parameters Type Name Description Overworld overworld The overworld. PlayableCharacter player The player. Returns Type Description AssetGenerator Asset generation that will always return the same instance overworld and the same instance of the player."
  },
  "api/NetAF.Logic.Callbacks.GameSetupCallback.html": {
    "href": "api/NetAF.Logic.Callbacks.GameSetupCallback.html",
    "title": "Delegate GameSetupCallback | NetAF",
    "summary": "Delegate GameSetupCallback Represents the callback used for Game setup. Namespace: NetAF.Logic.Callbacks Assembly: NetAF.dll Syntax public delegate void GameSetupCallback(Game game) Parameters Type Name Description Game game The game to setup."
  },
  "api/NetAF.Logic.Callbacks.OverworldCreationCallback.html": {
    "href": "api/NetAF.Logic.Callbacks.OverworldCreationCallback.html",
    "title": "Delegate OverworldCreationCallback | NetAF",
    "summary": "Delegate OverworldCreationCallback Represents a callback for Overworld creation. Namespace: NetAF.Logic.Callbacks Assembly: NetAF.dll Syntax public delegate Overworld OverworldCreationCallback() Returns Type Description Overworld A generated Overworld."
  },
  "api/NetAF.Logic.Callbacks.PlayerCreationCallback.html": {
    "href": "api/NetAF.Logic.Callbacks.PlayerCreationCallback.html",
    "title": "Delegate PlayerCreationCallback | NetAF",
    "summary": "Delegate PlayerCreationCallback Represents a callback for Player creation. Namespace: NetAF.Logic.Callbacks Assembly: NetAF.dll Syntax public delegate PlayableCharacter PlayerCreationCallback() Returns Type Description PlayableCharacter A generated Player."
  },
  "api/NetAF.Logic.Callbacks.html": {
    "href": "api/NetAF.Logic.Callbacks.html",
    "title": "Namespace NetAF.Logic.Callbacks | NetAF",
    "summary": "Namespace NetAF.Logic.Callbacks Delegates GameSetupCallback Represents the callback used for Game setup. OverworldCreationCallback Represents a callback for Overworld creation. PlayerCreationCallback Represents a callback for Player creation."
  },
  "api/NetAF.Logic.EndCheck.html": {
    "href": "api/NetAF.Logic.EndCheck.html",
    "title": "Delegate EndCheck | NetAF",
    "summary": "Delegate EndCheck Represents the callback used for end checks. Namespace: NetAF.Logic Assembly: NetAF.dll Syntax public delegate EndCheckResult EndCheck(Game game) Parameters Type Name Description Game game The game to check for end. Returns Type Description EndCheckResult Returns a result from the check."
  },
  "api/NetAF.Logic.EndCheckResult.html": {
    "href": "api/NetAF.Logic.EndCheckResult.html",
    "title": "Class EndCheckResult | NetAF",
    "summary": "Class EndCheckResult Represents the result of an end check. Inheritance object EndCheckResult Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Logic Assembly: NetAF.dll Syntax public class EndCheckResult Constructors EndCheckResult(bool, string, string) Represents the result of an end check. Declaration public EndCheckResult(bool hasEnded, string title, string description) Parameters Type Name Description bool hasEnded If the game has ended. string title A title to describe the end. string description A description of the end. Properties Description Get a description of the end. Declaration public string Description { get; } Property Value Type Description string HasEnded Get if the game has come to an end. Declaration public bool HasEnded { get; } Property Value Type Description bool NotEnded Get a default result for not ended. Declaration public static EndCheckResult NotEnded { get; } Property Value Type Description EndCheckResult Title Get a title to describe the end. Declaration public string Title { get; } Property Value Type Description string"
  },
  "api/NetAF.Logic.FinishModes.html": {
    "href": "api/NetAF.Logic.FinishModes.html",
    "title": "Enum FinishModes | NetAF",
    "summary": "Enum FinishModes Enumeration of game finish modes. Namespace: NetAF.Logic Assembly: NetAF.dll Syntax public enum FinishModes Fields Name Description Finish Finish. ReturnToTitleScreen Return to the title screen."
  },
  "api/NetAF.Logic.Game.html": {
    "href": "api/NetAF.Logic.Game.html",
    "title": "Class Game | NetAF",
    "summary": "Class Game Represents a game. Inheritance object Game Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Logic Assembly: NetAF.dll Syntax public sealed class Game Properties Catalog Get the catalog of assets for this game. Declaration public AssetCatalog Catalog { get; } Property Value Type Description AssetCatalog Configuration Get the configuration. Declaration public GameConfiguration Configuration { get; } Property Value Type Description GameConfiguration EndConditions Get the end conditions. Declaration public GameEndConditions EndConditions { get; } Property Value Type Description GameEndConditions HistoryManager Get the history manager. Declaration public HistoryManager HistoryManager { get; } Property Value Type Description HistoryManager Info Get the info. Declaration public GameInfo Info { get; } Property Value Type Description GameInfo Introduction Get the introduction. Declaration public string Introduction { get; } Property Value Type Description string Mode Get the mode. Declaration public IGameMode Mode { get; } Property Value Type Description IGameMode NoteManager Get the note manager. Declaration public NoteManager NoteManager { get; } Property Value Type Description NoteManager Overworld Get the overworld. Declaration public Overworld Overworld { get; } Property Value Type Description Overworld Player Get the player. Declaration public PlayableCharacter Player { get; } Property Value Type Description PlayableCharacter Methods ChangeMode(IGameMode) Change mode to a specified mode. Declaration public void ChangeMode(IGameMode mode) Parameters Type Name Description IGameMode mode The mode. ChangePlayer(PlayableCharacter, bool) Change to a specified player. Declaration public void ChangePlayer(PlayableCharacter player, bool jumpToLastLocation = true) Parameters Type Name Description PlayableCharacter player The player to change to. bool jumpToLastLocation Jump to the last location, if it is known. Then true the player will be added at the last location, when false the current location will be used. By default this is true. Create(GameInfo, string, AssetGenerator, GameEndConditions, GameConfiguration, GameSetupCallback) Create a new callback for generating instances of a game. Declaration public static GameCreator Create(GameInfo info, string introduction, AssetGenerator assetGenerator, GameEndConditions conditions, GameConfiguration configuration, GameSetupCallback setup = null) Parameters Type Name Description GameInfo info Information about the game. string introduction An introduction to the game. AssetGenerator assetGenerator The generator to use to create game assets. GameEndConditions conditions The game conditions. GameConfiguration configuration The configuration for the game. GameSetupCallback setup A setup function to run on the created game after it has been created. Returns Type Description GameCreator A GameCreator that will create instances of the game. FindInteractionTarget(string) Find an interaction target within the current scope for this Game. Declaration public IInteractWithItem FindInteractionTarget(string name) Parameters Type Name Description string name The targets name. Returns Type Description IInteractWithItem The first IInteractWithItem object which has a name that matches the name parameter. GetAllInteractionTargets() Get all interaction targets for this game. Declaration public IInteractWithItem[] GetAllInteractionTargets() Returns Type Description IInteractWithItem[] An array containing all interaction targets. GetAllPlayerVisibleExaminables() Get all examinables that are currently visible to the player. Declaration public IExaminable[] GetAllPlayerVisibleExaminables() Returns Type Description IExaminable[] An array of all examinables that are currently visible to the player. GetContextualCommands() Get all commands that are valid in the current context. Declaration public CommandHelp[] GetContextualCommands() Returns Type Description CommandHelp[] An array of all commands that are valid in the current context. GetInactivePlayerLocations() Get an array of inactive player locations. Declaration public PlayableCharacterLocation[] GetInactivePlayerLocations() Returns Type Description PlayableCharacterLocation[] An array containing all locations of inactive platers. GetPromptsForCommand(CommandHelp) Get all prompts for a command. Declaration public Prompt[] GetPromptsForCommand(CommandHelp command) Parameters Type Name Description CommandHelp command The command to get the prompts for. Returns Type Description Prompt[] An array of prompts. GetPromptsForCommand(string) Get all prompts for a command. Declaration public Prompt[] GetPromptsForCommand(string command) Parameters Type Name Description string command The command to get the prompts for. Returns Type Description Prompt[] An array of prompts. RestoreFrom(GameSerialization) Restore this object from a serialization. Declaration public void RestoreFrom(GameSerialization serialization) Parameters Type Name Description GameSerialization serialization The serialization to restore from."
  },
  "api/NetAF.Logic.GameConfiguration.html": {
    "href": "api/NetAF.Logic.GameConfiguration.html",
    "title": "Class GameConfiguration | NetAF",
    "summary": "Class GameConfiguration Represents a configuration for a console game. Inheritance object GameConfiguration Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Logic Assembly: NetAF.dll Syntax public sealed class GameConfiguration Constructors GameConfiguration(IIOAdapter, FrameBuilderCollection, Size, FinishModes) Represents a configuration for a console game. Declaration public GameConfiguration(IIOAdapter adapter, FrameBuilderCollection frameBuilders, Size displaySize, FinishModes finishMode = FinishModes.ReturnToTitleScreen) Parameters Type Name Description IIOAdapter adapter The I/O adapter. FrameBuilderCollection frameBuilders The collection of frame builders to use to render the game. Size displaySize The display size. FinishModes finishMode The finish mode. Properties Adapter Get the I/O adapter. Declaration public IIOAdapter Adapter { get; } Property Value Type Description IIOAdapter DisplaySize Get the display size. Declaration public Size DisplaySize { get; } Property Value Type Description Size FinishMode Get the finish mode. Declaration public FinishModes FinishMode { get; } Property Value Type Description FinishModes FrameBuilders Get or set the collection of frame builders to use to render the game. Declaration public FrameBuilderCollection FrameBuilders { get; set; } Property Value Type Description FrameBuilderCollection Interpreter Get or set the interpreter used for interpreting input. Declaration public IInterpreter Interpreter { get; set; } Property Value Type Description IInterpreter"
  },
  "api/NetAF.Logic.GameCreator.html": {
    "href": "api/NetAF.Logic.GameCreator.html",
    "title": "Class GameCreator | NetAF",
    "summary": "Class GameCreator Represents the call used for Game creation. Inheritance object GameCreator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Logic Assembly: NetAF.dll Syntax public sealed class GameCreator"
  },
  "api/NetAF.Logic.GameEndConditions.html": {
    "href": "api/NetAF.Logic.GameEndConditions.html",
    "title": "Class GameEndConditions | NetAF",
    "summary": "Class GameEndConditions Provides a container for game end conditions. Inheritance object GameEndConditions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Logic Assembly: NetAF.dll Syntax public sealed class GameEndConditions Constructors GameEndConditions(EndCheck, EndCheck) Provides a container for game end conditions. Declaration public GameEndConditions(EndCheck completionCondition, EndCheck gameOverCondition) Parameters Type Name Description EndCheck completionCondition The condition that determines if the game was completed. EndCheck gameOverCondition The condition that determines if the game has ended. Properties CompletionCondition Get the condition that determines if the game was completed. Declaration public EndCheck CompletionCondition { get; } Property Value Type Description EndCheck GameOverCondition Get the condition that determines if the game has ended. Declaration public EndCheck GameOverCondition { get; } Property Value Type Description EndCheck NoEnd Get a value for no end. Declaration public static GameEndConditions NoEnd { get; } Property Value Type Description GameEndConditions NotEnded Get an end check that returns EndCheckResult.NotEnded. Declaration public static EndCheck NotEnded { get; } Property Value Type Description EndCheck"
  },
  "api/NetAF.Logic.GameExecutor.html": {
    "href": "api/NetAF.Logic.GameExecutor.html",
    "title": "Class GameExecutor | NetAF",
    "summary": "Class GameExecutor Handles the execution of a Game. Inheritance object GameExecutor Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Logic Assembly: NetAF.dll Syntax public static class GameExecutor Properties ExecutingGame Get the game that is currently executing. Declaration public static Game ExecutingGame { get; } Property Value Type Description Game IsExecuting Get if a game is currently executing. Declaration public static bool IsExecuting { get; } Property Value Type Description bool Methods CancelExecution() Cancel execution of any executing game. Declaration public static void CancelExecution() Execute(GameCreator, IGameExecutionAutomationController) Execute a game. Declaration public static void Execute(GameCreator creator, IGameExecutionAutomationController controller = null) Parameters Type Name Description GameCreator creator The GameCreator used to create instances of the game. IGameExecutionAutomationController controller An optional controller to manage game automation. Restart() Restart an executing game. Declaration public static void Restart() Update(string) Update to the next frame of the game. Declaration public static UpdateResult Update(string input = \"\") Parameters Type Name Description string input Any input that should be passed to the game. Returns Type Description UpdateResult The result of the action."
  },
  "api/NetAF.Logic.GameInfo.html": {
    "href": "api/NetAF.Logic.GameInfo.html",
    "title": "Class GameInfo | NetAF",
    "summary": "Class GameInfo Provides information about a game. Inheritance object GameInfo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Logic Assembly: NetAF.dll Syntax public sealed class GameInfo Constructors GameInfo(string, string, string) Provides information about a game. Declaration public GameInfo(string name, string description, string author) Parameters Type Name Description string name The name of the game. string description A description of the game. string author A author of the game. Properties Author Get the author. Declaration public string Author { get; set; } Property Value Type Description string Description Get the description of the game. Declaration public string Description { get; } Property Value Type Description string Name Get the name of the game. Declaration public string Name { get; } Property Value Type Description string"
  },
  "api/NetAF.Logic.IGameExecutionAutomationController.html": {
    "href": "api/NetAF.Logic.IGameExecutionAutomationController.html",
    "title": "Interface IGameExecutionAutomationController | NetAF",
    "summary": "Interface IGameExecutionAutomationController Represents any object that can control the automation of game execution. Namespace: NetAF.Logic Assembly: NetAF.dll Syntax public interface IGameExecutionAutomationController Methods BeginAsync(Game) Begin execution of a game, asynchronously. Declaration Task BeginAsync(Game game) Parameters Type Name Description Game game Returns Type Description Task The task. CancelAsync() Cancel execution, asynchronously. Declaration Task CancelAsync() Returns Type Description Task The task."
  },
  "api/NetAF.Logic.IIOAdapter.html": {
    "href": "api/NetAF.Logic.IIOAdapter.html",
    "title": "Interface IIOAdapter | NetAF",
    "summary": "Interface IIOAdapter Represents any object that provides an adapter for input. Namespace: NetAF.Logic Assembly: NetAF.dll Syntax public interface IIOAdapter Methods RenderFrame(IFrame) Render a frame. Declaration void RenderFrame(IFrame frame) Parameters Type Name Description IFrame frame The frame to render. Setup(Game) Setup for a game. Declaration void Setup(Game game) Parameters Type Name Description Game game The game to set up for."
  },
  "api/NetAF.Logic.Modes.AboutMode.html": {
    "href": "api/NetAF.Logic.Modes.AboutMode.html",
    "title": "Class AboutMode | NetAF",
    "summary": "Class AboutMode Provides a display mode for about. Inheritance object AboutMode Implements IGameMode Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Logic.Modes Assembly: NetAF.dll Syntax public sealed class AboutMode : IGameMode Properties Interpreter Get the interpreter. Declaration public IInterpreter Interpreter { get; } Property Value Type Description IInterpreter Type Get the type of mode this provides. Declaration public GameModeType Type { get; } Property Value Type Description GameModeType Methods Render(Game) Render the current state of a game. Declaration public void Render(Game game) Parameters Type Name Description Game game The game. Implements IGameMode"
  },
  "api/NetAF.Logic.Modes.CommandListMode.html": {
    "href": "api/NetAF.Logic.Modes.CommandListMode.html",
    "title": "Class CommandListMode | NetAF",
    "summary": "Class CommandListMode Provides a display mode for command list. Inheritance object CommandListMode Implements IGameMode Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Logic.Modes Assembly: NetAF.dll Syntax public sealed class CommandListMode : IGameMode Constructors CommandListMode(CommandHelp[]) Provides a display mode for command list. Declaration public CommandListMode(CommandHelp[] commands) Parameters Type Name Description CommandHelp[] commands The commands to display. Properties Interpreter Get the interpreter. Declaration public IInterpreter Interpreter { get; } Property Value Type Description IInterpreter Type Get the type of mode this provides. Declaration public GameModeType Type { get; } Property Value Type Description GameModeType Methods Render(Game) Render the current state of a game. Declaration public void Render(Game game) Parameters Type Name Description Game game The game. Implements IGameMode"
  },
  "api/NetAF.Logic.Modes.CompletionMode.html": {
    "href": "api/NetAF.Logic.Modes.CompletionMode.html",
    "title": "Class CompletionMode | NetAF",
    "summary": "Class CompletionMode Provides a display mode for completion. Inheritance object CompletionMode Implements IGameMode Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Logic.Modes Assembly: NetAF.dll Syntax public sealed class CompletionMode : IGameMode Constructors CompletionMode(string, string) Provides a display mode for completion. Declaration public CompletionMode(string title, string message) Parameters Type Name Description string title The title. string message The message. Properties Interpreter Get the interpreter. Declaration public IInterpreter Interpreter { get; } Property Value Type Description IInterpreter Type Get the type of mode this provides. Declaration public GameModeType Type { get; } Property Value Type Description GameModeType Methods Render(Game) Render the current state of a game. Declaration public void Render(Game game) Parameters Type Name Description Game game The game. Implements IGameMode"
  },
  "api/NetAF.Logic.Modes.ConversationMode.html": {
    "href": "api/NetAF.Logic.Modes.ConversationMode.html",
    "title": "Class ConversationMode | NetAF",
    "summary": "Class ConversationMode Provides a display mode for conversation. Inheritance object ConversationMode Implements IGameMode Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Logic.Modes Assembly: NetAF.dll Syntax public sealed class ConversationMode : IGameMode Constructors ConversationMode(IConverser) Initializes a new instance of the ConversationMode class. Declaration public ConversationMode(IConverser converser) Parameters Type Name Description IConverser converser The IConverser the conversation is being held with. Properties Converser Get the converser. Declaration public IConverser Converser { get; } Property Value Type Description IConverser Interpreter Get the interpreter. Declaration public IInterpreter Interpreter { get; } Property Value Type Description IInterpreter Type Get the type of mode this provides. Declaration public GameModeType Type { get; } Property Value Type Description GameModeType Methods Render(Game) Render the current state of a game. Declaration public void Render(Game game) Parameters Type Name Description Game game The game. Implements IGameMode"
  },
  "api/NetAF.Logic.Modes.GameModeType.html": {
    "href": "api/NetAF.Logic.Modes.GameModeType.html",
    "title": "Enum GameModeType | NetAF",
    "summary": "Enum GameModeType Enumeration of game mode types. Namespace: NetAF.Logic.Modes Assembly: NetAF.dll Syntax public enum GameModeType Fields Name Description Information An information mode. Interactive An interactive mode."
  },
  "api/NetAF.Logic.Modes.GameOverMode.html": {
    "href": "api/NetAF.Logic.Modes.GameOverMode.html",
    "title": "Class GameOverMode | NetAF",
    "summary": "Class GameOverMode Provides a display mode for game over. Inheritance object GameOverMode Implements IGameMode Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Logic.Modes Assembly: NetAF.dll Syntax public sealed class GameOverMode : IGameMode Constructors GameOverMode(string, string) Provides a display mode for game over. Declaration public GameOverMode(string title, string message) Parameters Type Name Description string title The title. string message The message. Properties Interpreter Get the interpreter. Declaration public IInterpreter Interpreter { get; } Property Value Type Description IInterpreter Type Get the type of mode this provides. Declaration public GameModeType Type { get; } Property Value Type Description GameModeType Methods Render(Game) Render the current state of a game. Declaration public void Render(Game game) Parameters Type Name Description Game game The game. Implements IGameMode"
  },
  "api/NetAF.Logic.Modes.HelpMode.html": {
    "href": "api/NetAF.Logic.Modes.HelpMode.html",
    "title": "Class HelpMode | NetAF",
    "summary": "Class HelpMode Provides a display mode for help. Inheritance object HelpMode Implements IGameMode Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Logic.Modes Assembly: NetAF.dll Syntax public sealed class HelpMode : IGameMode Constructors HelpMode(CommandHelp, Prompt[]) Provides a display mode for help. Declaration public HelpMode(CommandHelp command, Prompt[] prompts) Parameters Type Name Description CommandHelp command The command to display. Prompt[] prompts The prompts to display for the command. Properties Interpreter Get the interpreter. Declaration public IInterpreter Interpreter { get; } Property Value Type Description IInterpreter Type Get the type of mode this provides. Declaration public GameModeType Type { get; } Property Value Type Description GameModeType Methods Render(Game) Render the current state of a game. Declaration public void Render(Game game) Parameters Type Name Description Game game The game. Implements IGameMode"
  },
  "api/NetAF.Logic.Modes.HistoryMode.html": {
    "href": "api/NetAF.Logic.Modes.HistoryMode.html",
    "title": "Class HistoryMode | NetAF",
    "summary": "Class HistoryMode Provides a display mode for the in-game history. Inheritance object HistoryMode Implements IGameMode Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Logic.Modes Assembly: NetAF.dll Syntax public sealed class HistoryMode : IGameMode Constructors HistoryMode(HistoryManager) Provides a display mode for the in-game history. Declaration public HistoryMode(HistoryManager historyManager) Parameters Type Name Description HistoryManager historyManager The history manager. Properties Interpreter Get the interpreter. Declaration public IInterpreter Interpreter { get; } Property Value Type Description IInterpreter Type Get the type of mode this provides. Declaration public GameModeType Type { get; } Property Value Type Description GameModeType Methods Render(Game) Render the current state of a game. Declaration public void Render(Game game) Parameters Type Name Description Game game The game. Implements IGameMode"
  },
  "api/NetAF.Logic.Modes.IGameMode.html": {
    "href": "api/NetAF.Logic.Modes.IGameMode.html",
    "title": "Interface IGameMode | NetAF",
    "summary": "Interface IGameMode Represents a mode for a game. Namespace: NetAF.Logic.Modes Assembly: NetAF.dll Syntax public interface IGameMode Properties Interpreter Get the interpreter. Declaration IInterpreter Interpreter { get; } Property Value Type Description IInterpreter Type Get the type of mode this provides. Declaration GameModeType Type { get; } Property Value Type Description GameModeType Methods Render(Game) Render the current state of a game. Declaration void Render(Game game) Parameters Type Name Description Game game The game."
  },
  "api/NetAF.Logic.Modes.NoteMode.html": {
    "href": "api/NetAF.Logic.Modes.NoteMode.html",
    "title": "Class NoteMode | NetAF",
    "summary": "Class NoteMode Provides a display mode for the in-game notes. Inheritance object NoteMode Implements IGameMode Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Logic.Modes Assembly: NetAF.dll Syntax public sealed class NoteMode : IGameMode Constructors NoteMode(NoteManager) Provides a display mode for the in-game notes. Declaration public NoteMode(NoteManager noteManager) Parameters Type Name Description NoteManager noteManager The note manager. Properties Interpreter Get the interpreter. Declaration public IInterpreter Interpreter { get; } Property Value Type Description IInterpreter Type Get the type of mode this provides. Declaration public GameModeType Type { get; } Property Value Type Description GameModeType Methods Render(Game) Render the current state of a game. Declaration public void Render(Game game) Parameters Type Name Description Game game The game. Implements IGameMode"
  },
  "api/NetAF.Logic.Modes.ReactionMode.html": {
    "href": "api/NetAF.Logic.Modes.ReactionMode.html",
    "title": "Class ReactionMode | NetAF",
    "summary": "Class ReactionMode Provides a display mode for reaction. Inheritance object ReactionMode Implements IGameMode Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Logic.Modes Assembly: NetAF.dll Syntax public sealed class ReactionMode : IGameMode Constructors ReactionMode(Reaction) Provides a display mode for reaction. Declaration public ReactionMode(Reaction reaction) Parameters Type Name Description Reaction reaction The reaction. Properties Interpreter Get the interpreter. Declaration public IInterpreter Interpreter { get; } Property Value Type Description IInterpreter Type Get the type of mode this provides. Declaration public GameModeType Type { get; } Property Value Type Description GameModeType Methods Render(Game) Render the current state of a game. Declaration public void Render(Game game) Parameters Type Name Description Game game The game. Implements IGameMode"
  },
  "api/NetAF.Logic.Modes.RegionMapMode.html": {
    "href": "api/NetAF.Logic.Modes.RegionMapMode.html",
    "title": "Class RegionMapMode | NetAF",
    "summary": "Class RegionMapMode Provides a display mode for the region map. Inheritance object RegionMapMode Implements IGameMode Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Logic.Modes Assembly: NetAF.dll Syntax public sealed class RegionMapMode : IGameMode Constructors RegionMapMode(Point3D, RegionMapDetail) Provides a display mode for the region map. Declaration public RegionMapMode(Point3D focusPosition, RegionMapDetail detail) Parameters Type Name Description Point3D focusPosition The position to focus on. To use the player position use RegionMapMode.Player. RegionMapDetail detail The level of detail to use. Properties Detail Get or set the level of detail to use. Declaration public RegionMapDetail Detail { get; set; } Property Value Type Description RegionMapDetail FocusPosition Get or set the position to focus on. To use the player position use RegionMapMode.Player. Declaration public Point3D FocusPosition { get; set; } Property Value Type Description Point3D Interpreter Get the interpreter. Declaration public IInterpreter Interpreter { get; } Property Value Type Description IInterpreter Player Get the value to use to display the player level. Declaration public static Point3D Player { get; } Property Value Type Description Point3D Type Get the type of mode this provides. Declaration public GameModeType Type { get; } Property Value Type Description GameModeType Methods CanPanToPosition(Region, Point3D) Determine if a pan position is valid. Declaration public static bool CanPanToPosition(Region region, Point3D position) Parameters Type Name Description Region region The region. Point3D position The position. Returns Type Description bool True if the pan position is valid, else false. Render(Game) Render the current state of a game. Declaration public void Render(Game game) Parameters Type Name Description Game game The game. Implements IGameMode"
  },
  "api/NetAF.Logic.Modes.SceneMode.html": {
    "href": "api/NetAF.Logic.Modes.SceneMode.html",
    "title": "Class SceneMode | NetAF",
    "summary": "Class SceneMode Provides a display mode for a scene. Inheritance object SceneMode Implements IGameMode Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Logic.Modes Assembly: NetAF.dll Syntax public sealed class SceneMode : IGameMode Properties CommandCategories Get or set the command categories to display. Declaration public static CommandCategory[] CommandCategories { get; set; } Property Value Type Description CommandCategory[] Interpreter Get the interpreter. Declaration public IInterpreter Interpreter { get; } Property Value Type Description IInterpreter Type Get the type of mode this provides. Declaration public GameModeType Type { get; } Property Value Type Description GameModeType Methods Render(Game) Render the current state of a game. Declaration public void Render(Game game) Parameters Type Name Description Game game The game. Implements IGameMode"
  },
  "api/NetAF.Logic.Modes.TitleMode.html": {
    "href": "api/NetAF.Logic.Modes.TitleMode.html",
    "title": "Class TitleMode | NetAF",
    "summary": "Class TitleMode Provides a display mode for title. Inheritance object TitleMode Implements IGameMode Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Logic.Modes Assembly: NetAF.dll Syntax public sealed class TitleMode : IGameMode Properties Interpreter Get the interpreter. Declaration public IInterpreter Interpreter { get; } Property Value Type Description IInterpreter Type Get the type of mode this provides. Declaration public GameModeType Type { get; } Property Value Type Description GameModeType Methods Render(Game) Render the current state of a game. Declaration public void Render(Game game) Parameters Type Name Description Game game The game. Implements IGameMode"
  },
  "api/NetAF.Logic.Modes.VisualMode.html": {
    "href": "api/NetAF.Logic.Modes.VisualMode.html",
    "title": "Class VisualMode | NetAF",
    "summary": "Class VisualMode Provides a display mode for rendering of visual frame. Inheritance object VisualMode Implements IGameMode Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Logic.Modes Assembly: NetAF.dll Syntax public sealed class VisualMode : IGameMode Constructors VisualMode(IFrame) Provides a display mode for rendering of visual frame. Declaration public VisualMode(IFrame frame) Parameters Type Name Description IFrame frame The frame to render. Properties Interpreter Get the interpreter. Declaration public IInterpreter Interpreter { get; } Property Value Type Description IInterpreter Type Get the type of mode this provides. Declaration public GameModeType Type { get; } Property Value Type Description GameModeType Methods Render(Game) Render the current state of a game. Declaration public void Render(Game game) Parameters Type Name Description Game game The game. Implements IGameMode"
  },
  "api/NetAF.Logic.Modes.html": {
    "href": "api/NetAF.Logic.Modes.html",
    "title": "Namespace NetAF.Logic.Modes | NetAF",
    "summary": "Namespace NetAF.Logic.Modes Classes AboutMode Provides a display mode for about. CommandListMode Provides a display mode for command list. CompletionMode Provides a display mode for completion. ConversationMode Provides a display mode for conversation. GameOverMode Provides a display mode for game over. HelpMode Provides a display mode for help. HistoryMode Provides a display mode for the in-game history. NoteMode Provides a display mode for the in-game notes. ReactionMode Provides a display mode for reaction. RegionMapMode Provides a display mode for the region map. SceneMode Provides a display mode for a scene. TitleMode Provides a display mode for title. VisualMode Provides a display mode for rendering of visual frame. Interfaces IGameMode Represents a mode for a game. Enums GameModeType Enumeration of game mode types."
  },
  "api/NetAF.Logic.PlayableCharacterLocation.html": {
    "href": "api/NetAF.Logic.PlayableCharacterLocation.html",
    "title": "Class PlayableCharacterLocation | NetAF",
    "summary": "Class PlayableCharacterLocation Provides a record of the location of a playable character. Inheritance object PlayableCharacterLocation Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Logic Assembly: NetAF.dll Syntax public class PlayableCharacterLocation Constructors PlayableCharacterLocation(string, string, string) Provides a record of the location of a playable character. Declaration public PlayableCharacterLocation(string playerIdentifier, string regionIdentifier, string roomIdentifier) Parameters Type Name Description string playerIdentifier The player identifier. string regionIdentifier The identifier for the region that the player is in. string roomIdentifier The identifier for the room that the player is in. Properties PlayerIdentifier Get the player. Declaration public string PlayerIdentifier { get; } Property Value Type Description string RegionIdentifier Get the identifier for the region that the player is in. Declaration public string RegionIdentifier { get; } Property Value Type Description string RoomIdentifier Get the identifier for room that the player is in. Declaration public string RoomIdentifier { get; } Property Value Type Description string Methods FromSerialization(PlayableCharacterLocationSerialization) Create a new instance of PlayableCharacterLocation from a serialization. Declaration public static PlayableCharacterLocation FromSerialization(PlayableCharacterLocationSerialization serialization) Parameters Type Name Description PlayableCharacterLocationSerialization serialization The serialization. Returns Type Description PlayableCharacterLocation The location."
  },
  "api/NetAF.Logic.UpdateResult.html": {
    "href": "api/NetAF.Logic.UpdateResult.html",
    "title": "Class UpdateResult | NetAF",
    "summary": "Class UpdateResult Represents the result of an update action. Inheritance object UpdateResult Implements IEquatable<UpdateResult> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Logic Assembly: NetAF.dll Syntax public record UpdateResult : IEquatable<UpdateResult> Constructors UpdateResult(bool, string) Represents the result of an update action. Declaration public UpdateResult(bool Completed, string Description = \"\") Parameters Type Name Description bool Completed True if the update completed successfully, else false. string Description A description of the the result. Properties Completed True if the update completed successfully, else false. Declaration public bool Completed { get; init; } Property Value Type Description bool Description A description of the the result. Declaration public string Description { get; init; } Property Value Type Description string Implements IEquatable<T>"
  },
  "api/NetAF.Logic.html": {
    "href": "api/NetAF.Logic.html",
    "title": "Namespace NetAF.Logic | NetAF",
    "summary": "Namespace NetAF.Logic Classes AssetCatalog Provides a catalog of all assets in a game. AssetGenerator Represents a generator for game assets. EndCheckResult Represents the result of an end check. Game Represents a game. GameConfiguration Represents a configuration for a console game. GameCreator Represents the call used for Game creation. GameEndConditions Provides a container for game end conditions. GameExecutor Handles the execution of a Game. GameInfo Provides information about a game. PlayableCharacterLocation Provides a record of the location of a playable character. UpdateResult Represents the result of an update action. Interfaces IGameExecutionAutomationController Represents any object that can control the automation of game execution. IIOAdapter Represents any object that provides an adapter for input. Enums FinishModes Enumeration of game finish modes. Delegates EndCheck Represents the callback used for end checks."
  },
  "api/NetAF.Persistence.Json.JsonSave.html": {
    "href": "api/NetAF.Persistence.Json.JsonSave.html",
    "title": "Class JsonSave | NetAF",
    "summary": "Class JsonSave Provides persistence for a save in the Json format. Inheritance object JsonSave Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Persistence.Json Assembly: NetAF.dll Syntax public static class JsonSave Methods FromFile(string, out RestorePoint, out string) Return a restore point from a file. Declaration public static bool FromFile(string path, out RestorePoint restorePoint, out string message) Parameters Type Name Description string path The file path. RestorePoint restorePoint The restore point. string message A message detailing the result of the load, if the load was unsuccessful. If the load was successful this will be empty. Returns Type Description bool True if the load was successful else false. FromJson(string) Create a restore point from Json. Declaration public static RestorePoint FromJson(string json) Parameters Type Name Description string json The json. Returns Type Description RestorePoint The restore point created from the Json. ToFile(string, RestorePoint, out string) Persist a restore point to a file. Declaration public static bool ToFile(string path, RestorePoint restorePoint, out string message) Parameters Type Name Description string path The file path. RestorePoint restorePoint The restore point to persist. string message A message detailing the result of the save, if the save was unsuccessful. If the save was successful this will be empty. Returns Type Description bool True if the save was successful else false. ToJson(RestorePoint) Convert a restore point to Json. Declaration public static string ToJson(RestorePoint restorePoint) Parameters Type Name Description RestorePoint restorePoint The restore point. Returns Type Description string The Json reatore point."
  },
  "api/NetAF.Persistence.Json.html": {
    "href": "api/NetAF.Persistence.Json.html",
    "title": "Namespace NetAF.Persistence.Json | NetAF",
    "summary": "Namespace NetAF.Persistence.Json Classes JsonSave Provides persistence for a save in the Json format."
  },
  "api/NetAF.Persistence.RestorePoint.html": {
    "href": "api/NetAF.Persistence.RestorePoint.html",
    "title": "Class RestorePoint | NetAF",
    "summary": "Class RestorePoint Represents a restore point for a Game. Inheritance object RestorePoint Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Persistence Assembly: NetAF.dll Syntax public class RestorePoint Properties CreationTime Get or set the creation time of this save. Declaration public DateTime CreationTime { get; set; } Property Value Type Description DateTime Game Get or set the serialized game. Declaration public GameSerialization Game { get; set; } Property Value Type Description GameSerialization Name Get or set the name of this save. Declaration public string Name { get; set; } Property Value Type Description string Methods Create(string, Game) Create a new restore point. Declaration public static RestorePoint Create(string name, Game game) Parameters Type Name Description string name The name of the restore point. Game game The game to create the restore point for. Returns Type Description RestorePoint The restore point."
  },
  "api/NetAF.Persistence.html": {
    "href": "api/NetAF.Persistence.html",
    "title": "Namespace NetAF.Persistence | NetAF",
    "summary": "Namespace NetAF.Persistence Classes RestorePoint Represents a restore point for a Game."
  },
  "api/NetAF.Rendering.FrameBuilders.FrameBuilderCollection.html": {
    "href": "api/NetAF.Rendering.FrameBuilders.FrameBuilderCollection.html",
    "title": "Class FrameBuilderCollection | NetAF",
    "summary": "Class FrameBuilderCollection Provides a collection of all of the frame builders required to run a game. Inheritance object FrameBuilderCollection Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Rendering.FrameBuilders Assembly: NetAF.dll Syntax public class FrameBuilderCollection Constructors FrameBuilderCollection(params IFrameBuilder[]) Provides a collection of all of the frame builders required to run a game. Declaration public FrameBuilderCollection(params IFrameBuilder[] frameBuilders) Parameters Type Name Description IFrameBuilder[] frameBuilders The frame builders. Methods GetFrameBuilder<T>() Get a frame builder for a specified type. Declaration public T GetFrameBuilder<T>() Returns Type Description T The frame builder. Type Parameters Name Description T The type of frame builder."
  },
  "api/NetAF.Rendering.FrameBuilders.FrameBuilderCollections.html": {
    "href": "api/NetAF.Rendering.FrameBuilders.FrameBuilderCollections.html",
    "title": "Class FrameBuilderCollections | NetAF",
    "summary": "Class FrameBuilderCollections Provides a container for frame builder collections. Inheritance object FrameBuilderCollections Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Rendering.FrameBuilders Assembly: NetAF.dll Syntax public static class FrameBuilderCollections Properties Console Get the default console frame builder collection. Declaration public static FrameBuilderCollection Console { get; } Property Value Type Description FrameBuilderCollection Html Get the default HTML frame builder collection. Declaration public static FrameBuilderCollection Html { get; } Property Value Type Description FrameBuilderCollection Text Get the default text frame builder collection. Declaration public static FrameBuilderCollection Text { get; } Property Value Type Description FrameBuilderCollection"
  },
  "api/NetAF.Rendering.FrameBuilders.IAboutFrameBuilder.html": {
    "href": "api/NetAF.Rendering.FrameBuilders.IAboutFrameBuilder.html",
    "title": "Interface IAboutFrameBuilder | NetAF",
    "summary": "Interface IAboutFrameBuilder Represents any object that can build about frames. Namespace: NetAF.Rendering.FrameBuilders Assembly: NetAF.dll Syntax public interface IAboutFrameBuilder : IFrameBuilder Methods Build(string, Game, Size) Build a frame. Declaration IFrame Build(string title, Game game, Size size) Parameters Type Name Description string title The title. Game game The game. Size size The size of the frame. Returns Type Description IFrame The frame."
  },
  "api/NetAF.Rendering.FrameBuilders.ICommandListFrameBuilder.html": {
    "href": "api/NetAF.Rendering.FrameBuilders.ICommandListFrameBuilder.html",
    "title": "Interface ICommandListFrameBuilder | NetAF",
    "summary": "Interface ICommandListFrameBuilder Represents any object that can build command list frames. Namespace: NetAF.Rendering.FrameBuilders Assembly: NetAF.dll Syntax public interface ICommandListFrameBuilder : IFrameBuilder Methods Build(string, string, CommandHelp[], Size) Build a frame. Declaration IFrame Build(string title, string description, CommandHelp[] commandHelp, Size size) Parameters Type Name Description string title The title. string description The description. CommandHelp[] commandHelp The command help. Size size The size of the frame. Returns Type Description IFrame The frame."
  },
  "api/NetAF.Rendering.FrameBuilders.ICompletionFrameBuilder.html": {
    "href": "api/NetAF.Rendering.FrameBuilders.ICompletionFrameBuilder.html",
    "title": "Interface ICompletionFrameBuilder | NetAF",
    "summary": "Interface ICompletionFrameBuilder Represents any object that can build completion frames. Namespace: NetAF.Rendering.FrameBuilders Assembly: NetAF.dll Syntax public interface ICompletionFrameBuilder : IFrameBuilder Methods Build(string, string, Size) Build a frame. Declaration IFrame Build(string message, string reason, Size size) Parameters Type Name Description string message The message to display to the user. string reason The reason the game ended. Size size The size of the frame. Returns Type Description IFrame The frame."
  },
  "api/NetAF.Rendering.FrameBuilders.IConversationFrameBuilder.html": {
    "href": "api/NetAF.Rendering.FrameBuilders.IConversationFrameBuilder.html",
    "title": "Interface IConversationFrameBuilder | NetAF",
    "summary": "Interface IConversationFrameBuilder Represents any object that can build conversation frames. Namespace: NetAF.Rendering.FrameBuilders Assembly: NetAF.dll Syntax public interface IConversationFrameBuilder : IFrameBuilder Methods Build(string, IConverser, CommandHelp[], Size) Build a frame. Declaration IFrame Build(string title, IConverser converser, CommandHelp[] contextualCommands, Size size) Parameters Type Name Description string title The title to display to the user. IConverser converser The converser. CommandHelp[] contextualCommands The contextual commands to display. Size size The size of the frame. Returns Type Description IFrame The frame."
  },
  "api/NetAF.Rendering.FrameBuilders.IFrameBuilder.html": {
    "href": "api/NetAF.Rendering.FrameBuilders.IFrameBuilder.html",
    "title": "Interface IFrameBuilder | NetAF",
    "summary": "Interface IFrameBuilder Represents any object that can build frames. Namespace: NetAF.Rendering.FrameBuilders Assembly: NetAF.dll Syntax public interface IFrameBuilder"
  },
  "api/NetAF.Rendering.FrameBuilders.IGameOverFrameBuilder.html": {
    "href": "api/NetAF.Rendering.FrameBuilders.IGameOverFrameBuilder.html",
    "title": "Interface IGameOverFrameBuilder | NetAF",
    "summary": "Interface IGameOverFrameBuilder Represents any object that can build game over frames. Namespace: NetAF.Rendering.FrameBuilders Assembly: NetAF.dll Syntax public interface IGameOverFrameBuilder : IFrameBuilder Methods Build(string, string, Size) Build a frame. Declaration IFrame Build(string message, string reason, Size size) Parameters Type Name Description string message The message to display to the user. string reason The reason the game ended. Size size The size of the frame. Returns Type Description IFrame The frame."
  },
  "api/NetAF.Rendering.FrameBuilders.IHelpFrameBuilder.html": {
    "href": "api/NetAF.Rendering.FrameBuilders.IHelpFrameBuilder.html",
    "title": "Interface IHelpFrameBuilder | NetAF",
    "summary": "Interface IHelpFrameBuilder Represents any object that can build help frames. Namespace: NetAF.Rendering.FrameBuilders Assembly: NetAF.dll Syntax public interface IHelpFrameBuilder : IFrameBuilder Methods Build(string, CommandHelp, Prompt[], Size) Build a frame. Declaration IFrame Build(string title, CommandHelp commandHelp, Prompt[] prompts, Size size) Parameters Type Name Description string title The title. CommandHelp commandHelp The command help. Prompt[] prompts The prompts to display for the command. Size size The size of the frame. Returns Type Description IFrame The frame."
  },
  "api/NetAF.Rendering.FrameBuilders.IHistoryFrameBuilder.html": {
    "href": "api/NetAF.Rendering.FrameBuilders.IHistoryFrameBuilder.html",
    "title": "Interface IHistoryFrameBuilder | NetAF",
    "summary": "Interface IHistoryFrameBuilder Represents any object that can build history frames. Namespace: NetAF.Rendering.FrameBuilders Assembly: NetAF.dll Syntax public interface IHistoryFrameBuilder : IFrameBuilder Methods Build(string, string, HistoryEntry[], Size) Build a frame. Declaration IFrame Build(string title, string description, HistoryEntry[] entries, Size size) Parameters Type Name Description string title The title. string description The description. HistoryEntry[] entries The history entries. Size size The size of the frame. Returns Type Description IFrame The frame."
  },
  "api/NetAF.Rendering.FrameBuilders.INoteFrameBuilder.html": {
    "href": "api/NetAF.Rendering.FrameBuilders.INoteFrameBuilder.html",
    "title": "Interface INoteFrameBuilder | NetAF",
    "summary": "Interface INoteFrameBuilder Represents any object that can build note frames. Namespace: NetAF.Rendering.FrameBuilders Assembly: NetAF.dll Syntax public interface INoteFrameBuilder : IFrameBuilder Methods Build(string, string, NoteEntry[], Size) Build a frame. Declaration IFrame Build(string title, string description, NoteEntry[] entries, Size size) Parameters Type Name Description string title The title. string description The description. NoteEntry[] entries The note entries. Size size The size of the frame. Returns Type Description IFrame The frame."
  },
  "api/NetAF.Rendering.FrameBuilders.IReactionFrameBuilder.html": {
    "href": "api/NetAF.Rendering.FrameBuilders.IReactionFrameBuilder.html",
    "title": "Interface IReactionFrameBuilder | NetAF",
    "summary": "Interface IReactionFrameBuilder Represents any object that can build reaction frames. Namespace: NetAF.Rendering.FrameBuilders Assembly: NetAF.dll Syntax public interface IReactionFrameBuilder : IFrameBuilder Methods Build(string, string, bool, Size) Build a frame. Declaration IFrame Build(string title, string message, bool isError, Size size) Parameters Type Name Description string title The title to display to the user. string message The message to display to the user. bool isError If the message is an error. Size size The size of the frame. Returns Type Description IFrame The frame."
  },
  "api/NetAF.Rendering.FrameBuilders.IRegionMapBuilder.html": {
    "href": "api/NetAF.Rendering.FrameBuilders.IRegionMapBuilder.html",
    "title": "Interface IRegionMapBuilder | NetAF",
    "summary": "Interface IRegionMapBuilder Represents any object that can build region maps. Namespace: NetAF.Rendering.FrameBuilders Assembly: NetAF.dll Syntax public interface IRegionMapBuilder Methods BuildRegionMap(Region, Point3D, RegionMapDetail) Build a map of a region. Declaration void BuildRegionMap(Region region, Point3D focusPosition, RegionMapDetail detail) Parameters Type Name Description Region region The region. Point3D focusPosition The position to focus on. RegionMapDetail detail The level of detail to use."
  },
  "api/NetAF.Rendering.FrameBuilders.IRegionMapFrameBuilder.html": {
    "href": "api/NetAF.Rendering.FrameBuilders.IRegionMapFrameBuilder.html",
    "title": "Interface IRegionMapFrameBuilder | NetAF",
    "summary": "Interface IRegionMapFrameBuilder Represents any object that can build region map frames. Namespace: NetAF.Rendering.FrameBuilders Assembly: NetAF.dll Syntax public interface IRegionMapFrameBuilder : IFrameBuilder Properties SupportsPan Get if this frame builder supports panning. Declaration bool SupportsPan { get; } Property Value Type Description bool SupportsZoom Get if this frame builder supports zooming. Declaration bool SupportsZoom { get; } Property Value Type Description bool Methods Build(Region, Point3D, RegionMapDetail, CommandHelp[], Size) Build a frame. Declaration IFrame Build(Region region, Point3D focusPosition, RegionMapDetail detail, CommandHelp[] contextualCommands, Size size) Parameters Type Name Description Region region The region. Point3D focusPosition The position to focus on. RegionMapDetail detail The level of detail to use. CommandHelp[] contextualCommands The contextual commands to display. Size size The size of the frame. Returns Type Description IFrame The frame."
  },
  "api/NetAF.Rendering.FrameBuilders.IRoomMapBuilder.html": {
    "href": "api/NetAF.Rendering.FrameBuilders.IRoomMapBuilder.html",
    "title": "Interface IRoomMapBuilder | NetAF",
    "summary": "Interface IRoomMapBuilder Represents any object that can build room maps. Namespace: NetAF.Rendering.FrameBuilders Assembly: NetAF.dll Syntax public interface IRoomMapBuilder Properties RenderedSize Get the rendered size of the room, excluding any keys. Declaration Size RenderedSize { get; } Property Value Type Description Size Methods BuildRoomMap(Room, ViewPoint, KeyType) Build a map for a room. Declaration void BuildRoomMap(Room room, ViewPoint viewPoint, KeyType key) Parameters Type Name Description Room room The room. ViewPoint viewPoint The viewpoint from the room. KeyType key The key type."
  },
  "api/NetAF.Rendering.FrameBuilders.ISceneFrameBuilder.html": {
    "href": "api/NetAF.Rendering.FrameBuilders.ISceneFrameBuilder.html",
    "title": "Interface ISceneFrameBuilder | NetAF",
    "summary": "Interface ISceneFrameBuilder Represents any object that can build scene frames. Namespace: NetAF.Rendering.FrameBuilders Assembly: NetAF.dll Syntax public interface ISceneFrameBuilder : IFrameBuilder Methods Build(Room, ViewPoint, PlayableCharacter, CommandHelp[], KeyType, Size) Build a frame. Declaration IFrame Build(Room room, ViewPoint viewPoint, PlayableCharacter player, CommandHelp[] contextualCommands, KeyType keyType, Size size) Parameters Type Name Description Room room Specify the Room. ViewPoint viewPoint Specify the viewpoint from the room. PlayableCharacter player Specify the player. CommandHelp[] contextualCommands The contextual commands to display. KeyType keyType The type of key to use. Size size The size of the frame. Returns Type Description IFrame The frame."
  },
  "api/NetAF.Rendering.FrameBuilders.ITitleFrameBuilder.html": {
    "href": "api/NetAF.Rendering.FrameBuilders.ITitleFrameBuilder.html",
    "title": "Interface ITitleFrameBuilder | NetAF",
    "summary": "Interface ITitleFrameBuilder Represents any object that can build title frames. Namespace: NetAF.Rendering.FrameBuilders Assembly: NetAF.dll Syntax public interface ITitleFrameBuilder : IFrameBuilder Methods Build(string, string, Size) Build a frame. Declaration IFrame Build(string title, string description, Size size) Parameters Type Name Description string title The title. string description The description. Size size The size of the frame. Returns Type Description IFrame The frame."
  },
  "api/NetAF.Rendering.FrameBuilders.IVisualFrameBuilder.html": {
    "href": "api/NetAF.Rendering.FrameBuilders.IVisualFrameBuilder.html",
    "title": "Interface IVisualFrameBuilder | NetAF",
    "summary": "Interface IVisualFrameBuilder Represents any object that can build visual frames. Namespace: NetAF.Rendering.FrameBuilders Assembly: NetAF.dll Syntax public interface IVisualFrameBuilder : IFrameBuilder Methods Build(string, string, GridVisualBuilder, Size) Build a frame. Declaration IFrame Build(string title, string description, GridVisualBuilder gridVisualBuilder, Size size) Parameters Type Name Description string title The title. string description The description. GridVisualBuilder gridVisualBuilder The grid visual builder. Size size The size of the frame. Returns Type Description IFrame The frame."
  },
  "api/NetAF.Rendering.FrameBuilders.html": {
    "href": "api/NetAF.Rendering.FrameBuilders.html",
    "title": "Namespace NetAF.Rendering.FrameBuilders | NetAF",
    "summary": "Namespace NetAF.Rendering.FrameBuilders Classes FrameBuilderCollection Provides a collection of all of the frame builders required to run a game. FrameBuilderCollections Provides a container for frame builder collections. Interfaces IAboutFrameBuilder Represents any object that can build about frames. ICommandListFrameBuilder Represents any object that can build command list frames. ICompletionFrameBuilder Represents any object that can build completion frames. IConversationFrameBuilder Represents any object that can build conversation frames. IFrameBuilder Represents any object that can build frames. IGameOverFrameBuilder Represents any object that can build game over frames. IHelpFrameBuilder Represents any object that can build help frames. IHistoryFrameBuilder Represents any object that can build history frames. INoteFrameBuilder Represents any object that can build note frames. IReactionFrameBuilder Represents any object that can build reaction frames. IRegionMapBuilder Represents any object that can build region maps. IRegionMapFrameBuilder Represents any object that can build region map frames. IRoomMapBuilder Represents any object that can build room maps. ISceneFrameBuilder Represents any object that can build scene frames. ITitleFrameBuilder Represents any object that can build title frames. IVisualFrameBuilder Represents any object that can build visual frames."
  },
  "api/NetAF.Rendering.FrameProperties.html": {
    "href": "api/NetAF.Rendering.FrameProperties.html",
    "title": "Class FrameProperties | NetAF",
    "summary": "Class FrameProperties Provides global properties for frames. Inheritance object FrameProperties Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Rendering Assembly: NetAF.dll Syntax public static class FrameProperties Properties DisplayCommandList Get or set if the command list is displayed. Declaration public static bool DisplayCommandList { get; set; } Property Value Type Description bool KeyType Get or set the type of key to use on the map. Declaration public static KeyType KeyType { get; set; } Property Value Type Description KeyType MapDetail Get or set the detail to use on the map. Declaration public static RegionMapDetail MapDetail { get; set; } Property Value Type Description RegionMapDetail"
  },
  "api/NetAF.Rendering.IFrame.html": {
    "href": "api/NetAF.Rendering.IFrame.html",
    "title": "Interface IFrame | NetAF",
    "summary": "Interface IFrame Represents any object that is a frame for displaying an interface. Namespace: NetAF.Rendering Assembly: NetAF.dll Syntax public interface IFrame Methods Render(IFramePresenter) Render this frame on a presenter. Declaration void Render(IFramePresenter presenter) Parameters Type Name Description IFramePresenter presenter The presenter."
  },
  "api/NetAF.Rendering.IFramePresenter.html": {
    "href": "api/NetAF.Rendering.IFramePresenter.html",
    "title": "Interface IFramePresenter | NetAF",
    "summary": "Interface IFramePresenter Represents an object that can present a frame. Namespace: NetAF.Rendering Assembly: NetAF.dll Syntax public interface IFramePresenter Methods Present(string) Present a frame. Declaration void Present(string frame) Parameters Type Name Description string frame The frame to write, as a string."
  },
  "api/NetAF.Rendering.KeyType.html": {
    "href": "api/NetAF.Rendering.KeyType.html",
    "title": "Enum KeyType | NetAF",
    "summary": "Enum KeyType Enumeration of key types. Namespace: NetAF.Rendering Assembly: NetAF.dll Syntax public enum KeyType Fields Name Description Dynamic Dynamic key, only show relevant key items. Full Full key. None No key."
  },
  "api/NetAF.Rendering.RegionMapDetail.html": {
    "href": "api/NetAF.Rendering.RegionMapDetail.html",
    "title": "Enum RegionMapDetail | NetAF",
    "summary": "Enum RegionMapDetail Enumeration of detail options for the region map. Namespace: NetAF.Rendering Assembly: NetAF.dll Syntax public enum RegionMapDetail Fields Name Description Basic Basic details only. Detailed Detailed."
  },
  "api/NetAF.Rendering.SceneHelper.html": {
    "href": "api/NetAF.Rendering.SceneHelper.html",
    "title": "Class SceneHelper | NetAF",
    "summary": "Class SceneHelper Provides helper functionality for scenes. Inheritance object SceneHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Rendering Assembly: NetAF.dll Syntax public static class SceneHelper Methods CreateCharactersString(Room) Create a description of the characters as a string. Declaration public static string CreateCharactersString(Room room) Parameters Type Name Description Room room The room. Returns Type Description string The characters, as a string. CreateItemsString(Room) Create a description of the items as a string. Declaration public static string CreateItemsString(Room room) Parameters Type Name Description Room room The room. Returns Type Description string The items, as a string. CreateViewpointAsString(Room, ViewPoint) Create a view point string. Declaration public static string CreateViewpointAsString(Room room, ViewPoint viewPoint) Parameters Type Name Description Room room The room. ViewPoint viewPoint The view point. Returns Type Description string The view point, as a string."
  },
  "api/NetAF.Rendering.html": {
    "href": "api/NetAF.Rendering.html",
    "title": "Namespace NetAF.Rendering | NetAF",
    "summary": "Namespace NetAF.Rendering Classes FrameProperties Provides global properties for frames. SceneHelper Provides helper functionality for scenes. Interfaces IFrame Represents any object that is a frame for displaying an interface. IFramePresenter Represents an object that can present a frame. Enums KeyType Enumeration of key types. RegionMapDetail Enumeration of detail options for the region map."
  },
  "api/NetAF.Serialization.Assets.AttributeAndValueSerialization.html": {
    "href": "api/NetAF.Serialization.Assets.AttributeAndValueSerialization.html",
    "title": "Class AttributeAndValueSerialization | NetAF",
    "summary": "Class AttributeAndValueSerialization Represents a serialization of a KeyValuePair where key is an Attribute and value is a int. Inheritance object AttributeAndValueSerialization Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Serialization.Assets Assembly: NetAF.dll Syntax public sealed class AttributeAndValueSerialization Properties Description Get or set the description. Declaration public string Description { get; set; } Property Value Type Description string IsPlayerVisible Get or set if this is visible to the player. Declaration public bool IsPlayerVisible { get; set; } Property Value Type Description bool Maximum Get or set the maximum. Declaration public int Maximum { get; set; } Property Value Type Description int Minimum Get or set the minimum. Declaration public int Minimum { get; set; } Property Value Type Description int Name Get or set the name. Declaration public string Name { get; set; } Property Value Type Description string Value Get or set the value. Declaration public int Value { get; set; } Property Value Type Description int Methods FromAttributeAndValue(KeyValuePair<Attribute, int>) Create a new serialization from a KeyValuePair where key is an Attribute and value is a int. Declaration public static AttributeAndValueSerialization FromAttributeAndValue(KeyValuePair<Attribute, int> attributeAndValue) Parameters Type Name Description KeyValuePair<Attribute, int> attributeAndValue The KeyValuePair to create the serialization from. Returns Type Description AttributeAndValueSerialization The serialization."
  },
  "api/NetAF.Serialization.Assets.AttributeManagerSerialization.html": {
    "href": "api/NetAF.Serialization.Assets.AttributeManagerSerialization.html",
    "title": "Class AttributeManagerSerialization | NetAF",
    "summary": "Class AttributeManagerSerialization Represents a serialization of an AttributeManager. Inheritance object AttributeManagerSerialization Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Serialization.Assets Assembly: NetAF.dll Syntax public sealed class AttributeManagerSerialization Properties Values Get or set the values. Declaration public List<AttributeAndValueSerialization> Values { get; set; } Property Value Type Description List<AttributeAndValueSerialization> Methods FromAttributeManager(AttributeManager) Create a new serialization from an AttributeManager. Declaration public static AttributeManagerSerialization FromAttributeManager(AttributeManager attributeManager) Parameters Type Name Description AttributeManager attributeManager The AttributeManager to create the serialization from. Returns Type Description AttributeManagerSerialization The serialization."
  },
  "api/NetAF.Serialization.Assets.CharacterSerialization.html": {
    "href": "api/NetAF.Serialization.Assets.CharacterSerialization.html",
    "title": "Class CharacterSerialization | NetAF",
    "summary": "Class CharacterSerialization Represents a serialization of a Character. Inheritance object ExaminableSerialization CharacterSerialization NonPlayableCharacterSerialization Inherited Members ExaminableSerialization.Identifier ExaminableSerialization.IsPlayerVisible ExaminableSerialization.AttributeManager ExaminableSerialization.Commands ExaminableSerialization.FromIExaminable(IExaminable) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Serialization.Assets Assembly: NetAF.dll Syntax public class CharacterSerialization : ExaminableSerialization Properties IsAlive Get or set if the character is alive. Declaration public bool IsAlive { get; set; } Property Value Type Description bool Items Get or set the item serializations. Declaration public ItemSerialization[] Items { get; set; } Property Value Type Description ItemSerialization[] Methods FromCharacter(Character) Create a new serialization from a Character. Declaration public static CharacterSerialization FromCharacter(Character character) Parameters Type Name Description Character character The Character to create the serialization from. Returns Type Description CharacterSerialization The serialization."
  },
  "api/NetAF.Serialization.Assets.ConversationSerialization.html": {
    "href": "api/NetAF.Serialization.Assets.ConversationSerialization.html",
    "title": "Class ConversationSerialization | NetAF",
    "summary": "Class ConversationSerialization Represents a serialization of a Conversation. Inheritance object ConversationSerialization Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Serialization.Assets Assembly: NetAF.dll Syntax public sealed class ConversationSerialization Fields NoCurrentParagraph Get the value for no current paragraph. Declaration public const int NoCurrentParagraph = -1 Field Value Type Description int Properties CurrentParagraph Get or set if the index of the current paragraph. Declaration public int CurrentParagraph { get; set; } Property Value Type Description int Methods FromConversation(Conversation) Create a new serialization from a Conversation. Declaration public static ConversationSerialization FromConversation(Conversation conversation) Parameters Type Name Description Conversation conversation The Conversation to create the serialization from. Returns Type Description ConversationSerialization The serialization."
  },
  "api/NetAF.Serialization.Assets.ExaminableSerialization.html": {
    "href": "api/NetAF.Serialization.Assets.ExaminableSerialization.html",
    "title": "Class ExaminableSerialization | NetAF",
    "summary": "Class ExaminableSerialization Represents a serialization of an Examinable. Inheritance object ExaminableSerialization CharacterSerialization ExitSerialization ItemSerialization OverworldSerialization RegionSerialization RoomSerialization Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Serialization.Assets Assembly: NetAF.dll Syntax public class ExaminableSerialization Properties AttributeManager Get or set the attribute manager serializations. Declaration public AttributeManagerSerialization AttributeManager { get; set; } Property Value Type Description AttributeManagerSerialization Commands Get or set the command serializations. Declaration public CustomCommandSerialization[] Commands { get; set; } Property Value Type Description CustomCommandSerialization[] Identifier Get or set the identifier. Declaration public string Identifier { get; set; } Property Value Type Description string IsPlayerVisible Get or set if it is player visible. Declaration public bool IsPlayerVisible { get; set; } Property Value Type Description bool Methods FromIExaminable(IExaminable) Create a new serialization from an IExaminable. Declaration public static ExaminableSerialization FromIExaminable(IExaminable examinable) Parameters Type Name Description IExaminable examinable The IExaminable to create the serialization from. Returns Type Description ExaminableSerialization The serialization."
  },
  "api/NetAF.Serialization.Assets.ExitSerialization.html": {
    "href": "api/NetAF.Serialization.Assets.ExitSerialization.html",
    "title": "Class ExitSerialization | NetAF",
    "summary": "Class ExitSerialization Represents a serialization of an Exit. Inheritance object ExaminableSerialization ExitSerialization Inherited Members ExaminableSerialization.Identifier ExaminableSerialization.IsPlayerVisible ExaminableSerialization.AttributeManager ExaminableSerialization.Commands ExaminableSerialization.FromIExaminable(IExaminable) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Serialization.Assets Assembly: NetAF.dll Syntax public sealed class ExitSerialization : ExaminableSerialization Properties IsLocked Get or set if the exit is locked. Declaration public bool IsLocked { get; set; } Property Value Type Description bool Methods FromExit(Exit) Create a new serialization from an Exit. Declaration public static ExitSerialization FromExit(Exit exit) Parameters Type Name Description Exit exit The Exit to create the serialization from. Returns Type Description ExitSerialization The serialization."
  },
  "api/NetAF.Serialization.Assets.ItemSerialization.html": {
    "href": "api/NetAF.Serialization.Assets.ItemSerialization.html",
    "title": "Class ItemSerialization | NetAF",
    "summary": "Class ItemSerialization Represents a serialization of an Item. Inheritance object ExaminableSerialization ItemSerialization Inherited Members ExaminableSerialization.Identifier ExaminableSerialization.IsPlayerVisible ExaminableSerialization.AttributeManager ExaminableSerialization.Commands ExaminableSerialization.FromIExaminable(IExaminable) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Serialization.Assets Assembly: NetAF.dll Syntax public sealed class ItemSerialization : ExaminableSerialization Methods FromItem(Item) Create a new serialization from an Item. Declaration public static ItemSerialization FromItem(Item item) Parameters Type Name Description Item item The Item to create the serialization from. Returns Type Description ItemSerialization The serialization."
  },
  "api/NetAF.Serialization.Assets.NonPlayableCharacterSerialization.html": {
    "href": "api/NetAF.Serialization.Assets.NonPlayableCharacterSerialization.html",
    "title": "Class NonPlayableCharacterSerialization | NetAF",
    "summary": "Class NonPlayableCharacterSerialization Represents a serialization of a NonPlayableCharacter. Inheritance object ExaminableSerialization CharacterSerialization NonPlayableCharacterSerialization Inherited Members CharacterSerialization.Items CharacterSerialization.IsAlive CharacterSerialization.FromCharacter(Character) ExaminableSerialization.Identifier ExaminableSerialization.IsPlayerVisible ExaminableSerialization.AttributeManager ExaminableSerialization.Commands ExaminableSerialization.FromIExaminable(IExaminable) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Serialization.Assets Assembly: NetAF.dll Syntax public sealed class NonPlayableCharacterSerialization : CharacterSerialization Properties Conversation Get or set the conversation serialization. Declaration public ConversationSerialization Conversation { get; set; } Property Value Type Description ConversationSerialization Methods FromNonPlayableCharacter(NonPlayableCharacter) Create a new serialization from a NonPlayableCharacter. Declaration public static NonPlayableCharacterSerialization FromNonPlayableCharacter(NonPlayableCharacter nonPlayableCharacter) Parameters Type Name Description NonPlayableCharacter nonPlayableCharacter The NonPlayableCharacter to create the serialization from. Returns Type Description NonPlayableCharacterSerialization The serialization."
  },
  "api/NetAF.Serialization.Assets.NoteEntrySerialization.html": {
    "href": "api/NetAF.Serialization.Assets.NoteEntrySerialization.html",
    "title": "Class NoteEntrySerialization | NetAF",
    "summary": "Class NoteEntrySerialization Represents a serialization of a NoteEntry. Inheritance object NoteEntrySerialization Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Serialization.Assets Assembly: NetAF.dll Syntax public sealed class NoteEntrySerialization Properties Content Get or set the content. Declaration public string Content { get; set; } Property Value Type Description string HasExpired Get or set if this has expired. Declaration public bool HasExpired { get; set; } Property Value Type Description bool Name Get or set the name. Declaration public string Name { get; set; } Property Value Type Description string Methods FromNoteEntry(NoteEntry) Create a new serialization from a NoteEntry. Declaration public static NoteEntrySerialization FromNoteEntry(NoteEntry noteEntry) Parameters Type Name Description NoteEntry noteEntry The NoteEntry to create the serialization from. Returns Type Description NoteEntrySerialization The serialization."
  },
  "api/NetAF.Serialization.Assets.NoteManagerSerialization.html": {
    "href": "api/NetAF.Serialization.Assets.NoteManagerSerialization.html",
    "title": "Class NoteManagerSerialization | NetAF",
    "summary": "Class NoteManagerSerialization Represents a serialization of a NoteManager. Inheritance object NoteManagerSerialization Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Serialization.Assets Assembly: NetAF.dll Syntax public sealed class NoteManagerSerialization Properties Entries Get or set the entries. Declaration public List<NoteEntrySerialization> Entries { get; set; } Property Value Type Description List<NoteEntrySerialization> Methods FromNoteManager(NoteManager) Create a new serialization from an NoteManager. Declaration public static NoteManagerSerialization FromNoteManager(NoteManager noteManager) Parameters Type Name Description NoteManager noteManager The NoteManager to create the serialization from. Returns Type Description NoteManagerSerialization The serialization."
  },
  "api/NetAF.Serialization.Assets.OverworldSerialization.html": {
    "href": "api/NetAF.Serialization.Assets.OverworldSerialization.html",
    "title": "Class OverworldSerialization | NetAF",
    "summary": "Class OverworldSerialization Represents a serialization of an Overworld. Inheritance object ExaminableSerialization OverworldSerialization Inherited Members ExaminableSerialization.Identifier ExaminableSerialization.IsPlayerVisible ExaminableSerialization.AttributeManager ExaminableSerialization.Commands ExaminableSerialization.FromIExaminable(IExaminable) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Serialization.Assets Assembly: NetAF.dll Syntax public sealed class OverworldSerialization : ExaminableSerialization Properties CurrentRegion Get or set the current region. Declaration public string CurrentRegion { get; set; } Property Value Type Description string Regions Get or set the region serializations. Declaration public RegionSerialization[] Regions { get; set; } Property Value Type Description RegionSerialization[] Methods FromOverworld(Overworld) Create a new serialization from an Overworld. Declaration public static OverworldSerialization FromOverworld(Overworld overworld) Parameters Type Name Description Overworld overworld The Overworld to create the serialization from. Returns Type Description OverworldSerialization The serialization."
  },
  "api/NetAF.Serialization.Assets.PlayableCharacterLocationSerialization.html": {
    "href": "api/NetAF.Serialization.Assets.PlayableCharacterLocationSerialization.html",
    "title": "Class PlayableCharacterLocationSerialization | NetAF",
    "summary": "Class PlayableCharacterLocationSerialization Represents a serialization of a PlayableCharacterLocation. Inheritance object PlayableCharacterLocationSerialization Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Serialization.Assets Assembly: NetAF.dll Syntax public sealed class PlayableCharacterLocationSerialization Properties PlayerIdentifier Get or set the player identifier. Declaration public string PlayerIdentifier { get; set; } Property Value Type Description string RegionIdentifier Get or set the region identifier. Declaration public string RegionIdentifier { get; set; } Property Value Type Description string RoomIdentifier Get or set the room identifier. Declaration public string RoomIdentifier { get; set; } Property Value Type Description string Methods FromPlayableCharacterLocation(PlayableCharacterLocation) Create a new serialization from a PlayableCharacterLocation. Declaration public static PlayableCharacterLocationSerialization FromPlayableCharacterLocation(PlayableCharacterLocation playableCharacterLocation) Parameters Type Name Description PlayableCharacterLocation playableCharacterLocation The PlayableCharacterLocation to create the serialization from. Returns Type Description PlayableCharacterLocationSerialization The serialization."
  },
  "api/NetAF.Serialization.Assets.RegionSerialization.html": {
    "href": "api/NetAF.Serialization.Assets.RegionSerialization.html",
    "title": "Class RegionSerialization | NetAF",
    "summary": "Class RegionSerialization Represents a serialization of a Region. Inheritance object ExaminableSerialization RegionSerialization Inherited Members ExaminableSerialization.Identifier ExaminableSerialization.IsPlayerVisible ExaminableSerialization.AttributeManager ExaminableSerialization.Commands ExaminableSerialization.FromIExaminable(IExaminable) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Serialization.Assets Assembly: NetAF.dll Syntax public sealed class RegionSerialization : ExaminableSerialization Properties CurrentRoom Get or set the current room. Declaration public string CurrentRoom { get; set; } Property Value Type Description string IsVisibleWithoutDiscovery Get or set if the region is visible without discovery. Declaration public bool IsVisibleWithoutDiscovery { get; set; } Property Value Type Description bool Rooms Get or set the room serializations. Declaration public RoomSerialization[] Rooms { get; set; } Property Value Type Description RoomSerialization[] Methods FromRegion(Region) Create a new serialization from a Region. Declaration public static RegionSerialization FromRegion(Region region) Parameters Type Name Description Region region The Region to create the serialization from. Returns Type Description RegionSerialization The serialization."
  },
  "api/NetAF.Serialization.Assets.RoomSerialization.html": {
    "href": "api/NetAF.Serialization.Assets.RoomSerialization.html",
    "title": "Class RoomSerialization | NetAF",
    "summary": "Class RoomSerialization Represents a serialization of a Room. Inheritance object ExaminableSerialization RoomSerialization Inherited Members ExaminableSerialization.Identifier ExaminableSerialization.IsPlayerVisible ExaminableSerialization.AttributeManager ExaminableSerialization.Commands ExaminableSerialization.FromIExaminable(IExaminable) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Serialization.Assets Assembly: NetAF.dll Syntax public sealed class RoomSerialization : ExaminableSerialization Properties Characters Get or set the character serializations. Declaration public NonPlayableCharacterSerialization[] Characters { get; set; } Property Value Type Description NonPlayableCharacterSerialization[] Exits Get or set the exit serializations. Declaration public ExitSerialization[] Exits { get; set; } Property Value Type Description ExitSerialization[] HasBeenVisited Get or set if the room has been visited. Declaration public bool HasBeenVisited { get; set; } Property Value Type Description bool Items Get or set the item serializations. Declaration public ItemSerialization[] Items { get; set; } Property Value Type Description ItemSerialization[] Methods FromRoom(Room) Create a new serialization from a Room. Declaration public static RoomSerialization FromRoom(Room room) Parameters Type Name Description Room room The Room to create the serialization from. Returns Type Description RoomSerialization The serialization."
  },
  "api/NetAF.Serialization.Assets.html": {
    "href": "api/NetAF.Serialization.Assets.html",
    "title": "Namespace NetAF.Serialization.Assets | NetAF",
    "summary": "Namespace NetAF.Serialization.Assets Classes AttributeAndValueSerialization Represents a serialization of a KeyValuePair where key is an Attribute and value is a int. AttributeManagerSerialization Represents a serialization of an AttributeManager. CharacterSerialization Represents a serialization of a Character. ConversationSerialization Represents a serialization of a Conversation. ExaminableSerialization Represents a serialization of an Examinable. ExitSerialization Represents a serialization of an Exit. ItemSerialization Represents a serialization of an Item. NonPlayableCharacterSerialization Represents a serialization of a NonPlayableCharacter. NoteEntrySerialization Represents a serialization of a NoteEntry. NoteManagerSerialization Represents a serialization of a NoteManager. OverworldSerialization Represents a serialization of an Overworld. PlayableCharacterLocationSerialization Represents a serialization of a PlayableCharacterLocation. RegionSerialization Represents a serialization of a Region. RoomSerialization Represents a serialization of a Room."
  },
  "api/NetAF.Serialization.CustomCommandSerialization.html": {
    "href": "api/NetAF.Serialization.CustomCommandSerialization.html",
    "title": "Class CustomCommandSerialization | NetAF",
    "summary": "Class CustomCommandSerialization Represents a serialization of a CustomCommand. Inheritance object CustomCommandSerialization Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Serialization Assembly: NetAF.dll Syntax public class CustomCommandSerialization Properties CommandName Get or set the command name. Declaration public string CommandName { get; set; } Property Value Type Description string IsPlayerVisible Get or set if it is player visible. Declaration public bool IsPlayerVisible { get; set; } Property Value Type Description bool Prompts Get or set the prompts. Declaration public string[] Prompts { get; set; } Property Value Type Description string[] Methods FromCustomCommand(CustomCommand) Create a new serialization from a CustomCommand. Declaration public static CustomCommandSerialization FromCustomCommand(CustomCommand customCommand) Parameters Type Name Description CustomCommand customCommand The CustomCommand to create the serialization from. Returns Type Description CustomCommandSerialization The serialization."
  },
  "api/NetAF.Serialization.GameSerialization.html": {
    "href": "api/NetAF.Serialization.GameSerialization.html",
    "title": "Class GameSerialization | NetAF",
    "summary": "Class GameSerialization Represents a serialization of a Game. Inheritance object GameSerialization Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Serialization Assembly: NetAF.dll Syntax public class GameSerialization Properties ActivePlayerIdentifier Get or set the active player identifier. Declaration public string ActivePlayerIdentifier { get; set; } Property Value Type Description string InactivePlayerLocations Get or set the overworld serialization. Declaration public PlayableCharacterLocationSerialization[] InactivePlayerLocations { get; set; } Property Value Type Description PlayableCharacterLocationSerialization[] NoteManager Get or set the note manager serialization. Declaration public NoteManagerSerialization NoteManager { get; set; } Property Value Type Description NoteManagerSerialization Overworld Get or set the overworld serialization. Declaration public OverworldSerialization Overworld { get; set; } Property Value Type Description OverworldSerialization Players Get or set the player serializations. Declaration public CharacterSerialization[] Players { get; set; } Property Value Type Description CharacterSerialization[] Methods FromGame(Game) Create a new serialization from a Game. Declaration public static GameSerialization FromGame(Game game) Parameters Type Name Description Game game The Game to create the serialization from. Returns Type Description GameSerialization The serialization."
  },
  "api/NetAF.Serialization.html": {
    "href": "api/NetAF.Serialization.html",
    "title": "Namespace NetAF.Serialization | NetAF",
    "summary": "Namespace NetAF.Serialization Classes CustomCommandSerialization Represents a serialization of a CustomCommand. GameSerialization Represents a serialization of a Game."
  },
  "api/NetAF.Targets.Console.ConsoleAdapter.html": {
    "href": "api/NetAF.Targets.Console.ConsoleAdapter.html",
    "title": "Class ConsoleAdapter | NetAF",
    "summary": "Class ConsoleAdapter Provides an adapter for the System.Console. Inheritance object ConsoleAdapter Implements IIOAdapter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Targets.Console Assembly: NetAF.dll Syntax public sealed class ConsoleAdapter : IIOAdapter Methods RenderFrame(IFrame) Render a frame. Declaration public void RenderFrame(IFrame frame) Parameters Type Name Description IFrame frame The frame to render. Setup(Game) Setup for a game. Declaration public void Setup(Game game) Parameters Type Name Description Game game The game to set up for. Implements IIOAdapter"
  },
  "api/NetAF.Targets.Console.ConsoleExecutionController.html": {
    "href": "api/NetAF.Targets.Console.ConsoleExecutionController.html",
    "title": "Class ConsoleExecutionController | NetAF",
    "summary": "Class ConsoleExecutionController Controls the automation of a game targeting the System.Console. Inheritance object ConsoleExecutionController Implements IGameExecutionAutomationController Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Targets.Console Assembly: NetAF.dll Syntax public class ConsoleExecutionController : IGameExecutionAutomationController Methods BeginAsync(Game) Begin execution of a game, asynchronously. Declaration public Task BeginAsync(Game game) Parameters Type Name Description Game game Returns Type Description Task The task. CancelAsync() Cancel execution, asynchronously. Declaration public Task CancelAsync() Returns Type Description Task The task. ~ConsoleExecutionController() Handle destruction of the ConsoleExecutionController. Declaration protected ~ConsoleExecutionController() WaitForInputAsync(CancellationToken) Wait for input asynchronously. Declaration public static Task<string> WaitForInputAsync(CancellationToken token) Parameters Type Name Description CancellationToken token The cancellation token. Returns Type Description Task<string> The input. Implements IGameExecutionAutomationController"
  },
  "api/NetAF.Targets.Console.Rendering.Ansi.html": {
    "href": "api/NetAF.Targets.Console.Rendering.Ansi.html",
    "title": "Class Ansi | NetAF",
    "summary": "Class Ansi Provides helper functions for ANSI colors. Inheritance object Ansi Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Targets.Console.Rendering Assembly: NetAF.dll Syntax public static class Ansi Fields ANSI_HIDE_CURSOR Get the ANSI escape sequence to hide the cursor. Declaration public const string ANSI_HIDE_CURSOR = \"\\u001b[?25l\" Field Value Type Description string ANSI_SHOW_CURSOR Get the ANSI escape sequence to show the cursor. Declaration public const string ANSI_SHOW_CURSOR = \"\\u001b[?25h\" Field Value Type Description string NO_COLOR Get the value for the NO_COLOR environment variable. Declaration public const string NO_COLOR = \"NO_COLOR\" Field Value Type Description string Methods GetAnsiBackgroundEscapeSequence(AnsiColor) Get an ANSI escape sequence for a background color. Declaration public static string GetAnsiBackgroundEscapeSequence(AnsiColor color) Parameters Type Name Description AnsiColor color The background color. Returns Type Description string The ANSI escape sequence. GetAnsiBackgroundEscapeSequence(byte, byte, byte) Get an ANSI escape sequence for a background color. Declaration public static string GetAnsiBackgroundEscapeSequence(byte r, byte g, byte b) Parameters Type Name Description byte r The red channel. byte g The green channel. byte b The blue channel. Returns Type Description string The ANSI escape sequence. GetAnsiForegroundEscapeSequence(AnsiColor) Get an ANSI escape sequence for a foreground color. Declaration public static string GetAnsiForegroundEscapeSequence(AnsiColor color) Parameters Type Name Description AnsiColor color The foreground color. Returns Type Description string The ANSI escape sequence. GetAnsiForegroundEscapeSequence(byte, byte, byte) Get an ANSI escape sequence for a foreground color. Declaration public static string GetAnsiForegroundEscapeSequence(byte r, byte g, byte b) Parameters Type Name Description byte r The red channel. byte g The green channel. byte b The blue channel. Returns Type Description string The ANSI escape sequence. IsColorSuppressed() Determine if color is suppressed. If the NO_COLOR environment variable is present and set to anything other than '0' or 'false' this will return true. Declaration public static bool IsColorSuppressed() Returns Type Description bool True if the NO_COLOR environment variable is present and set to anything other than an empty string, else false."
  },
  "api/NetAF.Targets.Console.Rendering.AnsiCell.html": {
    "href": "api/NetAF.Targets.Console.Rendering.AnsiCell.html",
    "title": "Class AnsiCell | NetAF",
    "summary": "Class AnsiCell Represents a cell containing ANSI data. Inheritance object AnsiCell Implements IEquatable<AnsiCell> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Targets.Console.Rendering Assembly: NetAF.dll Syntax public record AnsiCell : IEquatable<AnsiCell> Constructors AnsiCell(char, AnsiColor, AnsiColor) Represents a cell containing ANSI data. Declaration public AnsiCell(char Character, AnsiColor Foreground, AnsiColor Background) Parameters Type Name Description char Character The character contained in the cell. AnsiColor Foreground The foreground of the cell. AnsiColor Background The background of the cell. Properties Background The background of the cell. Declaration public AnsiColor Background { get; init; } Property Value Type Description AnsiColor Character The character contained in the cell. Declaration public char Character { get; init; } Property Value Type Description char Foreground The foreground of the cell. Declaration public AnsiColor Foreground { get; init; } Property Value Type Description AnsiColor Implements IEquatable<T>"
  },
  "api/NetAF.Targets.Console.Rendering.AnsiColor.html": {
    "href": "api/NetAF.Targets.Console.Rendering.AnsiColor.html",
    "title": "Struct AnsiColor | NetAF",
    "summary": "Struct AnsiColor Represents an ANSI color. Implements IEquatable<AnsiColor> Inherited Members ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: NetAF.Targets.Console.Rendering Assembly: NetAF.dll Syntax public struct AnsiColor : IEquatable<AnsiColor> Constructors AnsiColor(byte, byte, byte) Represents an ANSI color. Declaration public AnsiColor(byte r, byte g, byte b) Parameters Type Name Description byte r The red channel. byte g The green channel. byte b The blue channel. Properties B Get the blue channel. Declaration public readonly byte B { get; } Property Value Type Description byte Black Black. Declaration public static AnsiColor Black { get; } Property Value Type Description AnsiColor Blue Blue. Declaration public static AnsiColor Blue { get; } Property Value Type Description AnsiColor BrightBlack Bright black. Declaration public static AnsiColor BrightBlack { get; } Property Value Type Description AnsiColor BrightBlue Bright blue. Declaration public static AnsiColor BrightBlue { get; } Property Value Type Description AnsiColor BrightCyan Bright cyan. Declaration public static AnsiColor BrightCyan { get; } Property Value Type Description AnsiColor BrightGreen Bright green. Declaration public static AnsiColor BrightGreen { get; } Property Value Type Description AnsiColor BrightMagenta Bright magenta. Declaration public static AnsiColor BrightMagenta { get; } Property Value Type Description AnsiColor BrightRed Bright red. Declaration public static AnsiColor BrightRed { get; } Property Value Type Description AnsiColor BrightWhite Bright white. Declaration public static AnsiColor BrightWhite { get; } Property Value Type Description AnsiColor BrightYellow Bright yellow. Declaration public static AnsiColor BrightYellow { get; } Property Value Type Description AnsiColor Cyan Cyan. Declaration public static AnsiColor Cyan { get; } Property Value Type Description AnsiColor G Get the green channel. Declaration public readonly byte G { get; } Property Value Type Description byte Green Green. Declaration public static AnsiColor Green { get; } Property Value Type Description AnsiColor Magenta Magenta. Declaration public static AnsiColor Magenta { get; } Property Value Type Description AnsiColor R Get the red channel. Declaration public readonly byte R { get; } Property Value Type Description byte Red Red. Declaration public static AnsiColor Red { get; } Property Value Type Description AnsiColor White White. Declaration public static AnsiColor White { get; } Property Value Type Description AnsiColor Yellow Yellow Declaration public static AnsiColor Yellow { get; } Property Value Type Description AnsiColor Methods Equals(AnsiColor) Indicates whether the current object is equal to another object of the same type. Declaration public readonly bool Equals(AnsiColor other) Parameters Type Name Description AnsiColor other An object to compare with this object. Returns Type Description bool true if the current object is equal to the other parameter; otherwise, false. Equals(object) Indicates whether the current object is equal to another object of the same type. Declaration public override readonly bool Equals(object obj) Parameters Type Name Description object obj An object to compare with this object. Returns Type Description bool true if the current object is equal to the obj parameter; otherwise, false. Overrides ValueType.Equals(object) GetHashCode() Serves as the default hash function. Declaration public override readonly int GetHashCode() Returns Type Description int A hash code for the current object. Overrides ValueType.GetHashCode() ToGray() Convert this color to the nearest gray. Declaration public AnsiColor ToGray() Returns Type Description AnsiColor The nearest gray. Operators operator ==(AnsiColor, AnsiColor) Determines whether two specified AnsiColors have the same value. Declaration public static bool operator ==(AnsiColor left, AnsiColor right) Parameters Type Name Description AnsiColor left The left argument. AnsiColor right The right argument. Returns Type Description bool operator !=(AnsiColor, AnsiColor) Determines whether two specified AnsiColors have different values. Declaration public static bool operator !=(AnsiColor left, AnsiColor right) Parameters Type Name Description AnsiColor left The left argument. AnsiColor right The right argument. Returns Type Description bool Implements IEquatable<T>"
  },
  "api/NetAF.Targets.Console.Rendering.FrameBuilders.ConsoleAboutFrameBuilder.html": {
    "href": "api/NetAF.Targets.Console.Rendering.FrameBuilders.ConsoleAboutFrameBuilder.html",
    "title": "Class ConsoleAboutFrameBuilder | NetAF",
    "summary": "Class ConsoleAboutFrameBuilder Provides a builder of console about frames. Inheritance object ConsoleAboutFrameBuilder Implements IAboutFrameBuilder IFrameBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Targets.Console.Rendering.FrameBuilders Assembly: NetAF.dll Syntax public sealed class ConsoleAboutFrameBuilder : IAboutFrameBuilder, IFrameBuilder Constructors ConsoleAboutFrameBuilder(GridStringBuilder) Provides a builder of console about frames. Declaration public ConsoleAboutFrameBuilder(GridStringBuilder gridStringBuilder) Parameters Type Name Description GridStringBuilder gridStringBuilder A builder to use for the string layout. Properties AuthorColor Get or set the author color. Declaration public AnsiColor AuthorColor { get; set; } Property Value Type Description AnsiColor BackgroundColor Get or set the background color. Declaration public AnsiColor BackgroundColor { get; set; } Property Value Type Description AnsiColor BorderColor Get or set the border color. Declaration public AnsiColor BorderColor { get; set; } Property Value Type Description AnsiColor DescriptionColor Get or set the description color. Declaration public AnsiColor DescriptionColor { get; set; } Property Value Type Description AnsiColor NameColor Get or set the name color. Declaration public AnsiColor NameColor { get; set; } Property Value Type Description AnsiColor TitleColor Get or set the title color. Declaration public AnsiColor TitleColor { get; set; } Property Value Type Description AnsiColor Methods Build(string, Game, Size) Build a frame. Declaration public IFrame Build(string title, Game game, Size size) Parameters Type Name Description string title The title. Game game The game. Size size The size of the frame. Returns Type Description IFrame The frame. Implements IAboutFrameBuilder IFrameBuilder"
  },
  "api/NetAF.Targets.Console.Rendering.FrameBuilders.ConsoleBasicRoomMapBuilder.html": {
    "href": "api/NetAF.Targets.Console.Rendering.FrameBuilders.ConsoleBasicRoomMapBuilder.html",
    "title": "Class ConsoleBasicRoomMapBuilder | NetAF",
    "summary": "Class ConsoleBasicRoomMapBuilder Provides an basic room map builder. Inheritance object ConsoleBasicRoomMapBuilder Implements IConsoleRoomMapBuilder IRoomMapBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Targets.Console.Rendering.FrameBuilders Assembly: NetAF.dll Syntax public sealed class ConsoleBasicRoomMapBuilder : IConsoleRoomMapBuilder, IRoomMapBuilder Constructors ConsoleBasicRoomMapBuilder(GridStringBuilder) Provides an basic room map builder. Declaration public ConsoleBasicRoomMapBuilder(GridStringBuilder gridStringBuilder) Parameters Type Name Description GridStringBuilder gridStringBuilder The grid string builder. Properties BoundaryColor Get or set the room boundary color. Declaration public AnsiColor BoundaryColor { get; set; } Property Value Type Description AnsiColor EmptySpace Get or set the character used for representing an empty space. Declaration public char EmptySpace { get; set; } Property Value Type Description char HorizontalBoundary Get or set the character to use for horizontal boundaries. Declaration public char HorizontalBoundary { get; set; } Property Value Type Description char KeyPadding Get or set the padding between the key and the map. Declaration public int KeyPadding { get; set; } Property Value Type Description int LockedExit Get or set the character used for representing a locked exit. Declaration public char LockedExit { get; set; } Property Value Type Description char LockedExitColor Get or set the locked exit color. Declaration public AnsiColor LockedExitColor { get; set; } Property Value Type Description AnsiColor RenderedSize Get the rendered size of the room, excluding any keys. Declaration public Size RenderedSize { get; } Property Value Type Description Size UnLockedExit Get or set the character used for representing an unlocked exit. Declaration public char UnLockedExit { get; set; } Property Value Type Description char VerticalBoundary Get or set the character to use for vertical boundaries. Declaration public char VerticalBoundary { get; set; } Property Value Type Description char Methods BuildRoomMap(Room, ViewPoint, KeyType) Build a map for a room. Declaration public void BuildRoomMap(Room room, ViewPoint viewPoint, KeyType key) Parameters Type Name Description Room room The room. ViewPoint viewPoint The viewpoint from the room. KeyType key The key type. BuildRoomMap(Room, ViewPoint, KeyType, Point2D, out int, out int) Build a map for a room. Declaration public void BuildRoomMap(Room room, ViewPoint viewPoint, KeyType key, Point2D startPosition, out int endX, out int endY) Parameters Type Name Description Room room The room. ViewPoint viewPoint The viewpoint from the room. KeyType key The key type. Point2D startPosition The start position. int endX The end position, x. int endY The end position, x. Implements IConsoleRoomMapBuilder IRoomMapBuilder"
  },
  "api/NetAF.Targets.Console.Rendering.FrameBuilders.ConsoleCommandListFrameBuilder.html": {
    "href": "api/NetAF.Targets.Console.Rendering.FrameBuilders.ConsoleCommandListFrameBuilder.html",
    "title": "Class ConsoleCommandListFrameBuilder | NetAF",
    "summary": "Class ConsoleCommandListFrameBuilder Provides a builder of command list frames. Inheritance object ConsoleCommandListFrameBuilder Implements ICommandListFrameBuilder IFrameBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Targets.Console.Rendering.FrameBuilders Assembly: NetAF.dll Syntax public sealed class ConsoleCommandListFrameBuilder : ICommandListFrameBuilder, IFrameBuilder Constructors ConsoleCommandListFrameBuilder(GridStringBuilder) Provides a builder of command list frames. Declaration public ConsoleCommandListFrameBuilder(GridStringBuilder gridStringBuilder) Parameters Type Name Description GridStringBuilder gridStringBuilder A builder to use for the string layout. Properties BackgroundColor Get or set the background color. Declaration public AnsiColor BackgroundColor { get; set; } Property Value Type Description AnsiColor BorderColor Get or set the border color. Declaration public AnsiColor BorderColor { get; set; } Property Value Type Description AnsiColor CommandColor Get or set the command color. Declaration public AnsiColor CommandColor { get; set; } Property Value Type Description AnsiColor CommandDescriptionColor Get or set the description color. Declaration public AnsiColor CommandDescriptionColor { get; set; } Property Value Type Description AnsiColor DescriptionColor Get or set the description color. Declaration public AnsiColor DescriptionColor { get; set; } Property Value Type Description AnsiColor TitleColor Get or set the title color. Declaration public AnsiColor TitleColor { get; set; } Property Value Type Description AnsiColor Methods Build(string, string, CommandHelp[], Size) Build a frame. Declaration public IFrame Build(string title, string description, CommandHelp[] commandHelp, Size size) Parameters Type Name Description string title The title. string description The description. CommandHelp[] commandHelp The command help. Size size The size of the frame. Returns Type Description IFrame The frame. Implements ICommandListFrameBuilder IFrameBuilder"
  },
  "api/NetAF.Targets.Console.Rendering.FrameBuilders.ConsoleCompletionFrameBuilder.html": {
    "href": "api/NetAF.Targets.Console.Rendering.FrameBuilders.ConsoleCompletionFrameBuilder.html",
    "title": "Class ConsoleCompletionFrameBuilder | NetAF",
    "summary": "Class ConsoleCompletionFrameBuilder Provides a builder of completion frames. Inheritance object ConsoleCompletionFrameBuilder Implements ICompletionFrameBuilder IFrameBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Targets.Console.Rendering.FrameBuilders Assembly: NetAF.dll Syntax public sealed class ConsoleCompletionFrameBuilder : ICompletionFrameBuilder, IFrameBuilder Constructors ConsoleCompletionFrameBuilder(GridStringBuilder) Provides a builder of completion frames. Declaration public ConsoleCompletionFrameBuilder(GridStringBuilder gridStringBuilder) Parameters Type Name Description GridStringBuilder gridStringBuilder A builder to use for the string layout. Properties BackgroundColor Get or set the background color. Declaration public AnsiColor BackgroundColor { get; set; } Property Value Type Description AnsiColor BorderColor Get or set the border color. Declaration public AnsiColor BorderColor { get; set; } Property Value Type Description AnsiColor DescriptionColor Get or set the description color. Declaration public AnsiColor DescriptionColor { get; set; } Property Value Type Description AnsiColor TitleColor Get or set the title color. Declaration public AnsiColor TitleColor { get; set; } Property Value Type Description AnsiColor Methods Build(string, string, Size) Build a frame. Declaration public IFrame Build(string message, string reason, Size size) Parameters Type Name Description string message The message to display to the user. string reason The reason the game ended. Size size The size of the frame. Returns Type Description IFrame The frame. Implements ICompletionFrameBuilder IFrameBuilder"
  },
  "api/NetAF.Targets.Console.Rendering.FrameBuilders.ConsoleConversationFrameBuilder.html": {
    "href": "api/NetAF.Targets.Console.Rendering.FrameBuilders.ConsoleConversationFrameBuilder.html",
    "title": "Class ConsoleConversationFrameBuilder | NetAF",
    "summary": "Class ConsoleConversationFrameBuilder Provides a builder of conversation frames. Inheritance object ConsoleConversationFrameBuilder Implements IConversationFrameBuilder IFrameBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Targets.Console.Rendering.FrameBuilders Assembly: NetAF.dll Syntax public sealed class ConsoleConversationFrameBuilder : IConversationFrameBuilder, IFrameBuilder Constructors ConsoleConversationFrameBuilder(GridStringBuilder, bool) Provides a builder of conversation frames. Declaration public ConsoleConversationFrameBuilder(GridStringBuilder gridStringBuilder, bool renderPrompt = true) Parameters Type Name Description GridStringBuilder gridStringBuilder A builder to use for the string layout. bool renderPrompt Specify if the prompt should be rendered. Properties BackgroundColor Get or set the background color. Declaration public AnsiColor BackgroundColor { get; set; } Property Value Type Description AnsiColor BorderColor Get or set the border color. Declaration public AnsiColor BorderColor { get; set; } Property Value Type Description AnsiColor CommandTitle Get or set the command title. Declaration public string CommandTitle { get; set; } Property Value Type Description string InputColor Get or set the input color. Declaration public AnsiColor InputColor { get; set; } Property Value Type Description AnsiColor NonPlayerMessageColor Get or set the player message color. Declaration public AnsiColor NonPlayerMessageColor { get; set; } Property Value Type Description AnsiColor PlayerMessageColor Get or set the player message color. Declaration public AnsiColor PlayerMessageColor { get; set; } Property Value Type Description AnsiColor ResponseColor Get or set the response color. Declaration public AnsiColor ResponseColor { get; set; } Property Value Type Description AnsiColor TitleColor Get or set the title color. Declaration public AnsiColor TitleColor { get; set; } Property Value Type Description AnsiColor Methods Build(string, IConverser, CommandHelp[], Size) Build a frame. Declaration public IFrame Build(string title, IConverser converser, CommandHelp[] contextualCommands, Size size) Parameters Type Name Description string title The title to display to the user. IConverser converser The converser. CommandHelp[] contextualCommands The contextual commands to display. Size size The size of the frame. Returns Type Description IFrame The frame. Implements IConversationFrameBuilder IFrameBuilder"
  },
  "api/NetAF.Targets.Console.Rendering.FrameBuilders.ConsoleGameOverFrameBuilder.html": {
    "href": "api/NetAF.Targets.Console.Rendering.FrameBuilders.ConsoleGameOverFrameBuilder.html",
    "title": "Class ConsoleGameOverFrameBuilder | NetAF",
    "summary": "Class ConsoleGameOverFrameBuilder Provides a builder of game over frames. Inheritance object ConsoleGameOverFrameBuilder Implements IGameOverFrameBuilder IFrameBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Targets.Console.Rendering.FrameBuilders Assembly: NetAF.dll Syntax public sealed class ConsoleGameOverFrameBuilder : IGameOverFrameBuilder, IFrameBuilder Constructors ConsoleGameOverFrameBuilder(GridStringBuilder) Provides a builder of game over frames. Declaration public ConsoleGameOverFrameBuilder(GridStringBuilder gridStringBuilder) Parameters Type Name Description GridStringBuilder gridStringBuilder A builder to use for the string layout. Properties BackgroundColor Get or set the background color. Declaration public AnsiColor BackgroundColor { get; set; } Property Value Type Description AnsiColor BorderColor Get or set the border color. Declaration public AnsiColor BorderColor { get; set; } Property Value Type Description AnsiColor DescriptionColor Get or set the description color. Declaration public AnsiColor DescriptionColor { get; set; } Property Value Type Description AnsiColor TitleColor Get or set the title color. Declaration public AnsiColor TitleColor { get; set; } Property Value Type Description AnsiColor Methods Build(string, string, Size) Build a frame. Declaration public IFrame Build(string message, string reason, Size size) Parameters Type Name Description string message The message to display to the user. string reason The reason the game ended. Size size The size of the frame. Returns Type Description IFrame The frame. Implements IGameOverFrameBuilder IFrameBuilder"
  },
  "api/NetAF.Targets.Console.Rendering.FrameBuilders.ConsoleHelpFrameBuilder.html": {
    "href": "api/NetAF.Targets.Console.Rendering.FrameBuilders.ConsoleHelpFrameBuilder.html",
    "title": "Class ConsoleHelpFrameBuilder | NetAF",
    "summary": "Class ConsoleHelpFrameBuilder Provides a builder of help frames. Inheritance object ConsoleHelpFrameBuilder Implements IHelpFrameBuilder IFrameBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Targets.Console.Rendering.FrameBuilders Assembly: NetAF.dll Syntax public sealed class ConsoleHelpFrameBuilder : IHelpFrameBuilder, IFrameBuilder Constructors ConsoleHelpFrameBuilder(GridStringBuilder) Provides a builder of help frames. Declaration public ConsoleHelpFrameBuilder(GridStringBuilder gridStringBuilder) Parameters Type Name Description GridStringBuilder gridStringBuilder A builder to use for the string layout. Properties BackgroundColor Get or set the background color. Declaration public AnsiColor BackgroundColor { get; set; } Property Value Type Description AnsiColor BorderColor Get or set the border color. Declaration public AnsiColor BorderColor { get; set; } Property Value Type Description AnsiColor CommandColor Get or set the command color. Declaration public AnsiColor CommandColor { get; set; } Property Value Type Description AnsiColor CommandDescriptionColor Get or set the description color. Declaration public AnsiColor CommandDescriptionColor { get; set; } Property Value Type Description AnsiColor PromptsColor Get or set the prompts color. Declaration public AnsiColor PromptsColor { get; set; } Property Value Type Description AnsiColor TitleColor Get or set the title color. Declaration public AnsiColor TitleColor { get; set; } Property Value Type Description AnsiColor Methods Build(string, CommandHelp, Prompt[], Size) Build a frame. Declaration public IFrame Build(string title, CommandHelp commandHelp, Prompt[] prompts, Size size) Parameters Type Name Description string title The title. CommandHelp commandHelp The command help. Prompt[] prompts The prompts to display for the command. Size size The size of the frame. Returns Type Description IFrame The frame. Implements IHelpFrameBuilder IFrameBuilder"
  },
  "api/NetAF.Targets.Console.Rendering.FrameBuilders.ConsoleHistoryFrameBuilder.html": {
    "href": "api/NetAF.Targets.Console.Rendering.FrameBuilders.ConsoleHistoryFrameBuilder.html",
    "title": "Class ConsoleHistoryFrameBuilder | NetAF",
    "summary": "Class ConsoleHistoryFrameBuilder Provides a builder of history frames. Inheritance object ConsoleHistoryFrameBuilder Implements IHistoryFrameBuilder IFrameBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Targets.Console.Rendering.FrameBuilders Assembly: NetAF.dll Syntax public sealed class ConsoleHistoryFrameBuilder : IHistoryFrameBuilder, IFrameBuilder Constructors ConsoleHistoryFrameBuilder(GridStringBuilder) Provides a builder of history frames. Declaration public ConsoleHistoryFrameBuilder(GridStringBuilder gridStringBuilder) Parameters Type Name Description GridStringBuilder gridStringBuilder A builder to use for the string layout. Properties BackgroundColor Get or set the background color. Declaration public AnsiColor BackgroundColor { get; set; } Property Value Type Description AnsiColor BorderColor Get or set the border color. Declaration public AnsiColor BorderColor { get; set; } Property Value Type Description AnsiColor DescriptionColor Get or set the description color. Declaration public AnsiColor DescriptionColor { get; set; } Property Value Type Description AnsiColor EntryColor Get or set the entry color. Declaration public AnsiColor EntryColor { get; set; } Property Value Type Description AnsiColor MaxEntries Get or set the maximum number of entries to be displayed. For unlimited use HistoryManager.NoLimit. Declaration public int MaxEntries { get; set; } Property Value Type Description int TitleColor Get or set the title color. Declaration public AnsiColor TitleColor { get; set; } Property Value Type Description AnsiColor Methods Build(string, string, HistoryEntry[], Size) Build a frame. Declaration public IFrame Build(string title, string description, HistoryEntry[] entries, Size size) Parameters Type Name Description string title The title. string description The description. HistoryEntry[] entries The entries. Size size The size of the frame. Returns Type Description IFrame The frame. Implements IHistoryFrameBuilder IFrameBuilder"
  },
  "api/NetAF.Targets.Console.Rendering.FrameBuilders.ConsoleNoteFrameBuilder.html": {
    "href": "api/NetAF.Targets.Console.Rendering.FrameBuilders.ConsoleNoteFrameBuilder.html",
    "title": "Class ConsoleNoteFrameBuilder | NetAF",
    "summary": "Class ConsoleNoteFrameBuilder Provides a builder of note frames. Inheritance object ConsoleNoteFrameBuilder Implements INoteFrameBuilder IFrameBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Targets.Console.Rendering.FrameBuilders Assembly: NetAF.dll Syntax public sealed class ConsoleNoteFrameBuilder : INoteFrameBuilder, IFrameBuilder Constructors ConsoleNoteFrameBuilder(GridStringBuilder) Provides a builder of note frames. Declaration public ConsoleNoteFrameBuilder(GridStringBuilder gridStringBuilder) Parameters Type Name Description GridStringBuilder gridStringBuilder A builder to use for the string layout. Properties BackgroundColor Get or set the background color. Declaration public AnsiColor BackgroundColor { get; set; } Property Value Type Description AnsiColor BorderColor Get or set the border color. Declaration public AnsiColor BorderColor { get; set; } Property Value Type Description AnsiColor DescriptionColor Get or set the description color. Declaration public AnsiColor DescriptionColor { get; set; } Property Value Type Description AnsiColor EntryColor Get or set the entry color. Declaration public AnsiColor EntryColor { get; set; } Property Value Type Description AnsiColor ExpiredEntryColor Get or set the expired entry color. Declaration public AnsiColor ExpiredEntryColor { get; set; } Property Value Type Description AnsiColor TitleColor Get or set the title color. Declaration public AnsiColor TitleColor { get; set; } Property Value Type Description AnsiColor Methods Build(string, string, NoteEntry[], Size) Build a frame. Declaration public IFrame Build(string title, string description, NoteEntry[] entries, Size size) Parameters Type Name Description string title The title. string description The description. NoteEntry[] entries The entries. Size size The size of the frame. Returns Type Description IFrame The frame. Implements INoteFrameBuilder IFrameBuilder"
  },
  "api/NetAF.Targets.Console.Rendering.FrameBuilders.ConsoleReactionFrameBuilder.html": {
    "href": "api/NetAF.Targets.Console.Rendering.FrameBuilders.ConsoleReactionFrameBuilder.html",
    "title": "Class ConsoleReactionFrameBuilder | NetAF",
    "summary": "Class ConsoleReactionFrameBuilder Provides a builder of reaction frames. Inheritance object ConsoleReactionFrameBuilder Implements IReactionFrameBuilder IFrameBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Targets.Console.Rendering.FrameBuilders Assembly: NetAF.dll Syntax public sealed class ConsoleReactionFrameBuilder : IReactionFrameBuilder, IFrameBuilder Constructors ConsoleReactionFrameBuilder(GridStringBuilder) Provides a builder of reaction frames. Declaration public ConsoleReactionFrameBuilder(GridStringBuilder gridStringBuilder) Parameters Type Name Description GridStringBuilder gridStringBuilder A builder to use for the string layout. Properties BackgroundColor Get or set the background color. Declaration public AnsiColor BackgroundColor { get; set; } Property Value Type Description AnsiColor BorderColor Get or set the border color. Declaration public AnsiColor BorderColor { get; set; } Property Value Type Description AnsiColor ErrorMessageColor Get or set the error message color. Declaration public AnsiColor ErrorMessageColor { get; set; } Property Value Type Description AnsiColor MessageColor Get or set the message color. Declaration public AnsiColor MessageColor { get; set; } Property Value Type Description AnsiColor TitleColor Get or set the title color. Declaration public AnsiColor TitleColor { get; set; } Property Value Type Description AnsiColor Methods Build(string, string, bool, Size) Build a frame. Declaration public IFrame Build(string title, string message, bool isError, Size size) Parameters Type Name Description string title The title to display to the user. string message The message to display to the user. bool isError If the message is an error. Size size The size of the frame. Returns Type Description IFrame The frame. Implements IReactionFrameBuilder IFrameBuilder"
  },
  "api/NetAF.Targets.Console.Rendering.FrameBuilders.ConsoleRegionMapBuilder.html": {
    "href": "api/NetAF.Targets.Console.Rendering.FrameBuilders.ConsoleRegionMapBuilder.html",
    "title": "Class ConsoleRegionMapBuilder | NetAF",
    "summary": "Class ConsoleRegionMapBuilder Provides a builder for region maps. Inheritance object ConsoleRegionMapBuilder Implements IConsoleRegionMapBuilder IRegionMapBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Targets.Console.Rendering.FrameBuilders Assembly: NetAF.dll Syntax public sealed class ConsoleRegionMapBuilder : IConsoleRegionMapBuilder, IRegionMapBuilder Constructors ConsoleRegionMapBuilder(GridStringBuilder) Provides a builder for region maps. Declaration public ConsoleRegionMapBuilder(GridStringBuilder gridStringBuilder) Parameters Type Name Description GridStringBuilder gridStringBuilder The grid string builder. Properties CurrentFloorIndicator Get or set the character to use for the current floor. Declaration public char CurrentFloorIndicator { get; set; } Property Value Type Description char EmptySpace Get or set the character used for representing an empty space. Declaration public char EmptySpace { get; set; } Property Value Type Description char Focus Get or set the character to use for indicating the focus. Declaration public char Focus { get; set; } Property Value Type Description char FocusedBoundaryColor Get or set the focused room boundary color. Declaration public AnsiColor FocusedBoundaryColor { get; set; } Property Value Type Description AnsiColor HorizontalBoundary Get or set the character to use for horizontal boundaries. Declaration public char HorizontalBoundary { get; set; } Property Value Type Description char LockedExit Get or set the character used for representing a locked exit. Declaration public char LockedExit { get; set; } Property Value Type Description char LockedExitColor Get or set the locked exit color. Declaration public AnsiColor LockedExitColor { get; set; } Property Value Type Description AnsiColor LowerLevel Get or set the character to use for lower levels. Declaration public char LowerLevel { get; set; } Property Value Type Description char LowerLevelColor Get or set the lower level color. Declaration public AnsiColor LowerLevelColor { get; set; } Property Value Type Description AnsiColor Player Get or set the character to use for indicating the player. Declaration public char Player { get; set; } Property Value Type Description char PlayerColor Get or set the player color. Declaration public AnsiColor PlayerColor { get; set; } Property Value Type Description AnsiColor ShowLowerFloors Get or set if lower floors should be shown. Declaration public bool ShowLowerFloors { get; set; } Property Value Type Description bool UnLockedExit Get or set the character used for representing an unlocked exit. Declaration public char UnLockedExit { get; set; } Property Value Type Description char UnvisitedBoundaryColor Get or set the unvisited room boundary color. Declaration public AnsiColor UnvisitedBoundaryColor { get; set; } Property Value Type Description AnsiColor VerticalBoundary Get or set the character to use for vertical boundaries. Declaration public char VerticalBoundary { get; set; } Property Value Type Description char VisitedBoundaryColor Get or set the visited room boundary color. Declaration public AnsiColor VisitedBoundaryColor { get; set; } Property Value Type Description AnsiColor Methods BuildRegionMap(Region, Point3D, RegionMapDetail) Build a map of a region. Declaration public void BuildRegionMap(Region region, Point3D focusPosition, RegionMapDetail detail) Parameters Type Name Description Region region The region. Point3D focusPosition The position to focus on. RegionMapDetail detail The level of detail to use. BuildRegionMap(Region, Point3D, RegionMapDetail, Point2D, Size) Build a map of a region. Declaration public void BuildRegionMap(Region region, Point3D focusPosition, RegionMapDetail detail, Point2D startPosition, Size maxSize) Parameters Type Name Description Region region The region. Point3D focusPosition The position to focus on. RegionMapDetail detail The level of detail to use. Point2D startPosition The position to start building at. Size maxSize The maximum size available in which to build the map. Implements IConsoleRegionMapBuilder IRegionMapBuilder"
  },
  "api/NetAF.Targets.Console.Rendering.FrameBuilders.ConsoleRegionMapFrameBuilder.html": {
    "href": "api/NetAF.Targets.Console.Rendering.FrameBuilders.ConsoleRegionMapFrameBuilder.html",
    "title": "Class ConsoleRegionMapFrameBuilder | NetAF",
    "summary": "Class ConsoleRegionMapFrameBuilder Provides a builder of region map frames. Inheritance object ConsoleRegionMapFrameBuilder Implements IRegionMapFrameBuilder IFrameBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Targets.Console.Rendering.FrameBuilders Assembly: NetAF.dll Syntax public sealed class ConsoleRegionMapFrameBuilder : IRegionMapFrameBuilder, IFrameBuilder Constructors ConsoleRegionMapFrameBuilder(GridStringBuilder, IRegionMapBuilder, bool) Provides a builder of region map frames. Declaration public ConsoleRegionMapFrameBuilder(GridStringBuilder gridStringBuilder, IRegionMapBuilder regionMapBuilder, bool renderPrompt = true) Parameters Type Name Description GridStringBuilder gridStringBuilder A builder to use for the string layout. IRegionMapBuilder regionMapBuilder A builder for region maps. bool renderPrompt Specify if the prompt should be rendered. Properties BackgroundColor Get or set the background color. Declaration public AnsiColor BackgroundColor { get; set; } Property Value Type Description AnsiColor BorderColor Get or set the border color. Declaration public AnsiColor BorderColor { get; set; } Property Value Type Description AnsiColor CommandTitle Get or set the command title. Declaration public string CommandTitle { get; set; } Property Value Type Description string CommandsColor Get or set the commands color. Declaration public AnsiColor CommandsColor { get; set; } Property Value Type Description AnsiColor InputColor Get or set the input color. Declaration public AnsiColor InputColor { get; set; } Property Value Type Description AnsiColor SupportsPan Get if this frame builder supports panning. Declaration public bool SupportsPan { get; } Property Value Type Description bool SupportsZoom Get if this frame builder supports zooming. Declaration public bool SupportsZoom { get; } Property Value Type Description bool TitleColor Get or set the title color. Declaration public AnsiColor TitleColor { get; set; } Property Value Type Description AnsiColor Methods Build(Region, Point3D, RegionMapDetail, CommandHelp[], Size) Build a frame. Declaration public IFrame Build(Region region, Point3D focusPosition, RegionMapDetail detail, CommandHelp[] contextualCommands, Size size) Parameters Type Name Description Region region The region. Point3D focusPosition The position to focus on. RegionMapDetail detail The level of detail to use. CommandHelp[] contextualCommands The contextual commands to display. Size size The size of the frame. Returns Type Description IFrame The frame. Implements IRegionMapFrameBuilder IFrameBuilder"
  },
  "api/NetAF.Targets.Console.Rendering.FrameBuilders.ConsoleRoomMapBuilder.html": {
    "href": "api/NetAF.Targets.Console.Rendering.FrameBuilders.ConsoleRoomMapBuilder.html",
    "title": "Class ConsoleRoomMapBuilder | NetAF",
    "summary": "Class ConsoleRoomMapBuilder Provides a room map builder. Inheritance object ConsoleRoomMapBuilder Implements IConsoleRoomMapBuilder IRoomMapBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Targets.Console.Rendering.FrameBuilders Assembly: NetAF.dll Syntax public sealed class ConsoleRoomMapBuilder : IConsoleRoomMapBuilder, IRoomMapBuilder Constructors ConsoleRoomMapBuilder(GridStringBuilder) Provides a room map builder. Declaration public ConsoleRoomMapBuilder(GridStringBuilder gridStringBuilder) Parameters Type Name Description GridStringBuilder gridStringBuilder The grid string builder. Properties BoundaryColor Get or set the room boundary color. Declaration public AnsiColor BoundaryColor { get; set; } Property Value Type Description AnsiColor Corner Get or set the character to use for corners. Declaration public char Corner { get; set; } Property Value Type Description char DisplayDirections Get or set if directions are displayed. Declaration public bool DisplayDirections { get; set; } Property Value Type Description bool HorizontalBoundary Get or set the character to use for horizontal boundaries. Declaration public char HorizontalBoundary { get; set; } Property Value Type Description char HorizontalExitBorder Get or set the character to use for horizontal exit borders. Declaration public char HorizontalExitBorder { get; set; } Property Value Type Description char ItemOrCharacterColor Get or set the item or character color. Declaration public AnsiColor ItemOrCharacterColor { get; set; } Property Value Type Description AnsiColor ItemOrCharacterInRoom Get or set the character used for representing there is an item or a character in the room. Declaration public char ItemOrCharacterInRoom { get; set; } Property Value Type Description char KeyPadding Get or set the padding between the key and the map. Declaration public int KeyPadding { get; set; } Property Value Type Description int LockedExit Get or set the character used for representing a locked exit. Declaration public char LockedExit { get; set; } Property Value Type Description char LockedExitColor Get or set the locked exit color. Declaration public AnsiColor LockedExitColor { get; set; } Property Value Type Description AnsiColor RenderedSize Get the rendered size of the room, excluding any keys. Declaration public Size RenderedSize { get; } Property Value Type Description Size UnvisitedExitColor Get or set the unvisited exit color. Declaration public AnsiColor UnvisitedExitColor { get; set; } Property Value Type Description AnsiColor VerticalBoundary Get or set the character to use for vertical boundaries. Declaration public char VerticalBoundary { get; set; } Property Value Type Description char VerticalExitBorder Get or set the character to use for vertical exit borders. Declaration public char VerticalExitBorder { get; set; } Property Value Type Description char VisitedExitColor Get or set the visited exit color. Declaration public AnsiColor VisitedExitColor { get; set; } Property Value Type Description AnsiColor Methods BuildRoomMap(Room, ViewPoint, KeyType) Build a map for a room. Declaration public void BuildRoomMap(Room room, ViewPoint viewPoint, KeyType key) Parameters Type Name Description Room room The room. ViewPoint viewPoint The viewpoint from the room. KeyType key The key type. BuildRoomMap(Room, ViewPoint, KeyType, Point2D, out int, out int) Build a map for a room. Declaration public void BuildRoomMap(Room room, ViewPoint viewPoint, KeyType key, Point2D startPosition, out int endX, out int endY) Parameters Type Name Description Room room The room. ViewPoint viewPoint The viewpoint from the room. KeyType key The key type. Point2D startPosition The start position. int endX The end position, x. int endY The end position, x. Implements IConsoleRoomMapBuilder IRoomMapBuilder"
  },
  "api/NetAF.Targets.Console.Rendering.FrameBuilders.ConsoleSceneFrameBuilder.html": {
    "href": "api/NetAF.Targets.Console.Rendering.FrameBuilders.ConsoleSceneFrameBuilder.html",
    "title": "Class ConsoleSceneFrameBuilder | NetAF",
    "summary": "Class ConsoleSceneFrameBuilder Provides a builder for scene frames. Inheritance object ConsoleSceneFrameBuilder Implements ISceneFrameBuilder IFrameBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Targets.Console.Rendering.FrameBuilders Assembly: NetAF.dll Syntax public sealed class ConsoleSceneFrameBuilder : ISceneFrameBuilder, IFrameBuilder Constructors ConsoleSceneFrameBuilder(GridStringBuilder, IRoomMapBuilder, bool) Provides a builder for scene frames. Declaration public ConsoleSceneFrameBuilder(GridStringBuilder gridStringBuilder, IRoomMapBuilder roomMapBuilder, bool renderPrompt = true) Parameters Type Name Description GridStringBuilder gridStringBuilder A builder to use for the string layout. IRoomMapBuilder roomMapBuilder A builder to use for room maps. bool renderPrompt Specify if the prompt should be rendered. Properties BackgroundColor Get or set the background color. Declaration public AnsiColor BackgroundColor { get; set; } Property Value Type Description AnsiColor BorderColor Get or set the border color. Declaration public AnsiColor BorderColor { get; set; } Property Value Type Description AnsiColor CommandTitle Get or set the command title. Declaration public string CommandTitle { get; set; } Property Value Type Description string CommandsColor Get or set the commands color. Declaration public AnsiColor CommandsColor { get; set; } Property Value Type Description AnsiColor InputColor Get or set the input color. Declaration public AnsiColor InputColor { get; set; } Property Value Type Description AnsiColor TextColor Get or set the text color. Declaration public AnsiColor TextColor { get; set; } Property Value Type Description AnsiColor Methods Build(Room, ViewPoint, PlayableCharacter, CommandHelp[], KeyType, Size) Build a frame. Declaration public IFrame Build(Room room, ViewPoint viewPoint, PlayableCharacter player, CommandHelp[] contextualCommands, KeyType keyType, Size size) Parameters Type Name Description Room room Specify the Room. ViewPoint viewPoint Specify the viewpoint from the room. PlayableCharacter player Specify the player. CommandHelp[] contextualCommands The contextual commands to display. KeyType keyType The type of key to use. Size size The size of the frame. Returns Type Description IFrame The frame. Implements ISceneFrameBuilder IFrameBuilder"
  },
  "api/NetAF.Targets.Console.Rendering.FrameBuilders.ConsoleTitleFrameBuilder.html": {
    "href": "api/NetAF.Targets.Console.Rendering.FrameBuilders.ConsoleTitleFrameBuilder.html",
    "title": "Class ConsoleTitleFrameBuilder | NetAF",
    "summary": "Class ConsoleTitleFrameBuilder Provides a builder of title frames. Inheritance object ConsoleTitleFrameBuilder Implements ITitleFrameBuilder IFrameBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Targets.Console.Rendering.FrameBuilders Assembly: NetAF.dll Syntax public sealed class ConsoleTitleFrameBuilder : ITitleFrameBuilder, IFrameBuilder Constructors ConsoleTitleFrameBuilder(GridStringBuilder) Provides a builder of title frames. Declaration public ConsoleTitleFrameBuilder(GridStringBuilder gridStringBuilder) Parameters Type Name Description GridStringBuilder gridStringBuilder A builder to use for the string layout. Properties BackgroundColor Get or set the background color. Declaration public AnsiColor BackgroundColor { get; set; } Property Value Type Description AnsiColor BorderColor Get or set the border color. Declaration public AnsiColor BorderColor { get; set; } Property Value Type Description AnsiColor DescriptionColor Get or set the description color. Declaration public AnsiColor DescriptionColor { get; set; } Property Value Type Description AnsiColor TitleColor Get or set the title color. Declaration public AnsiColor TitleColor { get; set; } Property Value Type Description AnsiColor Methods Build(string, string, Size) Build a frame. Declaration public IFrame Build(string title, string description, Size size) Parameters Type Name Description string title The title. string description The description. Size size The size of the frame. Returns Type Description IFrame The frame. Implements ITitleFrameBuilder IFrameBuilder"
  },
  "api/NetAF.Targets.Console.Rendering.FrameBuilders.ConsoleVisualFrameBuilder.html": {
    "href": "api/NetAF.Targets.Console.Rendering.FrameBuilders.ConsoleVisualFrameBuilder.html",
    "title": "Class ConsoleVisualFrameBuilder | NetAF",
    "summary": "Class ConsoleVisualFrameBuilder Provides a builder of visual frames. Inheritance object ConsoleVisualFrameBuilder Implements IVisualFrameBuilder IFrameBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Targets.Console.Rendering.FrameBuilders Assembly: NetAF.dll Syntax public sealed class ConsoleVisualFrameBuilder : IVisualFrameBuilder, IFrameBuilder Constructors ConsoleVisualFrameBuilder(GridStringBuilder) Provides a builder of visual frames. Declaration public ConsoleVisualFrameBuilder(GridStringBuilder gridStringBuilder) Parameters Type Name Description GridStringBuilder gridStringBuilder A builder to use for the string layout. Properties BackgroundColor Get or set the background color. Declaration public AnsiColor BackgroundColor { get; set; } Property Value Type Description AnsiColor BorderColor Get or set the border color. Declaration public AnsiColor BorderColor { get; set; } Property Value Type Description AnsiColor DescriptionColor Get or set the description color. Declaration public AnsiColor DescriptionColor { get; set; } Property Value Type Description AnsiColor TitleColor Get or set the title color. Declaration public AnsiColor TitleColor { get; set; } Property Value Type Description AnsiColor Methods Build(string, string, GridVisualBuilder, Size) Build a frame. Declaration public IFrame Build(string title, string description, GridVisualBuilder gridVisualBuilder, Size size) Parameters Type Name Description string title The title. string description The description. GridVisualBuilder gridVisualBuilder The grid visual builder. Size size The size of the frame. Returns Type Description IFrame The frame. Implements IVisualFrameBuilder IFrameBuilder"
  },
  "api/NetAF.Targets.Console.Rendering.FrameBuilders.html": {
    "href": "api/NetAF.Targets.Console.Rendering.FrameBuilders.html",
    "title": "Namespace NetAF.Targets.Console.Rendering.FrameBuilders | NetAF",
    "summary": "Namespace NetAF.Targets.Console.Rendering.FrameBuilders Classes ConsoleAboutFrameBuilder Provides a builder of console about frames. ConsoleBasicRoomMapBuilder Provides an basic room map builder. ConsoleCommandListFrameBuilder Provides a builder of command list frames. ConsoleCompletionFrameBuilder Provides a builder of completion frames. ConsoleConversationFrameBuilder Provides a builder of conversation frames. ConsoleGameOverFrameBuilder Provides a builder of game over frames. ConsoleHelpFrameBuilder Provides a builder of help frames. ConsoleHistoryFrameBuilder Provides a builder of history frames. ConsoleNoteFrameBuilder Provides a builder of note frames. ConsoleReactionFrameBuilder Provides a builder of reaction frames. ConsoleRegionMapBuilder Provides a builder for region maps. ConsoleRegionMapFrameBuilder Provides a builder of region map frames. ConsoleRoomMapBuilder Provides a room map builder. ConsoleSceneFrameBuilder Provides a builder for scene frames. ConsoleTitleFrameBuilder Provides a builder of title frames. ConsoleVisualFrameBuilder Provides a builder of visual frames."
  },
  "api/NetAF.Targets.Console.Rendering.GridStringBuilder.html": {
    "href": "api/NetAF.Targets.Console.Rendering.GridStringBuilder.html",
    "title": "Class GridStringBuilder | NetAF",
    "summary": "Class GridStringBuilder Provides a class for building strings as part of a grid. Inheritance object GridStringBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Targets.Console.Rendering Assembly: NetAF.dll Syntax public class GridStringBuilder Constructors GridStringBuilder(char, char, char) Provides a class for building strings as part of a grid. Declaration public GridStringBuilder(char leftBoundaryCharacter = '|', char rightBoundaryCharacter = '|', char horizontalDividerCharacter = '-') Parameters Type Name Description char leftBoundaryCharacter The character to use for left boundaries. char rightBoundaryCharacter The character to use for right boundaries. char horizontalDividerCharacter The character to use for horizontal dividers. Properties DisplaySize Get the display size. Declaration public Size DisplaySize { get; } Property Value Type Description Size HorizontalDividerCharacter Get or set the character used for horizontal dividers. Declaration public char HorizontalDividerCharacter { get; set; } Property Value Type Description char LeftBoundaryCharacter Get or set the character used for left boundary. Declaration public char LeftBoundaryCharacter { get; set; } Property Value Type Description char LineTerminator Get or set the line terminator. Declaration public char LineTerminator { get; set; } Property Value Type Description char RightBoundaryCharacter Get or set the character used for right boundary. Declaration public char RightBoundaryCharacter { get; set; } Property Value Type Description char Methods DrawBoundary(AnsiColor) Draw the boundary. Declaration public void DrawBoundary(AnsiColor color) Parameters Type Name Description AnsiColor color The color to draw the boundary. DrawCentralisedWrapped(string, int, int, AnsiColor, out int, out int) Draw a wrapped string. Declaration public void DrawCentralisedWrapped(string value, int startY, int maxWidth, AnsiColor color, out int endX, out int endY) Parameters Type Name Description string value The string. int startY The start y position. int maxWidth The max width of the string. AnsiColor color The color to draw the text. int endX The end x position. int endY The end y position. DrawHorizontalDivider(int, AnsiColor) Draw a horizontal divider. Declaration public void DrawHorizontalDivider(int y, AnsiColor color) Parameters Type Name Description int y The y position of the divider. AnsiColor color The color to draw the boundary. DrawUnderline(int, int, int, AnsiColor) Draw an underline. Declaration public void DrawUnderline(int x, int y, int length, AnsiColor color) Parameters Type Name Description int x The position of the underline, in x. int y The position of the underline, in y. int length The length of the underline. AnsiColor color The color of the underline. DrawWrapped(string, int, int, int, AnsiColor, out int, out int) Draw a wrapped string. Declaration public void DrawWrapped(string value, int startX, int startY, int maxWidth, AnsiColor color, out int endX, out int endY) Parameters Type Name Description string value The string. int startX The start x position. int startY The start y position. int maxWidth The max width of the string. AnsiColor color The color to draw the text. int endX The end x position. int endY The end y position. Flush() Flush the buffer. Declaration public void Flush() GetCellColor(int, int) Get a color for a cell. Declaration public AnsiColor GetCellColor(int x, int y) Parameters Type Name Description int x The x position of the cell. int y The y position of the cell. Returns Type Description AnsiColor The cell color. GetCharacter(int, int) Get a character from the buffer. Declaration public char GetCharacter(int x, int y) Parameters Type Name Description int x The x position of the character. int y The y position of the character. Returns Type Description char The character. GetNumberOfLines(string, int, int) Get the number of lines a string will take up. Declaration public static int GetNumberOfLines(string value, int startY, int maxWidth) Parameters Type Name Description string value The string. int startY The start y position. int maxWidth The max width of the string. Returns Type Description int The number of lines the string will take up. Resize(Size) Resize this builder. Declaration public void Resize(Size displaySize) Parameters Type Name Description Size displaySize The new size. SetCell(int, int, char, AnsiColor) Set a cell. Declaration public void SetCell(int x, int y, char character, AnsiColor color) Parameters Type Name Description int x The x position of the cell. int y The y position of the cell. char character The character. AnsiColor color The color of the character. ToCropped(bool, bool) Crop this GridStringBuilder so that a duplicate is returned that is sized to only take up the used required width and height. Declaration public GridStringBuilder ToCropped(bool cropWidth = true, bool cropHeight = true) Parameters Type Name Description bool cropWidth Specify if the width should be cropped. bool cropHeight Specify if the height should be cropped. Returns Type Description GridStringBuilder A duplicate, cropped, GridStringBuilder."
  },
  "api/NetAF.Targets.Console.Rendering.GridTextFrame.html": {
    "href": "api/NetAF.Targets.Console.Rendering.GridTextFrame.html",
    "title": "Class GridTextFrame | NetAF",
    "summary": "Class GridTextFrame Provides a grid based frame for displaying a command based interface. Inheritance object GridTextFrame Implements IConsoleFrame IAnsiGridFrame IFrame Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Namespace: NetAF.Targets.Console.Rendering Assembly: NetAF.dll Syntax public sealed class GridTextFrame : IConsoleFrame, IAnsiGridFrame, IFrame Constructors GridTextFrame(GridStringBuilder, int, int, AnsiColor) Provides a grid based frame for displaying a command based interface. Declaration public GridTextFrame(GridStringBuilder builder, int cursorLeft, int cursorTop, AnsiColor backgroundColor) Parameters Type Name Description GridStringBuilder builder The builder that creates the frame. int cursorLeft The cursor left position. int cursorTop The cursor top position. AnsiColor backgroundColor The background color. Properties BackgroundColor Get the background color. Declaration public AnsiColor BackgroundColor { get; } Property Value Type Description AnsiColor CursorLeft Get the cursor left position. Declaration public int CursorLeft { get; } Property Value Type Description int CursorTop Get the cursor top position. Declaration public int CursorTop { get; } Property Value Type Description int ShowCursor Get or set if the cursor should be shown. Declaration public bool ShowCursor { get; set; } Property Value Type Description bool Methods GetCell(int, int) Get a cell from the grid. Declaration public AnsiCell GetCell(int x, int y) Parameters Type Name Description int x The x position of the cell. int y The y position of the cell. Returns Type Description AnsiCell The ANSI cell. Render(IFramePresenter) Render this frame on a presenter. Declaration public void Render(IFramePresenter presenter) Parameters Type Name Description IFramePresenter presenter The presenter. ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description string A string that represents the current object. Overrides object.ToString() Implements IConsoleFrame IAnsiGridFrame IFrame"
  },
  "api/NetAF.Targets.Console.Rendering.GridVisualBuilder.html": {
    "href": "api/NetAF.Targets.Console.Rendering.GridVisualBuilder.html",
    "title": "Class GridVisualBuilder | NetAF",
    "summary": "Class GridVisualBuilder Provides a class for building visuals in a grid. Inheritance object GridVisualBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Targets.Console.Rendering Assembly: NetAF.dll Syntax public class GridVisualBuilder Constructors GridVisualBuilder(AnsiColor, AnsiColor) Provides a class for building visuals in a grid. Declaration public GridVisualBuilder(AnsiColor background, AnsiColor foreground) Parameters Type Name Description AnsiColor background The background color. AnsiColor foreground The foreground color. Properties DisplaySize Get the display size. Declaration public Size DisplaySize { get; } Property Value Type Description Size LineTerminator Get or set the line terminator. Declaration public char LineTerminator { get; set; } Property Value Type Description char Methods DrawRectangle(int, int, int, int, AnsiColor, AnsiColor) Draw a rectangle. Declaration public void DrawRectangle(int left, int top, int width, int height, AnsiColor borderColor, AnsiColor fillColor) Parameters Type Name Description int left The left position of the rectangle. int top The top position of the rectangle. int width The width of the rectangle. int height The height of the rectangle. AnsiColor borderColor The border color of the cell. AnsiColor fillColor The fill color of the cell. DrawTexture(int, int, int, int, Texture, AnsiColor) Draw a texture. Declaration public void DrawTexture(int left, int top, int width, int height, Texture texture, AnsiColor foregroundColor) Parameters Type Name Description int left The left position of the area to draw within. int top The top position of the area to draw within. int width The width of the area to draw within. int height The height of the area to draw within. Texture texture The texture. AnsiColor foregroundColor The foregroundColor color of the texture. DrawTextureOverBackgroundColor(int, int, int, int, AnsiColor, Texture, AnsiColor) Draw a texture over all cells where the background color matches the specified color. Declaration public void DrawTextureOverBackgroundColor(int left, int top, int width, int height, AnsiColor backgroundColor, Texture texture, AnsiColor foregroundColor) Parameters Type Name Description int left The left position of the area to draw within. int top The top position of the area to draw within. int width The width of the area to draw within. int height The height of the area to draw within. AnsiColor backgroundColor The background color. Texture texture The texture. AnsiColor foregroundColor The foregroundColor color of the texture. Flush() Flush the buffer. Declaration public void Flush() GetCellBackgroundColor(int, int) Get a background color for a cell. Declaration public AnsiColor GetCellBackgroundColor(int x, int y) Parameters Type Name Description int x The x position of the cell. int y The y position of the cell. Returns Type Description AnsiColor The cell background color. GetCellForegroundColor(int, int) Get a foreground color for a cell. Declaration public AnsiColor GetCellForegroundColor(int x, int y) Parameters Type Name Description int x The x position of the cell. int y The y position of the cell. Returns Type Description AnsiColor The cell foreground color. GetCharacter(int, int) Get a character from the buffer. Declaration public char GetCharacter(int x, int y) Parameters Type Name Description int x The x position of the character. int y The y position of the character. Returns Type Description char The character. Overlay(int, int, GridStringBuilder) Overlay a GridStringBuilder on top of this. Declaration public void Overlay(int x, int y, GridStringBuilder gridStringBuilder) Parameters Type Name Description int x The x position to begin overlaying the GridStringBuilder at. int y The y position to begin overlaying the GridStringBuilder at. GridStringBuilder gridStringBuilder The GridStringBuilder to overlay. Overlay(int, int, GridVisualBuilder) Overlay another GridVisualBuilder on top of this. Declaration public void Overlay(int x, int y, GridVisualBuilder gridGridVisualBuilder) Parameters Type Name Description int x The x position to begin overlaying the GridVisualBuilder at. int y The y position to begin overlaying the GridVisualBuilder at. GridVisualBuilder gridGridVisualBuilder The GridVisualBuilder to overlay. Resize(Size) Resize this builder. Declaration public void Resize(Size displaySize) Parameters Type Name Description Size displaySize The new size. SetCell(int, int, AnsiColor) Set a cell. Declaration public void SetCell(int x, int y, AnsiColor backgroundColor) Parameters Type Name Description int x The x position of the cell. int y The y position of the cell. AnsiColor backgroundColor The backgroundColor color of the cell. SetCell(int, int, char, AnsiColor) Set a cell. Declaration public void SetCell(int x, int y, char character, AnsiColor foregroundColor) Parameters Type Name Description int x The x position of the cell. int y The y position of the cell. char character The character. AnsiColor foregroundColor The foreground color of the cell. SetCell(int, int, char, AnsiColor, AnsiColor) Set a cell. Declaration public void SetCell(int x, int y, char character, AnsiColor foregroundColor, AnsiColor backgroundColor) Parameters Type Name Description int x The x position of the cell. int y The y position of the cell. char character The character. AnsiColor foregroundColor The foreground color of the cell. AnsiColor backgroundColor The backgroundColor color of the cell."
  },
  "api/NetAF.Targets.Console.Rendering.GridVisualFrame.html": {
    "href": "api/NetAF.Targets.Console.Rendering.GridVisualFrame.html",
    "title": "Class GridVisualFrame | NetAF",
    "summary": "Class GridVisualFrame Provides a grid based frame for displaying a visual. Inheritance object GridVisualFrame Implements IConsoleFrame IAnsiGridFrame IFrame Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Targets.Console.Rendering Assembly: NetAF.dll Syntax public sealed class GridVisualFrame : IConsoleFrame, IAnsiGridFrame, IFrame Constructors GridVisualFrame(GridVisualBuilder) Provides a grid based frame for displaying a visual. Declaration public GridVisualFrame(GridVisualBuilder builder) Parameters Type Name Description GridVisualBuilder builder The builder that creates the frame. Properties CursorLeft Get the cursor left position. Declaration public int CursorLeft { get; } Property Value Type Description int CursorTop Get the cursor top position. Declaration public int CursorTop { get; } Property Value Type Description int ShowCursor Get or set if the cursor should be shown. Declaration public bool ShowCursor { get; set; } Property Value Type Description bool Methods GetCell(int, int) Get a cell from the grid. Declaration public AnsiCell GetCell(int x, int y) Parameters Type Name Description int x The x position of the cell. int y The y position of the cell. Returns Type Description AnsiCell The ANSI cell. Render(IFramePresenter) Render this frame on a presenter. Declaration public void Render(IFramePresenter presenter) Parameters Type Name Description IFramePresenter presenter The presenter. Implements IConsoleFrame IAnsiGridFrame IFrame"
  },
  "api/NetAF.Targets.Console.Rendering.IAnsiGridFrame.html": {
    "href": "api/NetAF.Targets.Console.Rendering.IAnsiGridFrame.html",
    "title": "Interface IAnsiGridFrame | NetAF",
    "summary": "Interface IAnsiGridFrame Represents any object that is an ANSI based grid frame. Inherited Members IFrame.Render(IFramePresenter) Namespace: NetAF.Targets.Console.Rendering Assembly: NetAF.dll Syntax public interface IAnsiGridFrame : IFrame Methods GetCell(int, int) Get a cell from the grid. Declaration AnsiCell GetCell(int x, int y) Parameters Type Name Description int x The x position of the cell. int y The y position of the cell. Returns Type Description AnsiCell The ANSI cell."
  },
  "api/NetAF.Targets.Console.Rendering.IConsoleFrame.html": {
    "href": "api/NetAF.Targets.Console.Rendering.IConsoleFrame.html",
    "title": "Interface IConsoleFrame | NetAF",
    "summary": "Interface IConsoleFrame Represents any object that is a frame that can display a command based interface. Inherited Members IAnsiGridFrame.GetCell(int, int) IFrame.Render(IFramePresenter) Namespace: NetAF.Targets.Console.Rendering Assembly: NetAF.dll Syntax public interface IConsoleFrame : IAnsiGridFrame, IFrame Properties CursorLeft Get the cursor left position. Declaration int CursorLeft { get; } Property Value Type Description int CursorTop Get the cursor top position. Declaration int CursorTop { get; } Property Value Type Description int ShowCursor Get or set if the cursor should be shown. Declaration bool ShowCursor { get; set; } Property Value Type Description bool"
  },
  "api/NetAF.Targets.Console.Rendering.IConsoleRegionMapBuilder.html": {
    "href": "api/NetAF.Targets.Console.Rendering.IConsoleRegionMapBuilder.html",
    "title": "Interface IConsoleRegionMapBuilder | NetAF",
    "summary": "Interface IConsoleRegionMapBuilder Represents any object that can build region maps targeting the console. Inherited Members IRegionMapBuilder.BuildRegionMap(Region, Point3D, RegionMapDetail) Namespace: NetAF.Targets.Console.Rendering Assembly: NetAF.dll Syntax public interface IConsoleRegionMapBuilder : IRegionMapBuilder Methods BuildRegionMap(Region, Point3D, RegionMapDetail, Point2D, Size) Build a map of a region. Declaration void BuildRegionMap(Region region, Point3D focusPosition, RegionMapDetail detail, Point2D startPosition, Size maxSize) Parameters Type Name Description Region region The region. Point3D focusPosition The position to focus on. RegionMapDetail detail The level of detail to use. Point2D startPosition The position to start building at. Size maxSize The maximum size available in which to build the map."
  },
  "api/NetAF.Targets.Console.Rendering.IConsoleRoomMapBuilder.html": {
    "href": "api/NetAF.Targets.Console.Rendering.IConsoleRoomMapBuilder.html",
    "title": "Interface IConsoleRoomMapBuilder | NetAF",
    "summary": "Interface IConsoleRoomMapBuilder Represents any object that can build room maps targeting the console. Inherited Members IRoomMapBuilder.RenderedSize IRoomMapBuilder.BuildRoomMap(Room, ViewPoint, KeyType) Namespace: NetAF.Targets.Console.Rendering Assembly: NetAF.dll Syntax public interface IConsoleRoomMapBuilder : IRoomMapBuilder Methods BuildRoomMap(Room, ViewPoint, KeyType, Point2D, out int, out int) Build a map for a room. Declaration void BuildRoomMap(Room room, ViewPoint viewPoint, KeyType key, Point2D startPosition, out int endX, out int endY) Parameters Type Name Description Room room The room. ViewPoint viewPoint The viewpoint from the room. KeyType key The key type. Point2D startPosition The position to start building at. int endX The end position, x. int endY The end position, x."
  },
  "api/NetAF.Targets.Console.Rendering.NetAFPalette.html": {
    "href": "api/NetAF.Targets.Console.Rendering.NetAFPalette.html",
    "title": "Class NetAFPalette | NetAF",
    "summary": "Class NetAFPalette Provides a palette of ANSI colors. Inheritance object NetAFPalette Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Targets.Console.Rendering Assembly: NetAF.dll Syntax public static class NetAFPalette Properties NetAFBlue Get the default NetAF blue. Declaration public static AnsiColor NetAFBlue { get; } Property Value Type Description AnsiColor NetAFGreen Get the default NetAF green. Declaration public static AnsiColor NetAFGreen { get; } Property Value Type Description AnsiColor NetAFRed Get the default NetAF red. Declaration public static AnsiColor NetAFRed { get; } Property Value Type Description AnsiColor NetAFYellow Get the default NetAF yellow. Declaration public static AnsiColor NetAFYellow { get; } Property Value Type Description AnsiColor"
  },
  "api/NetAF.Targets.Console.Rendering.TextWriterPresenter.html": {
    "href": "api/NetAF.Targets.Console.Rendering.TextWriterPresenter.html",
    "title": "Class TextWriterPresenter | NetAF",
    "summary": "Class TextWriterPresenter Represents a presenter for TextWriter. Inheritance object TextWriterPresenter Implements IFramePresenter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Namespace: NetAF.Targets.Console.Rendering Assembly: NetAF.dll Syntax public sealed class TextWriterPresenter : IFramePresenter Constructors TextWriterPresenter(TextWriter) Represents a presenter for TextWriter. Declaration public TextWriterPresenter(TextWriter writer) Parameters Type Name Description TextWriter writer The writer. Methods Present(string) Present a frame. Declaration public void Present(string frame) Parameters Type Name Description string frame The frame to write, as a string. ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description string A string that represents the current object. Overrides object.ToString() Implements IFramePresenter"
  },
  "api/NetAF.Targets.Console.Rendering.Texture.html": {
    "href": "api/NetAF.Targets.Console.Rendering.Texture.html",
    "title": "Class Texture | NetAF",
    "summary": "Class Texture Provides texture made from a 2D array of characters. Inheritance object Texture Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: NetAF.Targets.Console.Rendering Assembly: NetAF.dll Syntax public class Texture Constructors Texture(string) Provides texture made from a 2D array of characters. Declaration public Texture(string texture) Parameters Type Name Description string texture The texture as a string. The string will be split at newlines to create the 2D texture. Properties Height Get the height of the texture. Declaration public int Height { get; } Property Value Type Description int this[int, int] Get a character from the texture. Declaration public char this[int x, int y] { get; } Parameters Type Name Description int x The x position of the character within the texture. int y The y position of the character within the texture. Property Value Type Description char The character. If the specified position is outside of the kernel then ' ' will be returned. Kernel Get the kernel, as a 2D array of characters. Declaration public char[,] Kernel { get; } Property Value Type Description char[,] Width Get the width of the texture. Declaration public int Width { get; } Property Value Type Description int Methods ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description string A string that represents the current object. Overrides object.ToString()"
  },
  "api/NetAF.Targets.Console.Rendering.html": {
    "href": "api/NetAF.Targets.Console.Rendering.html",
    "title": "Namespace NetAF.Targets.Console.Rendering | NetAF",
    "summary": "Namespace NetAF.Targets.Console.Rendering Classes Ansi Provides helper functions for ANSI colors. AnsiCell Represents a cell containing ANSI data. GridStringBuilder Provides a class for building strings as part of a grid. GridTextFrame Provides a grid based frame for displaying a command based interface. GridVisualBuilder Provides a class for building visuals in a grid. GridVisualFrame Provides a grid based frame for displaying a visual. NetAFPalette Provides a palette of ANSI colors. TextWriterPresenter Represents a presenter for TextWriter. Texture Provides texture made from a 2D array of characters. Structs AnsiColor Represents an ANSI color. Interfaces IAnsiGridFrame Represents any object that is an ANSI based grid frame. IConsoleFrame Represents any object that is a frame that can display a command based interface. IConsoleRegionMapBuilder Represents any object that can build region maps targeting the console. IConsoleRoomMapBuilder Represents any object that can build room maps targeting the console."
  },
  "api/NetAF.Targets.Console.html": {
    "href": "api/NetAF.Targets.Console.html",
    "title": "Namespace NetAF.Targets.Console | NetAF",
    "summary": "Namespace NetAF.Targets.Console Classes ConsoleAdapter Provides an adapter for the System.Console. ConsoleExecutionController Controls the automation of a game targeting the System.Console."
  },
  "api/NetAF.Targets.General.FrameBuilders.GeneralRegionMapBuilder.html": {
    "href": "api/NetAF.Targets.General.FrameBuilders.GeneralRegionMapBuilder.html",
    "title": "Class GeneralRegionMapBuilder | NetAF",
    "summary": "Class GeneralRegionMapBuilder Provides a builder for region maps. Inheritance object GeneralRegionMapBuilder HtmlRegionMapBuilder TextRegionMapBuilder Implements IRegionMapBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Targets.General.FrameBuilders Assembly: NetAF.dll Syntax public abstract class GeneralRegionMapBuilder : IRegionMapBuilder Properties CurrentFloorIndicator Get or set the character to use for the current floor. Declaration public char CurrentFloorIndicator { get; set; } Property Value Type Description char EmptySpace Get or set the character used for representing an empty space. Declaration public char EmptySpace { get; set; } Property Value Type Description char Focus Get or set the character to use for indicating the focus. Declaration public char Focus { get; set; } Property Value Type Description char HorizontalBoundary Get or set the character to use for horizontal boundaries. Declaration public char HorizontalBoundary { get; set; } Property Value Type Description char LockedExit Get or set the character used for representing a locked exit. Declaration public char LockedExit { get; set; } Property Value Type Description char LowerLevel Get or set the character to use for lower levels. Declaration public char LowerLevel { get; set; } Property Value Type Description char MaxSize Get or set the maximum size. Declaration public Size MaxSize { get; set; } Property Value Type Description Size Player Get or set the character to use for indicating the player. Declaration public char Player { get; set; } Property Value Type Description char ShowLowerFloors Get or set if lower floors should be shown. Declaration public bool ShowLowerFloors { get; set; } Property Value Type Description bool SupportsPan Get if this frame builder supports panning. Declaration public bool SupportsPan { get; } Property Value Type Description bool SupportsZoom Get if this frame builder supports zooming. Declaration public bool SupportsZoom { get; } Property Value Type Description bool UnLockedExit Get or set the character used for representing an unlocked exit. Declaration public char UnLockedExit { get; set; } Property Value Type Description char VerticalBoundary Get or set the character to use for vertical boundaries. Declaration public char VerticalBoundary { get; set; } Property Value Type Description char Methods Adapt(GridStringBuilder) Adapt the region map for the target. Declaration protected virtual void Adapt(GridStringBuilder regionMapBuilder) Parameters Type Name Description GridStringBuilder regionMapBuilder The region map builder. BuildRegionMap(Region, Point3D, RegionMapDetail) Build a map of a region. Declaration public void BuildRegionMap(Region region, Point3D focusPosition, RegionMapDetail detail) Parameters Type Name Description Region region The region. Point3D focusPosition The position to focus on. RegionMapDetail detail The level of detail to use. Implements IRegionMapBuilder"
  },
  "api/NetAF.Targets.General.FrameBuilders.GeneralRoomMapBuilder.html": {
    "href": "api/NetAF.Targets.General.FrameBuilders.GeneralRoomMapBuilder.html",
    "title": "Class GeneralRoomMapBuilder | NetAF",
    "summary": "Class GeneralRoomMapBuilder Provides a room map builder. Inheritance object GeneralRoomMapBuilder HtmlRoomMapBuilder TextRoomMapBuilder Implements IRoomMapBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Targets.General.FrameBuilders Assembly: NetAF.dll Syntax public abstract class GeneralRoomMapBuilder : IRoomMapBuilder Properties Corner Get or set the character to use for corners. Declaration public char Corner { get; set; } Property Value Type Description char HorizontalBoundary Get or set the character to use for horizontal boundaries. Declaration public char HorizontalBoundary { get; set; } Property Value Type Description char HorizontalExitBorder Get or set the character to use for horizontal exit borders. Declaration public char HorizontalExitBorder { get; set; } Property Value Type Description char ItemOrCharacterInRoom Get or set the character used for representing there is an item or a character in the room. Declaration public char ItemOrCharacterInRoom { get; set; } Property Value Type Description char KeyPadding Get or set the padding between the key and the map. Declaration public int KeyPadding { get; set; } Property Value Type Description int LockedExit Get or set the character used for representing a locked exit. Declaration public char LockedExit { get; set; } Property Value Type Description char MaxSize Get or set the maximum size. Declaration public Size MaxSize { get; set; } Property Value Type Description Size RenderedSize Get the rendered size of the room, excluding any keys. Declaration public Size RenderedSize { get; } Property Value Type Description Size VerticalBoundary Get or set the character to use for vertical boundaries. Declaration public char VerticalBoundary { get; set; } Property Value Type Description char VerticalExitBorder Get or set the character to use for vertical exit borders. Declaration public char VerticalExitBorder { get; set; } Property Value Type Description char Methods Adapt(GridStringBuilder) Adapt the room map for the target. Declaration protected virtual void Adapt(GridStringBuilder roomMapBuilder) Parameters Type Name Description GridStringBuilder roomMapBuilder The room map builder. BuildRoomMap(Room, ViewPoint, KeyType) Build a map for a room. Declaration public void BuildRoomMap(Room room, ViewPoint viewPoint, KeyType key) Parameters Type Name Description Room room The room. ViewPoint viewPoint The viewpoint from the room. KeyType key The key type. Implements IRoomMapBuilder"
  },
  "api/NetAF.Targets.General.FrameBuilders.html": {
    "href": "api/NetAF.Targets.General.FrameBuilders.html",
    "title": "Namespace NetAF.Targets.General.FrameBuilders | NetAF",
    "summary": "Namespace NetAF.Targets.General.FrameBuilders Classes GeneralRegionMapBuilder Provides a builder for region maps. GeneralRoomMapBuilder Provides a room map builder."
  },
  "api/NetAF.Targets.Html.HtmlAdapter.html": {
    "href": "api/NetAF.Targets.Html.HtmlAdapter.html",
    "title": "Class HtmlAdapter | NetAF",
    "summary": "Class HtmlAdapter Provides an adapter for HTML. Inheritance object HtmlAdapter Implements IIOAdapter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Targets.Html Assembly: NetAF.dll Syntax public sealed class HtmlAdapter : IIOAdapter Constructors HtmlAdapter(IFramePresenter) Provides an adapter for HTML. Declaration public HtmlAdapter(IFramePresenter presenter) Parameters Type Name Description IFramePresenter presenter The presenter to use for presenting frames. Methods ConvertGridStringBuilderToHtmlString(GridStringBuilder, bool, bool, bool) Convert the contents of a GridStringBuilder to HTML. Declaration public static string ConvertGridStringBuilderToHtmlString(GridStringBuilder builder, bool padEmptyCharacters = true, bool retainFontColors = true, bool useMonospace = true) Parameters Type Name Description GridStringBuilder builder The GridStringBuilder to convert. bool padEmptyCharacters Specify if empty characters should be padded with a space. bool retainFontColors Specify if font colors should be retained. bool useMonospace Specify if the HTML should be rendered in a monospace font to retain horizontal cell spacing. Returns Type Description string A HTML string representing the contents of the GridStringBuilder. ConvertGridVisualBuilderToHtmlString(GridVisualBuilder) Convert the contents of a GridVisualBuilder to HTML. Declaration public static string ConvertGridVisualBuilderToHtmlString(GridVisualBuilder builder) Parameters Type Name Description GridVisualBuilder builder The GridVisualBuilder to convert. Returns Type Description string A HTML string representing the contents of the GridVisualBuilder. RenderFrame(IFrame) Render a frame. Declaration public void RenderFrame(IFrame frame) Parameters Type Name Description IFrame frame The frame to render. Setup(Game) Setup for a game. Declaration public void Setup(Game game) Parameters Type Name Description Game game The game to set up for. Implements IIOAdapter"
  },
  "api/NetAF.Targets.Html.Rendering.FrameBuilders.HtmlAboutFrameBuilder.html": {
    "href": "api/NetAF.Targets.Html.Rendering.FrameBuilders.HtmlAboutFrameBuilder.html",
    "title": "Class HtmlAboutFrameBuilder | NetAF",
    "summary": "Class HtmlAboutFrameBuilder Provides a builder of about frames. Inheritance object HtmlAboutFrameBuilder Implements IAboutFrameBuilder IFrameBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Targets.Html.Rendering.FrameBuilders Assembly: NetAF.dll Syntax public sealed class HtmlAboutFrameBuilder : IAboutFrameBuilder, IFrameBuilder Constructors HtmlAboutFrameBuilder(HtmlBuilder) Provides a builder of about frames. Declaration public HtmlAboutFrameBuilder(HtmlBuilder builder) Parameters Type Name Description HtmlBuilder builder A builder to use for the text layout. Methods Build(string, Game, Size) Build a frame. Declaration public IFrame Build(string title, Game game, Size size) Parameters Type Name Description string title The title. Game game The game. Size size The size of the frame. Returns Type Description IFrame The frame. Implements IAboutFrameBuilder IFrameBuilder"
  },
  "api/NetAF.Targets.Html.Rendering.FrameBuilders.HtmlCommandListFrameBuilder.html": {
    "href": "api/NetAF.Targets.Html.Rendering.FrameBuilders.HtmlCommandListFrameBuilder.html",
    "title": "Class HtmlCommandListFrameBuilder | NetAF",
    "summary": "Class HtmlCommandListFrameBuilder Provides a builder of command list frames. Inheritance object HtmlCommandListFrameBuilder Implements ICommandListFrameBuilder IFrameBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Targets.Html.Rendering.FrameBuilders Assembly: NetAF.dll Syntax public sealed class HtmlCommandListFrameBuilder : ICommandListFrameBuilder, IFrameBuilder Constructors HtmlCommandListFrameBuilder(HtmlBuilder) Provides a builder of command list frames. Declaration public HtmlCommandListFrameBuilder(HtmlBuilder builder) Parameters Type Name Description HtmlBuilder builder A builder to use for the text layout. Methods Build(string, string, CommandHelp[], Size) Build a frame. Declaration public IFrame Build(string title, string description, CommandHelp[] commandHelp, Size size) Parameters Type Name Description string title The title. string description The description. CommandHelp[] commandHelp The command help. Size size The size of the frame. Returns Type Description IFrame The frame. Implements ICommandListFrameBuilder IFrameBuilder"
  },
  "api/NetAF.Targets.Html.Rendering.FrameBuilders.HtmlCompletionFrameBuilder.html": {
    "href": "api/NetAF.Targets.Html.Rendering.FrameBuilders.HtmlCompletionFrameBuilder.html",
    "title": "Class HtmlCompletionFrameBuilder | NetAF",
    "summary": "Class HtmlCompletionFrameBuilder Provides a builder of completion frames. Inheritance object HtmlCompletionFrameBuilder Implements ICompletionFrameBuilder IFrameBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Targets.Html.Rendering.FrameBuilders Assembly: NetAF.dll Syntax public sealed class HtmlCompletionFrameBuilder : ICompletionFrameBuilder, IFrameBuilder Constructors HtmlCompletionFrameBuilder(HtmlBuilder) Provides a builder of completion frames. Declaration public HtmlCompletionFrameBuilder(HtmlBuilder builder) Parameters Type Name Description HtmlBuilder builder A builder to use for the text layout. Methods Build(string, string, Size) Build a frame. Declaration public IFrame Build(string message, string reason, Size size) Parameters Type Name Description string message The message to display to the user. string reason The reason the game ended. Size size The size of the frame. Returns Type Description IFrame The frame. Implements ICompletionFrameBuilder IFrameBuilder"
  },
  "api/NetAF.Targets.Html.Rendering.FrameBuilders.HtmlConversationFrameBuilder.html": {
    "href": "api/NetAF.Targets.Html.Rendering.FrameBuilders.HtmlConversationFrameBuilder.html",
    "title": "Class HtmlConversationFrameBuilder | NetAF",
    "summary": "Class HtmlConversationFrameBuilder Provides a builder of conversation frames. Inheritance object HtmlConversationFrameBuilder Implements IConversationFrameBuilder IFrameBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Targets.Html.Rendering.FrameBuilders Assembly: NetAF.dll Syntax public sealed class HtmlConversationFrameBuilder : IConversationFrameBuilder, IFrameBuilder Constructors HtmlConversationFrameBuilder(HtmlBuilder) Provides a builder of conversation frames. Declaration public HtmlConversationFrameBuilder(HtmlBuilder builder) Parameters Type Name Description HtmlBuilder builder A builder to use for the text layout. Properties CommandTitle Get or set the command title. Declaration public string CommandTitle { get; set; } Property Value Type Description string Methods Build(string, IConverser, CommandHelp[], Size) Build a frame. Declaration public IFrame Build(string title, IConverser converser, CommandHelp[] contextualCommands, Size size) Parameters Type Name Description string title The title to display to the user. IConverser converser The converser. CommandHelp[] contextualCommands The contextual commands to display. Size size The size of the frame. Returns Type Description IFrame The frame. Implements IConversationFrameBuilder IFrameBuilder"
  },
  "api/NetAF.Targets.Html.Rendering.FrameBuilders.HtmlGameOverFrameBuilder.html": {
    "href": "api/NetAF.Targets.Html.Rendering.FrameBuilders.HtmlGameOverFrameBuilder.html",
    "title": "Class HtmlGameOverFrameBuilder | NetAF",
    "summary": "Class HtmlGameOverFrameBuilder Provides a builder of game over frames. Inheritance object HtmlGameOverFrameBuilder Implements IGameOverFrameBuilder IFrameBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Targets.Html.Rendering.FrameBuilders Assembly: NetAF.dll Syntax public sealed class HtmlGameOverFrameBuilder : IGameOverFrameBuilder, IFrameBuilder Constructors HtmlGameOverFrameBuilder(HtmlBuilder) Provides a builder of game over frames. Declaration public HtmlGameOverFrameBuilder(HtmlBuilder builder) Parameters Type Name Description HtmlBuilder builder A builder to use for the text layout. Methods Build(string, string, Size) Build a frame. Declaration public IFrame Build(string message, string reason, Size size) Parameters Type Name Description string message The message to display to the user. string reason The reason the game ended. Size size The size of the frame. Returns Type Description IFrame The frame. Implements IGameOverFrameBuilder IFrameBuilder"
  },
  "api/NetAF.Targets.Html.Rendering.FrameBuilders.HtmlHelpFrameBuilder.html": {
    "href": "api/NetAF.Targets.Html.Rendering.FrameBuilders.HtmlHelpFrameBuilder.html",
    "title": "Class HtmlHelpFrameBuilder | NetAF",
    "summary": "Class HtmlHelpFrameBuilder Provides a builder of help frames. Inheritance object HtmlHelpFrameBuilder Implements IHelpFrameBuilder IFrameBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Targets.Html.Rendering.FrameBuilders Assembly: NetAF.dll Syntax public sealed class HtmlHelpFrameBuilder : IHelpFrameBuilder, IFrameBuilder Constructors HtmlHelpFrameBuilder(HtmlBuilder) Provides a builder of help frames. Declaration public HtmlHelpFrameBuilder(HtmlBuilder builder) Parameters Type Name Description HtmlBuilder builder A builder to use for the text layout. Methods Build(string, CommandHelp, Prompt[], Size) Build a frame. Declaration public IFrame Build(string title, CommandHelp commandHelp, Prompt[] prompts, Size size) Parameters Type Name Description string title The title. CommandHelp commandHelp The command help. Prompt[] prompts The prompts to display for the command. Size size The size of the frame. Returns Type Description IFrame The frame. Implements IHelpFrameBuilder IFrameBuilder"
  },
  "api/NetAF.Targets.Html.Rendering.FrameBuilders.HtmlHistoryFrameBuilder.html": {
    "href": "api/NetAF.Targets.Html.Rendering.FrameBuilders.HtmlHistoryFrameBuilder.html",
    "title": "Class HtmlHistoryFrameBuilder | NetAF",
    "summary": "Class HtmlHistoryFrameBuilder Provides a builder of history frames. Inheritance object HtmlHistoryFrameBuilder Implements IHistoryFrameBuilder IFrameBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Targets.Html.Rendering.FrameBuilders Assembly: NetAF.dll Syntax public sealed class HtmlHistoryFrameBuilder : IHistoryFrameBuilder, IFrameBuilder Constructors HtmlHistoryFrameBuilder(HtmlBuilder) Provides a builder of history frames. Declaration public HtmlHistoryFrameBuilder(HtmlBuilder builder) Parameters Type Name Description HtmlBuilder builder A builder to use for the text layout. Properties MaxEntries Get or set the maximum number of entries to be displayed. For unlimited use HistoryManager.NoLimit. Declaration public int MaxEntries { get; set; } Property Value Type Description int Methods Build(string, string, HistoryEntry[], Size) Build a frame. Declaration public IFrame Build(string title, string description, HistoryEntry[] entries, Size size) Parameters Type Name Description string title The title. string description The description. HistoryEntry[] entries The entries. Size size The size of the frame. Returns Type Description IFrame The frame. Implements IHistoryFrameBuilder IFrameBuilder"
  },
  "api/NetAF.Targets.Html.Rendering.FrameBuilders.HtmlNoteFrameBuilder.html": {
    "href": "api/NetAF.Targets.Html.Rendering.FrameBuilders.HtmlNoteFrameBuilder.html",
    "title": "Class HtmlNoteFrameBuilder | NetAF",
    "summary": "Class HtmlNoteFrameBuilder Provides a builder of note frames. Inheritance object HtmlNoteFrameBuilder Implements INoteFrameBuilder IFrameBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Targets.Html.Rendering.FrameBuilders Assembly: NetAF.dll Syntax public sealed class HtmlNoteFrameBuilder : INoteFrameBuilder, IFrameBuilder Constructors HtmlNoteFrameBuilder(HtmlBuilder) Provides a builder of note frames. Declaration public HtmlNoteFrameBuilder(HtmlBuilder builder) Parameters Type Name Description HtmlBuilder builder A builder to use for the text layout. Methods Build(string, string, NoteEntry[], Size) Build a frame. Declaration public IFrame Build(string title, string description, NoteEntry[] entries, Size size) Parameters Type Name Description string title The title. string description The description. NoteEntry[] entries The entries. Size size The size of the frame. Returns Type Description IFrame The frame. Implements INoteFrameBuilder IFrameBuilder"
  },
  "api/NetAF.Targets.Html.Rendering.FrameBuilders.HtmlReactionFrameBuilder.html": {
    "href": "api/NetAF.Targets.Html.Rendering.FrameBuilders.HtmlReactionFrameBuilder.html",
    "title": "Class HtmlReactionFrameBuilder | NetAF",
    "summary": "Class HtmlReactionFrameBuilder Provides a builder of reaction frames. Inheritance object HtmlReactionFrameBuilder Implements IReactionFrameBuilder IFrameBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Targets.Html.Rendering.FrameBuilders Assembly: NetAF.dll Syntax public sealed class HtmlReactionFrameBuilder : IReactionFrameBuilder, IFrameBuilder Constructors HtmlReactionFrameBuilder(HtmlBuilder) Provides a builder of reaction frames. Declaration public HtmlReactionFrameBuilder(HtmlBuilder builder) Parameters Type Name Description HtmlBuilder builder A builder to use for the text layout. Methods Build(string, string, bool, Size) Build a frame. Declaration public IFrame Build(string title, string message, bool isError, Size size) Parameters Type Name Description string title The title to display to the user. string message The message to display to the user. bool isError If the message is an error. Size size The size of the frame. Returns Type Description IFrame The frame. Implements IReactionFrameBuilder IFrameBuilder"
  },
  "api/NetAF.Targets.Html.Rendering.FrameBuilders.HtmlRegionMapBuilder.html": {
    "href": "api/NetAF.Targets.Html.Rendering.FrameBuilders.HtmlRegionMapBuilder.html",
    "title": "Class HtmlRegionMapBuilder | NetAF",
    "summary": "Class HtmlRegionMapBuilder Provides a builder for region maps. Inheritance object GeneralRegionMapBuilder HtmlRegionMapBuilder Implements IRegionMapBuilder Inherited Members GeneralRegionMapBuilder.LockedExit GeneralRegionMapBuilder.UnLockedExit GeneralRegionMapBuilder.EmptySpace GeneralRegionMapBuilder.VerticalBoundary GeneralRegionMapBuilder.HorizontalBoundary GeneralRegionMapBuilder.LowerLevel GeneralRegionMapBuilder.Player GeneralRegionMapBuilder.Focus GeneralRegionMapBuilder.CurrentFloorIndicator GeneralRegionMapBuilder.ShowLowerFloors GeneralRegionMapBuilder.MaxSize GeneralRegionMapBuilder.SupportsPan GeneralRegionMapBuilder.SupportsZoom GeneralRegionMapBuilder.BuildRegionMap(Region, Point3D, RegionMapDetail) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Targets.Html.Rendering.FrameBuilders Assembly: NetAF.dll Syntax public sealed class HtmlRegionMapBuilder : GeneralRegionMapBuilder, IRegionMapBuilder Constructors HtmlRegionMapBuilder(HtmlBuilder) Provides a builder for region maps. Declaration public HtmlRegionMapBuilder(HtmlBuilder builder) Parameters Type Name Description HtmlBuilder builder A builder to use for the text layout. Methods Adapt(GridStringBuilder) Adapt the region map for the target. Declaration protected override void Adapt(GridStringBuilder regionMapBuilder) Parameters Type Name Description GridStringBuilder regionMapBuilder The region map builder. Overrides GeneralRegionMapBuilder.Adapt(GridStringBuilder) Implements IRegionMapBuilder"
  },
  "api/NetAF.Targets.Html.Rendering.FrameBuilders.HtmlRegionMapFrameBuilder.html": {
    "href": "api/NetAF.Targets.Html.Rendering.FrameBuilders.HtmlRegionMapFrameBuilder.html",
    "title": "Class HtmlRegionMapFrameBuilder | NetAF",
    "summary": "Class HtmlRegionMapFrameBuilder Provides a builder of region map frames. Inheritance object HtmlRegionMapFrameBuilder Implements IRegionMapFrameBuilder IFrameBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Targets.Html.Rendering.FrameBuilders Assembly: NetAF.dll Syntax public sealed class HtmlRegionMapFrameBuilder : IRegionMapFrameBuilder, IFrameBuilder Constructors HtmlRegionMapFrameBuilder(HtmlBuilder, IRegionMapBuilder) Provides a builder of region map frames. Declaration public HtmlRegionMapFrameBuilder(HtmlBuilder builder, IRegionMapBuilder regionMapBuilder) Parameters Type Name Description HtmlBuilder builder A builder to use for the string layout. IRegionMapBuilder regionMapBuilder A builder for region maps. Properties CommandTitle Get or set the command title. Declaration public string CommandTitle { get; set; } Property Value Type Description string SupportsPan Get if this frame builder supports panning. Declaration public bool SupportsPan { get; } Property Value Type Description bool SupportsZoom Get if this frame builder supports zooming. Declaration public bool SupportsZoom { get; } Property Value Type Description bool Methods Build(Region, Point3D, RegionMapDetail, CommandHelp[], Size) Build a frame. Declaration public IFrame Build(Region region, Point3D focusPosition, RegionMapDetail detail, CommandHelp[] contextualCommands, Size size) Parameters Type Name Description Region region The region. Point3D focusPosition The position to focus on. RegionMapDetail detail The level of detail to use. CommandHelp[] contextualCommands The contextual commands to display. Size size The size of the frame. Returns Type Description IFrame The frame. Implements IRegionMapFrameBuilder IFrameBuilder"
  },
  "api/NetAF.Targets.Html.Rendering.FrameBuilders.HtmlRoomMapBuilder.html": {
    "href": "api/NetAF.Targets.Html.Rendering.FrameBuilders.HtmlRoomMapBuilder.html",
    "title": "Class HtmlRoomMapBuilder | NetAF",
    "summary": "Class HtmlRoomMapBuilder Provides a room map builder. Inheritance object GeneralRoomMapBuilder HtmlRoomMapBuilder Implements IRoomMapBuilder Inherited Members GeneralRoomMapBuilder.LockedExit GeneralRoomMapBuilder.ItemOrCharacterInRoom GeneralRoomMapBuilder.VerticalBoundary GeneralRoomMapBuilder.HorizontalBoundary GeneralRoomMapBuilder.VerticalExitBorder GeneralRoomMapBuilder.HorizontalExitBorder GeneralRoomMapBuilder.Corner GeneralRoomMapBuilder.KeyPadding GeneralRoomMapBuilder.MaxSize GeneralRoomMapBuilder.RenderedSize GeneralRoomMapBuilder.BuildRoomMap(Room, ViewPoint, KeyType) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Targets.Html.Rendering.FrameBuilders Assembly: NetAF.dll Syntax public sealed class HtmlRoomMapBuilder : GeneralRoomMapBuilder, IRoomMapBuilder Constructors HtmlRoomMapBuilder(HtmlBuilder) Provides a room map builder. Declaration public HtmlRoomMapBuilder(HtmlBuilder builder) Parameters Type Name Description HtmlBuilder builder A builder to use for the text layout. Methods Adapt(GridStringBuilder) Adapt the room map for the target. Declaration protected override void Adapt(GridStringBuilder roomMapBuilder) Parameters Type Name Description GridStringBuilder roomMapBuilder The room map builder. Overrides GeneralRoomMapBuilder.Adapt(GridStringBuilder) Implements IRoomMapBuilder"
  },
  "api/NetAF.Targets.Html.Rendering.FrameBuilders.HtmlSceneFrameBuilder.html": {
    "href": "api/NetAF.Targets.Html.Rendering.FrameBuilders.HtmlSceneFrameBuilder.html",
    "title": "Class HtmlSceneFrameBuilder | NetAF",
    "summary": "Class HtmlSceneFrameBuilder Provides a builder of scene frames. Inheritance object HtmlSceneFrameBuilder Implements ISceneFrameBuilder IFrameBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Targets.Html.Rendering.FrameBuilders Assembly: NetAF.dll Syntax public sealed class HtmlSceneFrameBuilder : ISceneFrameBuilder, IFrameBuilder Constructors HtmlSceneFrameBuilder(HtmlBuilder, IRoomMapBuilder) Provides a builder of scene frames. Declaration public HtmlSceneFrameBuilder(HtmlBuilder builder, IRoomMapBuilder roomMapBuilder) Parameters Type Name Description HtmlBuilder builder A builder to use for the text layout. IRoomMapBuilder roomMapBuilder A builder to use for room maps. Properties CommandTitle Get or set the command title. Declaration public string CommandTitle { get; set; } Property Value Type Description string Methods Build(Room, ViewPoint, PlayableCharacter, CommandHelp[], KeyType, Size) Build a frame. Declaration public IFrame Build(Room room, ViewPoint viewPoint, PlayableCharacter player, CommandHelp[] contextualCommands, KeyType keyType, Size size) Parameters Type Name Description Room room Specify the Room. ViewPoint viewPoint Specify the viewpoint from the room. PlayableCharacter player Specify the player. CommandHelp[] contextualCommands The contextual commands to display. KeyType keyType The type of key to use. Size size The size of the frame. Returns Type Description IFrame The frame. Implements ISceneFrameBuilder IFrameBuilder"
  },
  "api/NetAF.Targets.Html.Rendering.FrameBuilders.HtmlTitleFrameBuilder.html": {
    "href": "api/NetAF.Targets.Html.Rendering.FrameBuilders.HtmlTitleFrameBuilder.html",
    "title": "Class HtmlTitleFrameBuilder | NetAF",
    "summary": "Class HtmlTitleFrameBuilder Provides a builder of title frames. Inheritance object HtmlTitleFrameBuilder Implements ITitleFrameBuilder IFrameBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Targets.Html.Rendering.FrameBuilders Assembly: NetAF.dll Syntax public sealed class HtmlTitleFrameBuilder : ITitleFrameBuilder, IFrameBuilder Constructors HtmlTitleFrameBuilder(HtmlBuilder) Provides a builder of title frames. Declaration public HtmlTitleFrameBuilder(HtmlBuilder builder) Parameters Type Name Description HtmlBuilder builder A builder to use for the text layout. Methods Build(string, string, Size) Build a frame. Declaration public IFrame Build(string title, string description, Size size) Parameters Type Name Description string title The title. string description The description. Size size The size of the frame. Returns Type Description IFrame The frame. Implements ITitleFrameBuilder IFrameBuilder"
  },
  "api/NetAF.Targets.Html.Rendering.FrameBuilders.html": {
    "href": "api/NetAF.Targets.Html.Rendering.FrameBuilders.html",
    "title": "Namespace NetAF.Targets.Html.Rendering.FrameBuilders | NetAF",
    "summary": "Namespace NetAF.Targets.Html.Rendering.FrameBuilders Classes HtmlAboutFrameBuilder Provides a builder of about frames. HtmlCommandListFrameBuilder Provides a builder of command list frames. HtmlCompletionFrameBuilder Provides a builder of completion frames. HtmlConversationFrameBuilder Provides a builder of conversation frames. HtmlGameOverFrameBuilder Provides a builder of game over frames. HtmlHelpFrameBuilder Provides a builder of help frames. HtmlHistoryFrameBuilder Provides a builder of history frames. HtmlNoteFrameBuilder Provides a builder of note frames. HtmlReactionFrameBuilder Provides a builder of reaction frames. HtmlRegionMapBuilder Provides a builder for region maps. HtmlRegionMapFrameBuilder Provides a builder of region map frames. HtmlRoomMapBuilder Provides a room map builder. HtmlSceneFrameBuilder Provides a builder of scene frames. HtmlTitleFrameBuilder Provides a builder of title frames."
  },
  "api/NetAF.Targets.Html.Rendering.HtmlBuilder.html": {
    "href": "api/NetAF.Targets.Html.Rendering.HtmlBuilder.html",
    "title": "Class HtmlBuilder | NetAF",
    "summary": "Class HtmlBuilder Provides a class for building HTML. Inheritance object HtmlBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: NetAF.Targets.Html.Rendering Assembly: NetAF.dll Syntax public class HtmlBuilder Constructors HtmlBuilder() Provides a class for building HTML. Declaration public HtmlBuilder() Methods Br() Append a break. Declaration public void Br() Clear() Clear the contents of this builder. Declaration public void Clear() H1(string) Append a header. Declaration public void H1(string content) Parameters Type Name Description string content The content to append. H2(string) Append a header. Declaration public void H2(string content) Parameters Type Name Description string content The content to append. H3(string) Append a header. Declaration public void H3(string content) Parameters Type Name Description string content The content to append. H4(string) Append a header. Declaration public void H4(string content) Parameters Type Name Description string content The content to append. Ol(params string[]) Append an ordered list of items. Declaration public void Ol(params string[] items) Parameters Type Name Description string[] items The items to add to the ordered list. P(string) Append a paragraph. Declaration public void P(string content) Parameters Type Name Description string content The content to append. Raw(string) Append raw content. Declaration public void Raw(string content) Parameters Type Name Description string content The content to append. ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description string A string that represents the current object. Overrides object.ToString() Ul(params string[]) Append an unordered list of items. Declaration public void Ul(params string[] items) Parameters Type Name Description string[] items The items to add to the unordered list."
  },
  "api/NetAF.Targets.Html.Rendering.HtmlFrame.html": {
    "href": "api/NetAF.Targets.Html.Rendering.HtmlFrame.html",
    "title": "Class HtmlFrame | NetAF",
    "summary": "Class HtmlFrame Provides an HTML frame for displaying a command based interface. Inheritance object HtmlFrame Implements IFrame Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Namespace: NetAF.Targets.Html.Rendering Assembly: NetAF.dll Syntax public sealed class HtmlFrame : IFrame Constructors HtmlFrame(HtmlBuilder) Provides an HTML frame for displaying a command based interface. Declaration public HtmlFrame(HtmlBuilder builder) Parameters Type Name Description HtmlBuilder builder The builder that creates the frame. Properties Css Get or set the CSS to use for styling the frame. Declaration public string Css { get; set; } Property Value Type Description string Methods Render(IFramePresenter) Render this frame on a presenter. Declaration public void Render(IFramePresenter presenter) Parameters Type Name Description IFramePresenter presenter The presenter. ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description string A string that represents the current object. Overrides object.ToString() Implements IFrame"
  },
  "api/NetAF.Targets.Html.Rendering.html": {
    "href": "api/NetAF.Targets.Html.Rendering.html",
    "title": "Namespace NetAF.Targets.Html.Rendering | NetAF",
    "summary": "Namespace NetAF.Targets.Html.Rendering Classes HtmlBuilder Provides a class for building HTML. HtmlFrame Provides an HTML frame for displaying a command based interface."
  },
  "api/NetAF.Targets.Html.html": {
    "href": "api/NetAF.Targets.Html.html",
    "title": "Namespace NetAF.Targets.Html | NetAF",
    "summary": "Namespace NetAF.Targets.Html Classes HtmlAdapter Provides an adapter for HTML."
  },
  "api/NetAF.Targets.Text.Rendering.FrameBuilders.TextAboutFrameBuilder.html": {
    "href": "api/NetAF.Targets.Text.Rendering.FrameBuilders.TextAboutFrameBuilder.html",
    "title": "Class TextAboutFrameBuilder | NetAF",
    "summary": "Class TextAboutFrameBuilder Provides a builder of about frames. Inheritance object TextAboutFrameBuilder Implements IAboutFrameBuilder IFrameBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Targets.Text.Rendering.FrameBuilders Assembly: NetAF.dll Syntax public sealed class TextAboutFrameBuilder : IAboutFrameBuilder, IFrameBuilder Constructors TextAboutFrameBuilder(StringBuilder) Provides a builder of about frames. Declaration public TextAboutFrameBuilder(StringBuilder builder) Parameters Type Name Description StringBuilder builder A builder to use for the text layout. Methods Build(string, Game, Size) Build a frame. Declaration public IFrame Build(string title, Game game, Size size) Parameters Type Name Description string title The title. Game game The game. Size size The size of the frame. Returns Type Description IFrame The frame. Implements IAboutFrameBuilder IFrameBuilder"
  },
  "api/NetAF.Targets.Text.Rendering.FrameBuilders.TextCommandListFrameBuilder.html": {
    "href": "api/NetAF.Targets.Text.Rendering.FrameBuilders.TextCommandListFrameBuilder.html",
    "title": "Class TextCommandListFrameBuilder | NetAF",
    "summary": "Class TextCommandListFrameBuilder Provides a builder of command list frames. Inheritance object TextCommandListFrameBuilder Implements ICommandListFrameBuilder IFrameBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Targets.Text.Rendering.FrameBuilders Assembly: NetAF.dll Syntax public sealed class TextCommandListFrameBuilder : ICommandListFrameBuilder, IFrameBuilder Constructors TextCommandListFrameBuilder(StringBuilder) Provides a builder of command list frames. Declaration public TextCommandListFrameBuilder(StringBuilder builder) Parameters Type Name Description StringBuilder builder A builder to use for the text layout. Methods Build(string, string, CommandHelp[], Size) Build a frame. Declaration public IFrame Build(string title, string description, CommandHelp[] commandHelp, Size size) Parameters Type Name Description string title The title. string description The description. CommandHelp[] commandHelp The command help. Size size The size of the frame. Returns Type Description IFrame The frame. Implements ICommandListFrameBuilder IFrameBuilder"
  },
  "api/NetAF.Targets.Text.Rendering.FrameBuilders.TextCompletionFrameBuilder.html": {
    "href": "api/NetAF.Targets.Text.Rendering.FrameBuilders.TextCompletionFrameBuilder.html",
    "title": "Class TextCompletionFrameBuilder | NetAF",
    "summary": "Class TextCompletionFrameBuilder Provides a builder of completion frames. Inheritance object TextCompletionFrameBuilder Implements ICompletionFrameBuilder IFrameBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Targets.Text.Rendering.FrameBuilders Assembly: NetAF.dll Syntax public sealed class TextCompletionFrameBuilder : ICompletionFrameBuilder, IFrameBuilder Constructors TextCompletionFrameBuilder(StringBuilder) Provides a builder of completion frames. Declaration public TextCompletionFrameBuilder(StringBuilder builder) Parameters Type Name Description StringBuilder builder A builder to use for the text layout. Methods Build(string, string, Size) Build a frame. Declaration public IFrame Build(string message, string reason, Size size) Parameters Type Name Description string message The message to display to the user. string reason The reason the game ended. Size size The size of the frame. Returns Type Description IFrame The frame. Implements ICompletionFrameBuilder IFrameBuilder"
  },
  "api/NetAF.Targets.Text.Rendering.FrameBuilders.TextConversationFrameBuilder.html": {
    "href": "api/NetAF.Targets.Text.Rendering.FrameBuilders.TextConversationFrameBuilder.html",
    "title": "Class TextConversationFrameBuilder | NetAF",
    "summary": "Class TextConversationFrameBuilder Provides a builder of conversation frames. Inheritance object TextConversationFrameBuilder Implements IConversationFrameBuilder IFrameBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Targets.Text.Rendering.FrameBuilders Assembly: NetAF.dll Syntax public sealed class TextConversationFrameBuilder : IConversationFrameBuilder, IFrameBuilder Constructors TextConversationFrameBuilder(StringBuilder) Provides a builder of conversation frames. Declaration public TextConversationFrameBuilder(StringBuilder builder) Parameters Type Name Description StringBuilder builder A builder to use for the text layout. Properties CommandTitle Get or set the command title. Declaration public string CommandTitle { get; set; } Property Value Type Description string Methods Build(string, IConverser, CommandHelp[], Size) Build a frame. Declaration public IFrame Build(string title, IConverser converser, CommandHelp[] contextualCommands, Size size) Parameters Type Name Description string title The title to display to the user. IConverser converser The converser. CommandHelp[] contextualCommands The contextual commands to display. Size size The size of the frame. Returns Type Description IFrame The frame. Implements IConversationFrameBuilder IFrameBuilder"
  },
  "api/NetAF.Targets.Text.Rendering.FrameBuilders.TextGameOverFrameBuilder.html": {
    "href": "api/NetAF.Targets.Text.Rendering.FrameBuilders.TextGameOverFrameBuilder.html",
    "title": "Class TextGameOverFrameBuilder | NetAF",
    "summary": "Class TextGameOverFrameBuilder Provides a builder of game over frames. Inheritance object TextGameOverFrameBuilder Implements IGameOverFrameBuilder IFrameBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Targets.Text.Rendering.FrameBuilders Assembly: NetAF.dll Syntax public sealed class TextGameOverFrameBuilder : IGameOverFrameBuilder, IFrameBuilder Constructors TextGameOverFrameBuilder(StringBuilder) Provides a builder of game over frames. Declaration public TextGameOverFrameBuilder(StringBuilder builder) Parameters Type Name Description StringBuilder builder A builder to use for the text layout. Methods Build(string, string, Size) Build a frame. Declaration public IFrame Build(string message, string reason, Size size) Parameters Type Name Description string message The message to display to the user. string reason The reason the game ended. Size size The size of the frame. Returns Type Description IFrame The frame. Implements IGameOverFrameBuilder IFrameBuilder"
  },
  "api/NetAF.Targets.Text.Rendering.FrameBuilders.TextHelpFrameBuilder.html": {
    "href": "api/NetAF.Targets.Text.Rendering.FrameBuilders.TextHelpFrameBuilder.html",
    "title": "Class TextHelpFrameBuilder | NetAF",
    "summary": "Class TextHelpFrameBuilder Provides a builder of help frames. Inheritance object TextHelpFrameBuilder Implements IHelpFrameBuilder IFrameBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Targets.Text.Rendering.FrameBuilders Assembly: NetAF.dll Syntax public sealed class TextHelpFrameBuilder : IHelpFrameBuilder, IFrameBuilder Constructors TextHelpFrameBuilder(StringBuilder) Provides a builder of help frames. Declaration public TextHelpFrameBuilder(StringBuilder builder) Parameters Type Name Description StringBuilder builder A builder to use for the text layout. Methods Build(string, CommandHelp, Prompt[], Size) Build a frame. Declaration public IFrame Build(string title, CommandHelp commandHelp, Prompt[] prompts, Size size) Parameters Type Name Description string title The title. CommandHelp commandHelp The command help. Prompt[] prompts The prompts to display for the command. Size size The size of the frame. Returns Type Description IFrame The frame. Implements IHelpFrameBuilder IFrameBuilder"
  },
  "api/NetAF.Targets.Text.Rendering.FrameBuilders.TextHistoryFrameBuilder.html": {
    "href": "api/NetAF.Targets.Text.Rendering.FrameBuilders.TextHistoryFrameBuilder.html",
    "title": "Class TextHistoryFrameBuilder | NetAF",
    "summary": "Class TextHistoryFrameBuilder Provides a builder of history frames. Inheritance object TextHistoryFrameBuilder Implements IHistoryFrameBuilder IFrameBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Targets.Text.Rendering.FrameBuilders Assembly: NetAF.dll Syntax public sealed class TextHistoryFrameBuilder : IHistoryFrameBuilder, IFrameBuilder Constructors TextHistoryFrameBuilder(StringBuilder) Provides a builder of history frames. Declaration public TextHistoryFrameBuilder(StringBuilder builder) Parameters Type Name Description StringBuilder builder A builder to use for the text layout. Properties MaxEntries Get or set the maximum number of entries to be displayed. For unlimited use HistoryManager.NoLimit. Declaration public int MaxEntries { get; set; } Property Value Type Description int Methods Build(string, string, HistoryEntry[], Size) Build a frame. Declaration public IFrame Build(string title, string description, HistoryEntry[] entries, Size size) Parameters Type Name Description string title The title. string description The description. HistoryEntry[] entries The entries. Size size The size of the frame. Returns Type Description IFrame The frame. Implements IHistoryFrameBuilder IFrameBuilder"
  },
  "api/NetAF.Targets.Text.Rendering.FrameBuilders.TextNoteFrameBuilder.html": {
    "href": "api/NetAF.Targets.Text.Rendering.FrameBuilders.TextNoteFrameBuilder.html",
    "title": "Class TextNoteFrameBuilder | NetAF",
    "summary": "Class TextNoteFrameBuilder Provides a builder of note frames. Inheritance object TextNoteFrameBuilder Implements INoteFrameBuilder IFrameBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Targets.Text.Rendering.FrameBuilders Assembly: NetAF.dll Syntax public sealed class TextNoteFrameBuilder : INoteFrameBuilder, IFrameBuilder Constructors TextNoteFrameBuilder(StringBuilder) Provides a builder of note frames. Declaration public TextNoteFrameBuilder(StringBuilder builder) Parameters Type Name Description StringBuilder builder A builder to use for the text layout. Methods Build(string, string, NoteEntry[], Size) Build a frame. Declaration public IFrame Build(string title, string description, NoteEntry[] entries, Size size) Parameters Type Name Description string title The title. string description The description. NoteEntry[] entries The entries. Size size The size of the frame. Returns Type Description IFrame The frame. Implements INoteFrameBuilder IFrameBuilder"
  },
  "api/NetAF.Targets.Text.Rendering.FrameBuilders.TextReactionFrameBuilder.html": {
    "href": "api/NetAF.Targets.Text.Rendering.FrameBuilders.TextReactionFrameBuilder.html",
    "title": "Class TextReactionFrameBuilder | NetAF",
    "summary": "Class TextReactionFrameBuilder Provides a builder of reaction frames. Inheritance object TextReactionFrameBuilder Implements IReactionFrameBuilder IFrameBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Targets.Text.Rendering.FrameBuilders Assembly: NetAF.dll Syntax public sealed class TextReactionFrameBuilder : IReactionFrameBuilder, IFrameBuilder Constructors TextReactionFrameBuilder(StringBuilder) Provides a builder of reaction frames. Declaration public TextReactionFrameBuilder(StringBuilder builder) Parameters Type Name Description StringBuilder builder A builder to use for the text layout. Methods Build(string, string, bool, Size) Build a frame. Declaration public IFrame Build(string title, string message, bool isError, Size size) Parameters Type Name Description string title The title to display to the user. string message The message to display to the user. bool isError If the message is an error. Size size The size of the frame. Returns Type Description IFrame The frame. Implements IReactionFrameBuilder IFrameBuilder"
  },
  "api/NetAF.Targets.Text.Rendering.FrameBuilders.TextRegionMapBuilder.html": {
    "href": "api/NetAF.Targets.Text.Rendering.FrameBuilders.TextRegionMapBuilder.html",
    "title": "Class TextRegionMapBuilder | NetAF",
    "summary": "Class TextRegionMapBuilder Provides a builder for region maps. Inheritance object GeneralRegionMapBuilder TextRegionMapBuilder Implements IRegionMapBuilder Inherited Members GeneralRegionMapBuilder.LockedExit GeneralRegionMapBuilder.UnLockedExit GeneralRegionMapBuilder.EmptySpace GeneralRegionMapBuilder.VerticalBoundary GeneralRegionMapBuilder.HorizontalBoundary GeneralRegionMapBuilder.LowerLevel GeneralRegionMapBuilder.Player GeneralRegionMapBuilder.Focus GeneralRegionMapBuilder.CurrentFloorIndicator GeneralRegionMapBuilder.ShowLowerFloors GeneralRegionMapBuilder.MaxSize GeneralRegionMapBuilder.SupportsPan GeneralRegionMapBuilder.SupportsZoom GeneralRegionMapBuilder.BuildRegionMap(Region, Point3D, RegionMapDetail) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Targets.Text.Rendering.FrameBuilders Assembly: NetAF.dll Syntax public sealed class TextRegionMapBuilder : GeneralRegionMapBuilder, IRegionMapBuilder Constructors TextRegionMapBuilder(StringBuilder) Provides a builder for region maps. Declaration public TextRegionMapBuilder(StringBuilder builder) Parameters Type Name Description StringBuilder builder A builder to use for the text layout. Methods Adapt(GridStringBuilder) Adapt the region map for the target. Declaration protected override void Adapt(GridStringBuilder regionMapBuilder) Parameters Type Name Description GridStringBuilder regionMapBuilder The region map builder. Overrides GeneralRegionMapBuilder.Adapt(GridStringBuilder) Implements IRegionMapBuilder"
  },
  "api/NetAF.Targets.Text.Rendering.FrameBuilders.TextRegionMapFrameBuilder.html": {
    "href": "api/NetAF.Targets.Text.Rendering.FrameBuilders.TextRegionMapFrameBuilder.html",
    "title": "Class TextRegionMapFrameBuilder | NetAF",
    "summary": "Class TextRegionMapFrameBuilder Provides a builder of region map frames. Inheritance object TextRegionMapFrameBuilder Implements IRegionMapFrameBuilder IFrameBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Targets.Text.Rendering.FrameBuilders Assembly: NetAF.dll Syntax public sealed class TextRegionMapFrameBuilder : IRegionMapFrameBuilder, IFrameBuilder Constructors TextRegionMapFrameBuilder(StringBuilder, IRegionMapBuilder) Provides a builder of region map frames. Declaration public TextRegionMapFrameBuilder(StringBuilder builder, IRegionMapBuilder regionMapBuilder) Parameters Type Name Description StringBuilder builder A builder to use for the string layout. IRegionMapBuilder regionMapBuilder A builder for region maps. Properties CommandTitle Get or set the command title. Declaration public string CommandTitle { get; set; } Property Value Type Description string SupportsPan Get if this frame builder supports panning. Declaration public bool SupportsPan { get; } Property Value Type Description bool SupportsZoom Get if this frame builder supports zooming. Declaration public bool SupportsZoom { get; } Property Value Type Description bool Methods Build(Region, Point3D, RegionMapDetail, CommandHelp[], Size) Build a frame. Declaration public IFrame Build(Region region, Point3D focusPosition, RegionMapDetail detail, CommandHelp[] contextualCommands, Size size) Parameters Type Name Description Region region The region. Point3D focusPosition The position to focus on. RegionMapDetail detail The level of detail to use. CommandHelp[] contextualCommands The contextual commands to display. Size size The size of the frame. Returns Type Description IFrame The frame. Implements IRegionMapFrameBuilder IFrameBuilder"
  },
  "api/NetAF.Targets.Text.Rendering.FrameBuilders.TextRoomMapBuilder.html": {
    "href": "api/NetAF.Targets.Text.Rendering.FrameBuilders.TextRoomMapBuilder.html",
    "title": "Class TextRoomMapBuilder | NetAF",
    "summary": "Class TextRoomMapBuilder Provides a room map builder. Inheritance object GeneralRoomMapBuilder TextRoomMapBuilder Implements IRoomMapBuilder Inherited Members GeneralRoomMapBuilder.LockedExit GeneralRoomMapBuilder.ItemOrCharacterInRoom GeneralRoomMapBuilder.VerticalBoundary GeneralRoomMapBuilder.HorizontalBoundary GeneralRoomMapBuilder.VerticalExitBorder GeneralRoomMapBuilder.HorizontalExitBorder GeneralRoomMapBuilder.Corner GeneralRoomMapBuilder.KeyPadding GeneralRoomMapBuilder.MaxSize GeneralRoomMapBuilder.RenderedSize GeneralRoomMapBuilder.BuildRoomMap(Room, ViewPoint, KeyType) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Targets.Text.Rendering.FrameBuilders Assembly: NetAF.dll Syntax public sealed class TextRoomMapBuilder : GeneralRoomMapBuilder, IRoomMapBuilder Constructors TextRoomMapBuilder(StringBuilder) Provides a room map builder. Declaration public TextRoomMapBuilder(StringBuilder builder) Parameters Type Name Description StringBuilder builder A builder to use for the text layout. Methods Adapt(GridStringBuilder) Adapt the room map for the target. Declaration protected override void Adapt(GridStringBuilder roomMapBuilder) Parameters Type Name Description GridStringBuilder roomMapBuilder The room map builder. Overrides GeneralRoomMapBuilder.Adapt(GridStringBuilder) Implements IRoomMapBuilder"
  },
  "api/NetAF.Targets.Text.Rendering.FrameBuilders.TextSceneFrameBuilder.html": {
    "href": "api/NetAF.Targets.Text.Rendering.FrameBuilders.TextSceneFrameBuilder.html",
    "title": "Class TextSceneFrameBuilder | NetAF",
    "summary": "Class TextSceneFrameBuilder Provides a builder of scene frames. Inheritance object TextSceneFrameBuilder Implements ISceneFrameBuilder IFrameBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Targets.Text.Rendering.FrameBuilders Assembly: NetAF.dll Syntax public sealed class TextSceneFrameBuilder : ISceneFrameBuilder, IFrameBuilder Constructors TextSceneFrameBuilder(StringBuilder, IRoomMapBuilder) Provides a builder of scene frames. Declaration public TextSceneFrameBuilder(StringBuilder builder, IRoomMapBuilder roomMapBuilder) Parameters Type Name Description StringBuilder builder A builder to use for the text layout. IRoomMapBuilder roomMapBuilder A builder to use for room maps. Properties CommandTitle Get or set the command title. Declaration public string CommandTitle { get; set; } Property Value Type Description string Methods Build(Room, ViewPoint, PlayableCharacter, CommandHelp[], KeyType, Size) Build a frame. Declaration public IFrame Build(Room room, ViewPoint viewPoint, PlayableCharacter player, CommandHelp[] contextualCommands, KeyType keyType, Size size) Parameters Type Name Description Room room Specify the Room. ViewPoint viewPoint Specify the viewpoint from the room. PlayableCharacter player Specify the player. CommandHelp[] contextualCommands The contextual commands to display. KeyType keyType The type of key to use. Size size The size of the frame. Returns Type Description IFrame The frame. Implements ISceneFrameBuilder IFrameBuilder"
  },
  "api/NetAF.Targets.Text.Rendering.FrameBuilders.TextTitleFrameBuilder.html": {
    "href": "api/NetAF.Targets.Text.Rendering.FrameBuilders.TextTitleFrameBuilder.html",
    "title": "Class TextTitleFrameBuilder | NetAF",
    "summary": "Class TextTitleFrameBuilder Provides a builder of title frames. Inheritance object TextTitleFrameBuilder Implements ITitleFrameBuilder IFrameBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Targets.Text.Rendering.FrameBuilders Assembly: NetAF.dll Syntax public sealed class TextTitleFrameBuilder : ITitleFrameBuilder, IFrameBuilder Constructors TextTitleFrameBuilder(StringBuilder) Provides a builder of title frames. Declaration public TextTitleFrameBuilder(StringBuilder builder) Parameters Type Name Description StringBuilder builder A builder to use for the text layout. Methods Build(string, string, Size) Build a frame. Declaration public IFrame Build(string title, string description, Size size) Parameters Type Name Description string title The title. string description The description. Size size The size of the frame. Returns Type Description IFrame The frame. Implements ITitleFrameBuilder IFrameBuilder"
  },
  "api/NetAF.Targets.Text.Rendering.FrameBuilders.html": {
    "href": "api/NetAF.Targets.Text.Rendering.FrameBuilders.html",
    "title": "Namespace NetAF.Targets.Text.Rendering.FrameBuilders | NetAF",
    "summary": "Namespace NetAF.Targets.Text.Rendering.FrameBuilders Classes TextAboutFrameBuilder Provides a builder of about frames. TextCommandListFrameBuilder Provides a builder of command list frames. TextCompletionFrameBuilder Provides a builder of completion frames. TextConversationFrameBuilder Provides a builder of conversation frames. TextGameOverFrameBuilder Provides a builder of game over frames. TextHelpFrameBuilder Provides a builder of help frames. TextHistoryFrameBuilder Provides a builder of history frames. TextNoteFrameBuilder Provides a builder of note frames. TextReactionFrameBuilder Provides a builder of reaction frames. TextRegionMapBuilder Provides a builder for region maps. TextRegionMapFrameBuilder Provides a builder of region map frames. TextRoomMapBuilder Provides a room map builder. TextSceneFrameBuilder Provides a builder of scene frames. TextTitleFrameBuilder Provides a builder of title frames."
  },
  "api/NetAF.Targets.Text.Rendering.TextFrame.html": {
    "href": "api/NetAF.Targets.Text.Rendering.TextFrame.html",
    "title": "Class TextFrame | NetAF",
    "summary": "Class TextFrame Provides text frame for displaying a command based interface. Inheritance object TextFrame Implements IFrame Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Namespace: NetAF.Targets.Text.Rendering Assembly: NetAF.dll Syntax public sealed class TextFrame : IFrame Constructors TextFrame(StringBuilder) Provides text frame for displaying a command based interface. Declaration public TextFrame(StringBuilder builder) Parameters Type Name Description StringBuilder builder The builder that creates the frame. Methods Render(IFramePresenter) Render this frame on a presenter. Declaration public void Render(IFramePresenter presenter) Parameters Type Name Description IFramePresenter presenter The presenter. ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description string A string that represents the current object. Overrides object.ToString() Implements IFrame"
  },
  "api/NetAF.Targets.Text.Rendering.html": {
    "href": "api/NetAF.Targets.Text.Rendering.html",
    "title": "Namespace NetAF.Targets.Text.Rendering | NetAF",
    "summary": "Namespace NetAF.Targets.Text.Rendering Classes TextFrame Provides text frame for displaying a command based interface."
  },
  "api/NetAF.Targets.Text.TextAdapter.html": {
    "href": "api/NetAF.Targets.Text.TextAdapter.html",
    "title": "Class TextAdapter | NetAF",
    "summary": "Class TextAdapter Provides an adapter for text. Inheritance object TextAdapter Implements IIOAdapter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Targets.Text Assembly: NetAF.dll Syntax public sealed class TextAdapter : IIOAdapter Constructors TextAdapter(IFramePresenter) Provides an adapter for text. Declaration public TextAdapter(IFramePresenter presenter) Parameters Type Name Description IFramePresenter presenter The presenter to use for presenting frames. Methods ConvertGridStringBuilderToString(GridStringBuilder, bool) Convert the contents of a GridStringBuilder to a string. Declaration public static string ConvertGridStringBuilderToString(GridStringBuilder builder, bool padEmptyCharacters = true) Parameters Type Name Description GridStringBuilder builder The GridStringBuilder to convert. bool padEmptyCharacters Specify if empty characters should be padded with a space. Returns Type Description string A string representing the contents of the GridStringBuilder. RenderFrame(IFrame) Render a frame. Declaration public void RenderFrame(IFrame frame) Parameters Type Name Description IFrame frame The frame to render. Setup(Game) Setup for a game. Declaration public void Setup(Game game) Parameters Type Name Description Game game The game to set up for. Implements IIOAdapter"
  },
  "api/NetAF.Targets.Text.html": {
    "href": "api/NetAF.Targets.Text.html",
    "title": "Namespace NetAF.Targets.Text | NetAF",
    "summary": "Namespace NetAF.Targets.Text Classes TextAdapter Provides an adapter for text."
  },
  "api/NetAF.Utilities.IAssetTemplate-1.html": {
    "href": "api/NetAF.Utilities.IAssetTemplate-1.html",
    "title": "Interface IAssetTemplate<T> | NetAF",
    "summary": "Interface IAssetTemplate<T> Represents any object that is a template for an asset. Namespace: NetAF.Utilities Assembly: NetAF.dll Syntax public interface IAssetTemplate<out T> Type Parameters Name Description T The type of asset being templated. Methods Instantiate() Instantiate a new instance of the templated asset. Declaration T Instantiate() Returns Type Description T The asset."
  },
  "api/NetAF.Utilities.OverworldMaker.html": {
    "href": "api/NetAF.Utilities.OverworldMaker.html",
    "title": "Class OverworldMaker | NetAF",
    "summary": "Class OverworldMaker Provides a class for helping to make Regions. Inheritance object OverworldMaker Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Utilities Assembly: NetAF.dll Syntax public sealed class OverworldMaker Constructors OverworldMaker(Identifier, Description, params RegionMaker[]) Provides a class for helping to make Regions. Declaration public OverworldMaker(Identifier identifier, Description description, params RegionMaker[] regionMakers) Parameters Type Name Description Identifier identifier An identifier for the region. Description description A description for the region. RegionMaker[] regionMakers The region makes to use to construct regions. OverworldMaker(string, string, params RegionMaker[]) Initializes a new instance of the OverworldMaker class. Declaration public OverworldMaker(string identifier, string description, params RegionMaker[] regionMakers) Parameters Type Name Description string identifier An identifier for the region. string description A description for the region. RegionMaker[] regionMakers The region makes to use to construct regions. Methods Make() Make an overworld. Declaration public Overworld Make() Returns Type Description Overworld The created overworld."
  },
  "api/NetAF.Utilities.RegionMaker.html": {
    "href": "api/NetAF.Utilities.RegionMaker.html",
    "title": "Class RegionMaker | NetAF",
    "summary": "Class RegionMaker Provides a class for helping to make Regions. Inheritance object RegionMaker Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Utilities Assembly: NetAF.dll Syntax public sealed class RegionMaker Constructors RegionMaker(Identifier, Description) Provides a class for helping to make Regions. Declaration public RegionMaker(Identifier identifier, Description description) Parameters Type Name Description Identifier identifier An identifier for the region. Description description A description for the region. RegionMaker(string, string) Initializes a new instance of the RegionMaker class. Declaration public RegionMaker(string identifier, string description) Parameters Type Name Description string identifier An identifier for the region. string description A description for the region. Properties this[int, int, int] Get or set the room at a location. Declaration public Room this[int x, int y, int z] { get; set; } Parameters Type Name Description int x The x position. int y The y position. int z The z position. Property Value Type Description Room The room. Methods CanPlaceRoom(int, int, int) Determine if a room can be placed at a location Declaration public bool CanPlaceRoom(int x, int y, int z) Parameters Type Name Description int x The X position. int y The Y position. int z The Z position. Returns Type Description bool True if the room can be placed, else false. GetRoomPositions() Get all current room positions. Declaration public RoomPosition[] GetRoomPositions() Returns Type Description RoomPosition[] The room positions. Make() Make a region. Declaration public Region Make() Returns Type Description Region The created region. Make(RoomPosition) Make a region. Declaration public Region Make(RoomPosition startPosition) Parameters Type Name Description RoomPosition startPosition The start position. Returns Type Description Region The created region. Make(int, int, int) Make a region. Declaration public Region Make(int x, int y, int z) Parameters Type Name Description int x The start x position. int y The start y position. int z The start z position. Returns Type Description Region The created region."
  },
  "api/NetAF.Utilities.StringUtilities.html": {
    "href": "api/NetAF.Utilities.StringUtilities.html",
    "title": "Class StringUtilities | NetAF",
    "summary": "Class StringUtilities Provides a helper class for string interpretation. Inheritance object StringUtilities Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Utilities Assembly: NetAF.dll Syntax public static class StringUtilities Fields CR Get the character for carriage return. Declaration public const char CR = '\\r' Field Value Type Description char LF Get the character for line feed. Declaration public const char LF = '\\n' Field Value Type Description char Newline Get the new line string. Declaration public const char Newline = '\\n' Field Value Type Description char Methods ConstructAttributesAsString(Dictionary<Attribute, int>) Construct a line describing a series of attributes. Declaration public static string ConstructAttributesAsString(Dictionary<Attribute, int> attributes) Parameters Type Name Description Dictionary<Attribute, int> attributes The attributes. Returns Type Description string The sentence. ConstructExaminablesAsSentence(IExaminable[]) Construct a sentence describing a series of examinables. Declaration public static string ConstructExaminablesAsSentence(IExaminable[] examinables) Parameters Type Name Description IExaminable[] examinables The examinables. Returns Type Description string The sentence. CutLineFromParagraph(ref string, int) Cut a line from a paragraph. Declaration public static string CutLineFromParagraph(ref string paragraph, int maxWidth) Parameters Type Name Description string paragraph The paragraph. int maxWidth The max line length. Returns Type Description string The line cut from the paragraph. ExtractNextWordFromString(ref string) Extract the next word from a string. This will remove the word from the input string. Declaration public static string ExtractNextWordFromString(ref string input) Parameters Type Name Description string input The input string. Returns Type Description string The extracted work. PreenInput(string) Preen input to remove any ambiguity around special characters. Declaration public static string PreenInput(string input) Parameters Type Name Description string input The input. Returns Type Description string The preened input. SplitTextToVerbAndNoun(string, out string, out string) Split text in to a verb and a noun. Declaration public static void SplitTextToVerbAndNoun(string text, out string verb, out string noun) Parameters Type Name Description string text The text to split. string verb The verb. string noun The noun."
  },
  "api/NetAF.Utilities.html": {
    "href": "api/NetAF.Utilities.html",
    "title": "Namespace NetAF.Utilities | NetAF",
    "summary": "Namespace NetAF.Utilities Classes OverworldMaker Provides a class for helping to make Regions. RegionMaker Provides a class for helping to make Regions. StringUtilities Provides a helper class for string interpretation. Interfaces IAssetTemplate<T> Represents any object that is a template for an asset."
  },
  "docs/architecture.html": {
    "href": "docs/architecture.html",
    "title": "Architecture | NetAF",
    "summary": "Architecture Overview NetAF has a simple architecture and understanding it will help when developing games. NetAF runs on a Target, this could be the Console, a Blazor web app, WPF app etc. A Game acts as a container for assets, characters and logic. However it cannot be executed directly. The GameExecutor is responsible for executing games, and provides a single point for input from the user being fed to the game. The Target passes user input to the GameExecutor. The GameExecutor passes the input into the executing Game. The Game then and passes the input to its own Interpreter (for handling global input) and the Interpreter for the current GameMode (for handling mode specific input) in order to process it. The Interpreter tries to parse the input and if successful return an instance of Command. The returned Command is then invoked and returns a Reaction that details the result. Some instances of ICommand deal with interactions between assets. In this case an Interaction between an Item and a target is invoked and the result returned the ICommand which will return an appropriate Reaction. The Game processes the Reaction. Some instances of Reaction will trigger the Game to change GameMode to either display the Reaction or enter anotherGameMode. When a GameMode is rendered a IFrameBuilder can be used to generate an instance of IFrame. An instance of IFrame can be rendered on to an IIOAdapter which will display the IFrame to the user. Extensibility NetAF is designed to be extensible. ICommand allows commands to be added. IInterpreter allows commands to be interpreted. IGameMode allows custom modes to be added to a Game. IFrameBuilders allows custom instances of IFrame to be created which are used to render the game state to the user. IIOAdaper provides an interface to get input from the user and render the game state back to them. SystemConsoleAdapter provides a wrapper around System.Console, however custom implementations can be added to support different types of application."
  },
  "docs/attributes.html": {
    "href": "docs/attributes.html",
    "title": "Attributes | NetAF",
    "summary": "Attributes Overview All examinable objects can have attributes. Attributes provide a way of adding a lot of depth to games. For example, attributes could be used to buy and sell items, contain a characters XP or HP or even provide a way to add durability to items. Use To add to an existing attribute or to create a new one use the Add method. var player = new PlayableCharacter(\"Player\", string.Empty); player.Attributes.Add(\"$\", 10); To subtract from an existing attribute use the Subtract method. player.Attributes.Subtract(\"$\", 10); Attributes values can be capped. In this example the $ attribute is limited to a range of 0 - 100. Adding or subtracting will not cause the value of the attribute to change outside of this range. var cappedAttribute = new Attribute(\"$\", \"Dollars.\", 0, 100); player.Attributes.Add(cappedAttribute, 50); An example - buying an Item from a NonPlayableCharacter. The following is an example of buying an Item from NonPlayableCharacter. Here a trader has a spade. The player can only buy the spade if they have at least $5. The conversation will jump to the correct paragraph based on if they choose to buy the spade or not. If the player chooses to buy the spade and has enough $ the transaction is made and the spade changes hands. const string currency = \"$\"; var player = new PlayableCharacter(\"Player\", string.Empty); player.Attributes.Add(currency, 10); var trader = new NonPlayableCharacter(\"Trader\", string.Empty); var spade = new Item(\"Spade\", string.Empty); trader.AcquireItem(spade); trader.Conversation = new Conversation( new Paragraph(\"What will you buy?\") { Responses = [ new Response(\"Spade\", new ByCallback(() => player.Attributes.GetValue(currency) >= 5 ? new ToName(\"BoughtSpade\") : new ToName(\"NotEnough\"))), new Response(\"Nothing\", new Last()) ] }, new Paragraph(\"Here it is.\", _ => { player.Attributes.Subtract(currency, 5); trader.Attributes.Add(currency, 5); trader.Give(spade, player); }, new First(), \"BoughtSpade\"), new Paragraph(\"You don't have enough money.\", new First(), \"NotEnough\"), new Paragraph(\"Fine.\") ); This is just one example of using attributes to add depth to a game."
  },
  "docs/commands.html": {
    "href": "docs/commands.html",
    "title": "Commands | NetAF",
    "summary": "Commands Overview There are three main types of Command. Game Commands are used to interact with the game. Global Commands are used to interact with the program running the game. Custom Commands allow developers to add custom commands to the game without having to worry about extended the games interpreters. Scene Commands Drop Allows players to drop an item. R can be used as a shortcut. drop sword The player can also drop all items. drop all Examine Allows players to examine any asset. X can be used as a shortcut. Examine will examine the current room. examine The player themselves can be examined with me or the players name. examine me or examine ben The same is true for Regions, Overworlds, Items and Exits. Take Allows the player to take an Item. T can be used as a shortcut. take sword Take all allows the player to take all takeables Items in the current Room. take all Talk Talk allows the player to start a conversation with a NonPlayableCharacter. L can be used as a shortcut. If only a single NonPlayableCharacter is in the current Room no argument needs to be specified. talk However, if the current Room contains two or more NonPlayableCharacters then to and the NonPlayableCharacters name must be specified. talk to dave Use Use allows the player to use the Items that the player has or that are in the current Room. use sword Items can be used on the Player, the Room, an Exit, a NonPlayableCharacter or another Item. The target must be specified with the on keyword. use sword on me Or use sword on bush Move Regions are traversed with direction commands. North or N moves north. East or E moves east. South or S moves south. West or W moves west. Down or D moves down. Up or U moves up. End Only valid during a conversation with a NonPlayableCharacter, the End command will end the conversation. end Global Commands About Displays a screen containing information about the game. about Commands On / Commands Off Toggles the display of the contextual commands on the screen on and off. commands on Or commands off Exit Exit the current game. exit Commands Displays a list of all available commands. commands Notes Displays any gathered in-game notes. notes History Displays all in-game history. history Help Displays a help screen for a specific command. help examine Key On / Key Off Toggles the display of the map key on and off. key on Or key off Map Displays the Region map screen. map New Starts a new game. new Custom Commands Custom commands can be added to many of the assets, including Room, PlayableCharacter, NonPlayableCharacter, Item and Exit."
  },
  "docs/conditional-descriptions.html": {
    "href": "docs/conditional-descriptions.html",
    "title": "Conditional Descriptions | NetAF",
    "summary": "Conditional Descriptions Overview Normally assets are assigned a Description during the constructor. This is what is returned when the asset is examined. Descriptions are usually specified as a string. var item = new Item(\"The items name\", \"The items description.\"); They can also be specified as a Description. var item = new Item(new Identifier(\"The items name\"), new Description(\"The items description.\")); However, sometimes it may be desirable to have a conditional description that can change based on the state of the asset. Conditional descriptions can be specified with ConditionalDescription and contain a lambda which determines which one of two strings are returned when the asset is examined. // the player, just for demo purposes var player = new PlayableCharacter(\"Ben\", \"A man.\"); // the description to use when the condition is true var trueString = \"A gleaming sword, owned by Ben.\"; // the string to use when the condition is false var falseString = \"A gleaming sword, without an owner.\"; // a lambda that determines which string is returned Condition condition = () => player.FindItem(\"Sword\", out _); // the conditional description itself var conditionalDescription = new ConditionalDescription(trueString, falseString, condition); // create the item with the conditional description var sword = new Item(new Identifier(\"Sword\"), conditionalDescription); For more complicated scenarios the MultiConditionalDescription can be used to return a description for multiple different conditions. // the player, just for demo purposes var player = new PlayableCharacter(\"Ben\", \"A man.\"); // the description to use when no condition is true var fallbackString = \"No condition is true.\"; // the first described condition when var firstCondition = new DescribedCondition(() => player.Name == \"Ben\", \"Condition 1 is true.\"); // the second described condition when var secondCondition = new DescribedCondition(() => player.Name == \"Dave\", \"Condition 2 is true.\"); // the multi conditional description itself var multiConditionalDescription = new MultiConditionalDescription(fallbackString, firstCondition, secondCondition); // create the item with the conditional description var passport = new Item(new Identifier(\"Passport\"), multiConditionalDescription);"
  },
  "docs/end-conditions.html": {
    "href": "docs/end-conditions.html",
    "title": "End Conditions | NetAF",
    "summary": "End Conditions Overview The EndCheck class allows the game to determine if it has come to an end. Each game has two end conditions GameOverCondition when the game is over, but has not been won. CompletionCondition when the game is over because it has been won. Use When an EndCheck is invoked it returns an EndCheckResult. The EndCheckResult details the result of the check to see if the game has ended. private static EndCheckResult IsGameOver(Game game) { if (game.Player.IsAlive) return EndCheckResult.NotEnded; return new EndCheckResult(true, \"Game Over\", \"You died!\"); } This method can be used as an EndCheck: EndCheck gameOverCheck = IsGameOver; The GameOverCondition and CompletionCondition are passed in to the game as arguments when a game is created."
  },
  "docs/execution.html": {
    "href": "docs/execution.html",
    "title": "Execution | NetAF",
    "summary": "Execution Overview The GameExecutor is responsible for managing the execution of games. Only one game can be executed at a time. Contol Calling Execute will begin execution of a game. An instance of GameCreator should be passed in. GameExecutor.Execute(gameCreator); When an update needs to be made to the game the GameExecutor.Update() method should be called. Calling Update allows input to be passed to the game to be interpreted and actioned. GameExecutor.Update(\"my command\"); If a game should be cancelled then the GameExecutor.CancelExecution() method should be called. This will cancel the execution of any running game. GameExecutor.CancelExecution(); Custom Automation Execution Controllers When calling Execute a IGameExecutionAutomationController can be optionally passed in as an argument. If this is left null then no controller will be used and the game will only update when Update is called. This is desirable for most targets, for example event-driven targets like WPF. However some targets have different execution models, like the System.Console which uses linear execution, require a little more work to get them running smoothly. In these cases an insance of IGameExecutionAutomationController can be created to assist with capturing input and updating the game. ConsoleExecutionController As an example, here is the code for the ConsoleExecutionController used for controlling updates for the System.Console. using NetAF.Logic; using NetAF.Logic.Modes; using NetAF.Utilities; using System; using System.Threading; using System.Threading.Tasks; namespace NetAF.Targets.Console { /// <summary> /// Controls the automation of a game targeting the System.Console. /// </summary> public class ConsoleExecutionController : IGameExecutionAutomationController { #region Fields private CancellationTokenSource tokenSource; #endregion #region Destructor /// <summary> /// Handle destruction of the ConsoleExecutionController. /// </summary> ~ConsoleExecutionController() { tokenSource?.Dispose(); } #endregion #region StaticMethods /// <summary> /// Wait for a key press asynchronously. /// </summary> /// <param name=\"key\">The ASCII code of the key to wait for.</param> /// <param name=\"token\">The cancellation token.</param> /// <returns>True if the key pressed returned the same ASCII character as the key property, else false.</returns> private static async Task<bool> WaitForKeyPressAsync(char key, CancellationToken token) { return await Task.Run(() => { bool result; try { result = System.Console.ReadKey().KeyChar == key; } catch (OperationCanceledException) { result = false; } return result; }, token); } /// <summary> /// Wait for acknowledgment. /// </summary> /// <returns>True if the acknowledgment was received correctly, else false.</returns> private static async Task<bool> WaitForAcknowledgeAsync(CancellationToken token) { return await Task.Run(async () => { bool result; try { result = await WaitForKeyPressAsync(StringUtilities.CR, token); } catch (OperationCanceledException) { result = false; } return result; }, token); } /// <summary> /// Wait for input asynchronously. /// </summary> /// <param name=\"token\">The cancellation token.</param> /// <returns>The input.</returns> public static async Task<string> WaitForInputAsync(CancellationToken token) { return await Task.Run(async () => { string result; try { result = await System.Console.In.ReadLineAsync(); } catch (OperationCanceledException) { result = string.Empty; } return result; }, token); } /// <summary> /// Get input from the user asynchronously. /// </summary> /// <param name=\"game\">The game to get the input for.</param> /// <param name=\"token\">The token.</param> /// <returns>The user input.</returns> private static async Task<string> GetInputAsync(Game game, CancellationToken token) { // input is handled based on the current modes type switch (game.Mode.Type) { case GameModeType.Information: // wait for acknowledge while (!await WaitForAcknowledgeAsync(token)) { // something other was entered, render again game.Mode.Render(game); } // acknowledge complete return string.Empty; case GameModeType.Interactive: // get and return user input return await WaitForInputAsync(token); default: throw new NotImplementedException($\"No handling for case {game.Mode.Type}.\"); } } #endregion #region Implementation of IGameExecutionAutomationController /// <summary> /// Begin execution of a game, asynchronously. /// </summary> /// <returns>The task.</returns> public async Task BeginAsync(Game game) { tokenSource?.Dispose(); tokenSource = new CancellationTokenSource(); while (game.State != GameState.Finished && !tokenSource.Token.IsCancellationRequested) { var input = await GetInputAsync(game, tokenSource.Token); var result = GameExecutor.Update(input); if (!result.Completed) break; } } /// <summary> /// Cancel execution, asynchronously. /// </summary> /// <returns>The task.</returns> public async Task CancelAsync() { await tokenSource.CancelAsync(); } #endregion } }"
  },
  "docs/exit.html": {
    "href": "docs/exit.html",
    "title": "Exit | NetAF",
    "summary": "Exit Overview An Exit is essentially a connector between to adjoining rooms. Use An Exit can be simply instantiated with a direction. var exit = new Exit(Direction.North); An Exit can be hidden from the player by setting its IsPlayerVisible property to false, this can be set in the constructor. var exit = new Exit(Direction.North, false); Or set explicitly. exit.IsPlayerVisible = false; Optionally, a description of the Exit can be specified. var exit = new Exit(Direction.North, true, new Description(\"A door covered in ivy.\")); This will be returned if the player examines the Exit. Like all Examinable objects, an Exit can be assigned custom commands. Exit exit = null; exit = new(Direction.North, commands: [ new CustomCommand(new CommandHelp(\"Shove\", \"Shove the door.\"), true, true, (game, args) => { exit.Unlock(); return new Reaction(ReactionResult.OK, \"The door swung open.\"); }) ]);"
  },
  "docs/frame-builders.html": {
    "href": "docs/frame-builders.html",
    "title": "Frame Builders | NetAF",
    "summary": "Frame Builders Overview In NetAF output is handled using the FrameBuilders. A FrameBuilder is essentially a class that builds a Frame that can render a specific state in the game. This Frame can then be rendered on a target by calling its Render method. Think of the FrameBuilder as the builder of the output and the Frame as the output itself. There are a few types of FrameBuilder, each responsible for rendering a specific game state. SceneFrameBuilder is responsible for building frames that render the reactions to input in a game. ReactionFrameBuilder is responsible for building frames that render the scenes in a game. TitleFrameBuilder is responsible for building the title screen frame. RegionMapFrameBuilder is responsible for building a frame that displays a map of a Region. TransitionFrameBuilder is responsible for building frames that display transitions. AboutFrameBuilder is responsible for building a frame to display the about information. HelpFrameBuilder is responsible for building frames to display the help. GameOverFrameBuilder is responsible for building a frame to display the game over screen. CompletionFrameBuilder is responsible for building a frame to display the completion screen. ConversationFrameBuilder is responsible for building a frame that can render a conversation. VisualFrameBuilder is responsible for building a frame to render a visual. LogFrameBuilder is responsible for building a frame to render any gathered information. A game accepts a FrameBuilderCollection. A FrameBuilderCollection is a collection of all the different FrameBuilders required to render a game. All FrameBuilders are extensible, so the output for all parts of the game can be fully customised."
  },
  "docs/getting-started.html": {
    "href": "docs/getting-started.html",
    "title": "Getting Started | NetAF",
    "summary": "Getting Started Adding the NuGet package to your project You need to pull NetAF into your project. The easiest way to do this is to add the NuGet package. The latest package and installation instructions are available here. First Game Once the package has been installed it's time to jump in and start building your first game. Setup To start with create a new Console application. Regardless of target framework, it should look something like this: namespace NetAF.GettingStarted { internal class Program { private static void Main(string[] args) { } } } Adding a PlayableCharacter Every game requires a character to play as, lets add that next: private static PlayableCharacter CreatePlayer() { return new PlayableCharacter(\"Dave\", \"A young boy on a quest to find the meaning of life.\"); } In this example whenever CreatePlayer is called a new PlayableCharacter will be created. The character is called \"Dave\" and has a description that describes him as \"A young boy on a quest to find the meaning of life.\". Creating the game world The game world consists of a hierarchy of three tiers: Overworld, Region and Room. We will create a simple Region with two Rooms. We can do this directly in the Main function for simplicity. To start with lets make the Rooms: private static void Main(string[] args) { var cavern = new Room(\"Cavern\", \"A dark cavern set in to the base of the mountain.\", new Exit(Direction.North)); var tunnel = new Room(\"Tunnel\", \"A dark tunnel leading inside the mountain.\", new Exit(Direction.South)); } Although the Rooms haven't been added to a Region yet there are exits in place that will allow the player to move between them. Games are boring without Items to interact with, let's add an item to the tunnel: var holyGrail = new Item(\"Holy Grail\", \"A dull golden cup, looks pretty old.\", true); tunnel.AddItem(holyGrail); Looking good, but the Rooms need to be contained within a Region. RegionMaker simplifies this process, but sometimes creating a Region directly may be more appropriate if more control is needed. Here we will use RegionMaker: var regionMaker = new RegionMaker(\"Mountain\", \"An imposing volcano just East of town.\") { [0, 0, 0] = cavern, [0, 1, 0] = tunnel }; This needs more breaking down. The RegionMaker will create a region called \"Mountain\" with a description of \"An imposing volcano just East of town.\". The region will contain two rooms, the cavern and the tunnel. The cavern will be added at position x 0, y 0, z 0. The tunnel will be added at position x 0, y 1, z 0, north of the cavern. The game world is nearly complete, but the Region needs to exist within an Overworld for it to be finished. We will use OverworldMaker to achieve this: var overworldMaker = new OverworldMaker(\"Daves World\", \"An ancient kingdom.\", regionMaker); This will create an Overworld called \"Daves World\" which is described as \"An ancient kingdom\" and contains a single Region. All together the code looks like this: var cavern = new Room(\"Cavern\", \"A dark cavern set in to the base of the mountain.\", new Exit(Direction.North)); var tunnel = new Room(\"Tunnel\", \"A dark tunnel leading inside the mountain.\", new Exit(Direction.South)); var holyGrail = new Item(\"Holy Grail\", \"A dull golden cup, looks pretty old.\", true); tunnel.AddItem(holyGrail); var regionMaker = new RegionMaker(\"Mountain\", \"An imposing volcano just East of town.\") { [0, 0, 0] = cavern, [0, 1, 0] = tunnel }; var overworldMaker = new OverworldMaker(\"Daves World\", \"An ancient kingdom.\", regionMaker); Checking if the game is complete For a game to come to an end it needs to reach either a game over state or a completion state. Firstly lets look at the logic that determines if the game is complete. An EndCheck is required, which returns an EndCheckResult that determines if the game is complete. In this example lets make a method that determines if the game is complete. The game is complete if the player has the holy grail: private static EndCheckResult IsGameComplete(Game game) { if (!game.Player.FindItem(\"Holy Grail\", out _)) return EndCheckResult.NotEnded; return new EndCheckResult(true, \"Game Complete\", \"You have the Holy Grail!\"); } If the player has the holy grail then the EndCheckResult will return that the game has ended, and have a title that will read \"Game Complete\" and a description that reads \"You have the Holy Grail!\". A common game over state may be if the player dies: private static EndCheckResult IsGameOver(Game game) { if (game.Player.IsAlive) return EndCheckResult.NotEnded; return new EndCheckResult(true, \"Game Over\", \"You died!\"); } Creating the game The game now has all the required assets and logic it just needs some boilerplate to tie everything together before it is ready to play. A GameCreator is required to instantiate an instance of a Game. This is so that new instances of the Game can be created as and when required. var gameCreator = Game.Create( new GameInfo(\"The Life of Dave\", \"A very low budget adventure.\", \"Ben Pollard\"), \"Dave awakes to find himself in a cavern...\", AssetGenerator.Custom(overworldMaker.Make, CreatePlayer), new GameEndConditions(IsGameComplete, IsGameOver), new GameConfiguration(new ConsoleAdapter(), FrameBuilderCollections.Console, new(80, 50))); This requires some breaking down. The Game class has a Create method that can be used to create instances of Game. This takes the following arguments: GameInfo - information about the game. Introduction - an introduction to the game. AssetGenerator - a generator for game assets. GameEndConditions - conditions for determining if the game has been completed or otherwise ended. GameConfiguration - a configuration for the game, including display size, error prefix and other elements. Executing the game The game is executed simply by calling the static Execute method on GameExecutor and passing in the game creator. Because this game is running on the console the ConsoleExecutionController class can be used to handle the quirks of executing the game on the console. In most cases no execution controller is required. GameExecutor.Execute(gameCreator, new ConsoleExecutionController()); If the game was executing on a differen target, for example in a WPF application or a Blazor web app all that is required to update the game is to call GameExecutor.Update with any input that should be passed to the game. GameExecutor.Update(\"Input to the game can be passed in like this.\"); Bringing it all together The full example code should look like this: using NetAF.Assets; using NetAF.Assets.Characters; using NetAF.Assets.Locations; using NetAF.Logic; using NetAF.Targets.Console; using NetAF.Utilities; namespace NetAF.GettingStarted { internal class Program { private static EndCheckResult IsGameComplete(Game game) { if (!game.Player.FindItem(\"Holy Grail\", out _)) return EndCheckResult.NotEnded; return new EndCheckResult(true, \"Game Complete\", \"You have the Holy Grail!\"); } private static EndCheckResult IsGameOver(Game game) { if (game.Player.IsAlive) return EndCheckResult.NotEnded; return new EndCheckResult(true, \"Game Over\", \"You died!\"); } private static PlayableCharacter CreatePlayer() { return new PlayableCharacter(\"Dave\", \"A young boy on a quest to find the meaning of life.\"); } private static void Main(string[] args) { var cavern = new Room(\"Cavern\", \"A dark cavern set in to the base of the mountain.\", new Exit(Direction.North)); var tunnel = new Room(\"Tunnel\", \"A dark tunnel leading inside the mountain.\", new Exit(Direction.South)); var holyGrail = new Item(\"Holy Grail\", \"A dull golden cup, looks pretty old.\", true); tunnel.AddItem(holyGrail); var regionMaker = new RegionMaker(\"Mountain\", \"An imposing volcano just East of town.\") { [0, 0, 0] = cavern, [0, 1, 0] = tunnel }; var overworldMaker = new OverworldMaker(\"Daves World\", \"An ancient kingdom.\", regionMaker); var gameCreator = Game.Create( new GameInfo(\"The Life of Dave\", \"A very low budget adventure.\", \"Ben Pollard\"), \"Dave awakes to find himself in a cavern...\", AssetGenerator.Custom(overworldMaker.Make, CreatePlayer), new GameEndConditions(IsGameComplete, IsGameOver), new GameConfiguration(new ConsoleAdapter(), FrameBuilderCollections.Console, new(80, 50))); GameExecutor.Execute(gameCreator, new ConsoleExecutionController()); } } } Simply build and run the application and congratulations, you have a working NetAF game!"
  },
  "docs/items.html": {
    "href": "docs/items.html",
    "title": "Item | NetAF",
    "summary": "Item Overview Items can be used to add interactivity with a game. Items can be something that a player can take with them, or they may be static in a Room. Use An Item can be simply instantiated with a name and description. var sword = new Item(\"Sword\", \"A heroes sword.\"); By default, an Item is not takeable and is tied to a Room. If it is takeable this can be specified in the constructor. var sword = new Item(\"Sword\", \"A heroes sword.\", true); Like all Examinable objects, an Item can be assigned custom commands. Item bomb = new(\"Bomb\", \"A bomb\", commands: [ new CustomCommand(new CommandHelp(\"Cut wire\", \"Cut the red wire.\"), true, (game, args) => { game.Player.Kill(); return new Reaction(ReactionResult.Fatal, \"Boom!\"); }) ]); Interaction Interactions can be set up between different assets in the game. The Interaction contains the result of the interaction, and allows the game to react to the interaction. var dartsBoard = new Item(\"Darts board\", \"A darts board.\"); var dart = new Item(\"Dart\", \"A dart\", interaction: item => { if (item == dartsBoard) return new Interaction(InteractionResult.NoChange, item, \"The dart stuck in the darts board.\"); return new Interaction(InteractionResult.NoChange, item); });"
  },
  "docs/non-playable-character.html": {
    "href": "docs/non-playable-character.html",
    "title": "NonPlayableCharacter | NetAF",
    "summary": "NonPlayableCharacter Overview A NonPlayableCharacter represents any character that the player may meet throughout the game. Use A NonPlayableCharacter can be simply instantiated with a name and description. var goblin = new NonPlayableCharacter(\"Goblin\", \"A vile goblin.\"); A NonPlayableCharacter can give an item to another NonPlayableCharacter. var daisy = new Item(\"Daisy\", \"A beautiful daisy that is sure to cheer up even the most miserable creature.\"); npc.Give(daisy, goblin); NonPlayableCharacters can contain custom commands that allow the user to directly interact with the character or other assets. NonPlayableCharacter goblin = new(\"Goblin\", \"A vile goblin\", commands: [ new CustomCommand(new CommandHelp(\"Smile\", \"Crack a smile.\"), true, (game, args) => { return new Reaction(ReactionResult.OK, \"Well that felt weird.\"); }) ]); Conversations A NonPlayableCharacter can hold a conversation with the player. A Conversation contains Paragraphs. A Paragraph can contain one or more Responses. A Response can contain a delta or other implementation of IEndOfPargraphInstruction to shift the conversation by, which will cause the conversation to jump paragraphs by the specified value. A Response can also contain a callback to perform some action when the player selects that option. NonPlayableCharacter goblin = new(\"Goblin\", \"A vile goblin\", conversation: new( new Paragraph(\"This is a question.\") { Responses = [ new Response(\"This is the first response.\", new Jump(1)), new Response(\"This is the second response.\", new Jump(2)), new Response(\"This is the third response.\", new Jump(3)) ] }, new Paragraph(\"You picked first response, return to start of conversation.\", new GoTo(1)), new Paragraph(\"You picked second response, return to start of conversation.\", new GoTo(1)), new Paragraph(\"You picked third response, you are dead.\", game => game.Player.Kill()) ));"
  },
  "docs/notes.html": {
    "href": "docs/notes.html",
    "title": "Notes | NetAF",
    "summary": "Notes Overview The NoteManager can be used to storing any useful information that the player acquires throughout the adventure. This can then be viewed with the Notes command. Adding a note To add a new entry use the Add method on the games NoteManager. game.NoteManager.Add(new(\"demo\", \"This is my note.\")); Each entry has a name that allows the entry to be easily referenced and content, which is the content that is displayed to the user. Removing a note To add an existing entry use the Remove method on the games NoteManager. game.NoteManager.Remove(\"demo\"); Expiring a note If you want to keep an element active in the notes, but want it to be marked as expired use the Expire method on the games NoteManager. game.NoteManager.Expire(\"demo\"); Some frame builders may render expired notes differently. Getting a reference to Game In some contexts no local reference will be available to point to the instance of the running Game. In these cases GameExecutor.ExecutingGame can be used. GameExecutor.ExecutingGame?.NoteManager.Add(new(\"demo\", \"This is my note.\"));"
  },
  "docs/overworld.html": {
    "href": "docs/overworld.html",
    "title": "Overworld | NetAF",
    "summary": "Overworld Overview An Overworld is the top level location in a game. A game can only contain a single Overworld. An Overworld can contain multiple Regions. Overworld ├── Region │ ├── Room │ ├── Room │ ├── Room ├── Region │ ├── Room │ ├── Room Use An Overworld can be simply instantiated with a name and description. var overworld = new Overworld(\"Name\", \"Description.\"); Regions can be added to the Overworld with the AddRegion method. overworld.AddRegion(region); Regions can be removed from an Overworld with the RemoveRegion method. overworld.RemoveRegion(region); The Overworld can be traversed with the Move method. overworld.Move(region); OverworldMaker The OverworldMaker simplifies the creation of the Overworld, when used in conjunction with RegionMakers. var overworldMaker = new OverworldMaker(\"Name\", \"Description.\", regionMakers); However, the main benefit of using an OverworldMaker is that it allows multiple instances of an Overworld to be created from a single definition of an Overworld. var overworld = overworldMaker.Make();"
  },
  "docs/persistence.html": {
    "href": "docs/persistence.html",
    "title": "Persistence | NetAF",
    "summary": "Persistence Overview NetAF provides persistence for game states. This allows a game to be saved and restored at any time. Saving Creating a restore point A named restore point can be created at any time by using the RestorePoint class: var restorePoint = RestorePoint.Create(\"File 1\", game); RestorePoint will serialize the state of the game so that it can be restored later. However it still needs to be saved to file if persistence is required. Saving a restore point to file NetAF uses Json for persistence as default, provided by the JsonSave class: JsonSave.ToFile(@\"C:\\save.json\", restorePoint, out _); Note: The extension is not important. Any extension can be used. Loading Loading a restore point from file A restore point can be loaded from file using the JsonSave class: JsonSave.FromFile(@\"C:\\save.json\", out var restorePoint, out _); Applying a restore point to a game The restore point can then be applied to a game to restore the state of the game: restorePoint.Game.Restore(game); Commands To simplify adding persistence to your game the Save and Load commands have been added. Both Save and Load are custom commands, which means they can be applied to any IExaminable. This gives you the power to choose how you implement saving and loading. Add these commands to the PlayableCharacter or Overworld to have them always available, or add them to items, rooms or any other in game object. Item typewriter = new(\"Typewriter\", \"An old style typewriter\") { Commands = [ new Save(), new Load() ] }; Registering dynamically loaded content It is recommended to add and remove content in the game by using the IsPlayerVisible property. This allows all content to be loaded when a game is created, which in turn allows serialization to function correctly. When a game is instantiated an instance of AssetCatalog is created which is a key component of serialization. If you choose to dynamically add an Item, NonPlayableCharacter or Room while a game is executing it may not serialize correctly as it will not be in the games AssetCatalog. This may be acceptable, however if you wish for the IExaminable to be serialized you need to register the instance of the IExaminable with the games AssetCatalog. Item sword = new(\"Sword\", \"The sword of destiny\"); game.Catalog.Register(sword); By registering with the AssetCatalog the game will be able to resolve references to the object when deserialization is applied. Sequencing Save Load"
  },
  "docs/playable-character.html": {
    "href": "docs/playable-character.html",
    "title": "PlayableCharacter | NetAF",
    "summary": "PlayableCharacter Overview A PlayableCharacter represents the character that the player plays as throughout the game. Each game has only a single PlayableCharacter. Use A PlayableCharacter can be simply instantiated with a name and description. var player = new PlayableCharacter(\"Ben\", \"A 39 year old man.\"); A PlayableCharacter can be also be instantiated with a list of Items. var player = new PlayableCharacter(\"Ben\", \"A 39 year old man.\", [ new Item(\"Guitar\", \"A PRS Custom 22, in whale blue, of course.\"), new Item(\"Wallet\", \"An empty wallet, of course.\") ]); A PlayableCharacter can be given items with the AddItem method. player.AddItem(new Item(\"Mallet\", \"A large mallet.\")); A PlayableCharacter can lose an item with the RemoveItem method. player.RemoveItem(mallet); A PlayableCharacter can give an item to a non-playable character. var goblin = new NonPlayableCharacter(\"Goblin\", \"A vile goblin.\"); var daisy = new Item(\"Daisy\", \"A beautiful daisy that is sure to cheer up even the most miserable creature.\"); player.Give(daisy, goblin); PlayableCharacters can contain custom commands that allow the user to directly interact with the character or other assets. PlayableCharacter player = new(\"Daisy\", \"A beautiful daisy that is sure to cheer up even the most miserable creature.\", commands: [ new CustomCommand(new CommandHelp(\"Punch wall\", \"Punch the wall.\"), true, (game, args) => { return new Reaction(ReactionResult.OK, \"You punched the wall.\"); }) ]);"
  },
  "docs/region.html": {
    "href": "docs/region.html",
    "title": "Region | NetAF",
    "summary": "Region Overview A Region is the intermediate level location in a game. An Overworld can contain multiple Regions. A Region can contain multiple Rooms. Overworld ├── Region │ ├── Room │ ├── Room │ ├── Room ├── Region │ ├── Room │ ├── Room A Region represents a 3D space. The x location always refers to the horizontal axis, with lower values being west and higher values being east. The y location always refers to the vertical axis, with lower values being south and higher values being north. The z location always refers to the depth axis, with lower values being down and higher values being up. Use A Region can be simply instantiated with a name and description. var region = new Region(\"Name\", \"Description.\"); Rooms can be added to the Region with the AddRoom method. The x, y and z location within the Region must be specified. region.AddRoom(room, 0, 0, 0); Rooms can be removed from a Region with the RemoveRoom method. region.RemoveRoom(room); The Region can be traversed with the Move method. region.Move(Direction.North); The start position, that is the position that the Player will start in when entering a Region, can be specified with SetStartPosition. region.SetStartPosition(0, 0, 0); The UnlockDoorPair method can be used to unlock an Exit in the current Room, which will also unlock the corresponding Exit in the adjoining Room. region.UnlockDoorPair(Direction.East); Like all Examinable objects, Regions can be assigned custom commands. Region region = null; region = new(\"Woodlands\", \"A quiet woodland.\", commands: [ new CustomCommand(new CommandHelp(\"Warp\", \"Warp to the start.\"), true, (game, args) => { region.JumpToRoom(0, 0, 0); return new Reaction(ReactionResult.OK, \"You warped to the start.\"); }) ]); RegionMaker The RegionMaker simplifies the creation of a Region. Rooms are added to the Region with a specified x, y and z position within the Region. var regionMaker = new RegionMaker(\"Region\", \"Description.\") { [0, 0, 0] = new Room(\"Room 1\", \"Description of room 1.\"), [1, 0, 0] = new Room(\"Room 2\", \"Description of room 2.\"), }; The main benefit of using a RegionMaker is that it allows multiple instances of a Region to be created from a single definition of a Region. var region = regionMaker.Make();"
  },
  "docs/room.html": {
    "href": "docs/room.html",
    "title": "Room | NetAF",
    "summary": "Room Overview A Room is the lowest level location in a game. A Region can contain multiple Rooms. Overworld ├── Region │ ├── Room │ ├── Room │ ├── Room ├── Region │ ├── Room │ ├── Room A Room can contain up to six Exits, one for each of the directions north, east, south, west, up and down. Use A Region can be simply instantiated with a name and description. var room = new Room(\"Name\", \"Description.\"); Items can be added to the Room with the AddItem method. room.AddItem(new Item(\"Name\", \"Description.\")); Items can be removed from a Room with the RemoveItem method. region.RemoveItem(item); Characters can be added to the Room with the AddCharacter method. room.AddCharacter(new NonPlayableCharacter(\"Name\", \"Description.\")); Characters can be removed from a Room with the RemoveCharacter method. region.RemoveCharacter(character); Rooms can contain custom commands that allow the user to directly interact with the Room. Room room = null; room = new(\"Dungeon\", \"A grim dungeon.\", commands: [ new CustomCommand(new CommandHelp(\"Pull lever\", \"Pull the lever.\"), true, (game, args) => { room.FindExit(Direction.East, true, out var exit); exit.Unlock(); return new Reaction(ReactionResult.OK, \"The exit was unlocked.\"); }) ]);"
  },
  "docs/visuals.html": {
    "href": "docs/visuals.html",
    "title": "Visuals | NetAF",
    "summary": "Visuals Overview Although NetAF is primarily focused on text and interactive fiction, there are times where adding a visual can enrich the game. GridVisualBuilder The GridVisualBuilder class can be used to create a picture that can be displayed in a game: // create a builder for drawing the tree var builder = new GridVisualBuilder(AnsiColor.Black, AnsiColor.BrightWhite); builder.Resize(new(11, 11)); // colors to use for the tree AnsiColor trunk = new(127, 50, 50); AnsiColor canopy = new(50, 200, 50); // draw the tree builder.SetCell(5, 0, canopy); builder.DrawRectangle(4, 1, 3, 1, canopy, canopy); builder.DrawRectangle(3, 2, 5, 1, canopy, canopy); builder.DrawRectangle(2, 3, 7, 1, canopy, canopy); builder.DrawRectangle(1, 4, 9, 1, canopy, canopy); builder.DrawRectangle(0, 5, 11, 1, canopy, canopy); builder.DrawRectangle(5, 5, 1, 6, trunk, trunk); // create a frame var frameBuilder = new ConsoleVisualFrameBuilder(new GridStringBuilder()); var frame = frameBuilder.Build(\"Tree\", \"A visual of a tree.\", builder, game.Configuration.DisplaySize); // display the frame in the game game.ChangeMode(new VisualMode(frame)); This will render the following: NetAF.Imaging The NetAF.Imaging extension package can be used to extend the basic NetAF visual functions to allow conversion of images to visuals that can be displayed in a game. VisualHelper Generating visuals is made easy with the VisualHelper class. The following example generates a visual on the console: var displaySize = new Size(80, 50); var adapter = new SystemConsoleAdapter(); var frame = VisualHelper.CreateFrame(@\"C:\\TestImage.jpg\", displaySize, CellAspectRatio.Console); adapter.RenderFrame(frame); This can be used in a game: var frame = VisualHelper.CreateFrame(@\"C:\\TestImage.jpg\", displaySize, CellAspectRatio.Console); game.ChangeMode(new VisualMode(frame)); Image a simple room that contains a command to look at the view. The source image for the view is this image: The code looks like this: return new Room(\"Hillside\", \"A wild hillside with a lone tree\", commands: [ new CustomCommand(new CommandHelp(\"Look at view\", \"Look at the current view.\"), true, true, (game, args) => { var frame = VisualHelper.CreateFrame(\"visuals-tree-original.jpg\", game.Configuration.DisplaySize, CellAspectRatio.Console); game.ChangeMode(new VisualMode(frame)); return new(ReactionResult.GameModeChanged, string.Empty); }) ]); And the output looks like this: Applying Textures A texturizer can be applied to add extra depth to the image. The ITexturizer interface allows custom texturizers to be created. BrightnessTexturizer adds textures to the visual based on the background color. var frame = VisualHelper.CreateFrame(@\"C:\\TestImage.jpg\", displaySize, CellAspectRatio.Console, new BrightnessTexturizer()); The texturized image looks like this:"
  },
  "index.html": {
    "href": "index.html",
    "title": "NetAF | NetAF",
    "summary": "NetAF NetAF is a C# library that provides a framework for building text adventures and interactive stories in .NET. The repo is open source and is available at https://github.com/benpollarduk/netaf. NetAF has a sister Kotlin implementation, Ktaf, which is available at https://github.com/benpollarduk/ktaf. This documentation site is a work in progress, if there are any topics that aren't covered that you would like to see included, or if you spot any mistakes please report them on the Issues page on GitHub."
  }
}