{
  "api/NetAF.Adapters.IIOAdapter.html": {
    "href": "api/NetAF.Adapters.IIOAdapter.html",
    "title": "Interface IIOAdapter | NetAF",
    "keywords": "Interface IIOAdapter Represents any object that provides an adapter for input. Namespace: NetAF.Adapters Assembly: NetAF.dll Syntax public interface IIOAdapter Methods | Edit this page View Source RenderFrame(IFrame) Render a frame. Declaration void RenderFrame(IFrame frame) Parameters Type Name Description IFrame frame The frame to render. | Edit this page View Source Setup(Game) Setup for a game. Declaration void Setup(Game game) Parameters Type Name Description Game game The game to set up for. | Edit this page View Source WaitForAcknowledge() Wait for acknowledgment. Declaration bool WaitForAcknowledge() Returns Type Description bool True if the acknowledgment was received correctly, else false. | Edit this page View Source WaitForInput() Wait for input. Declaration string WaitForInput() Returns Type Description string The input."
  },
  "api/NetAF.Adapters.SystemConsoleAdapter.html": {
    "href": "api/NetAF.Adapters.SystemConsoleAdapter.html",
    "title": "Class SystemConsoleAdapter | NetAF",
    "keywords": "Class SystemConsoleAdapter Provides an adapter for the System.Console. Inheritance object SystemConsoleAdapter Implements IIOAdapter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Adapters Assembly: NetAF.dll Syntax public sealed class SystemConsoleAdapter : IIOAdapter Methods | Edit this page View Source RenderFrame(IFrame) Render a frame. Declaration public void RenderFrame(IFrame frame) Parameters Type Name Description IFrame frame The frame to render. | Edit this page View Source Setup(Game) Setup for a game. Declaration public void Setup(Game game) Parameters Type Name Description Game game The game to set up for. | Edit this page View Source WaitForAcknowledge() Wait for acknowledgment. Declaration public bool WaitForAcknowledge() Returns Type Description bool True if the acknowledgment was received correctly, else false. | Edit this page View Source WaitForInput() Wait for input. Declaration public string WaitForInput() Returns Type Description string The input. Implements IIOAdapter"
  },
  "api/NetAF.Adapters.html": {
    "href": "api/NetAF.Adapters.html",
    "title": "Namespace NetAF.Adapters | NetAF",
    "keywords": "Namespace NetAF.Adapters Classes SystemConsoleAdapter Provides an adapter for the System.Console. Interfaces IIOAdapter Represents any object that provides an adapter for input."
  },
  "api/NetAF.Assets.Attributes.Attribute.html": {
    "href": "api/NetAF.Assets.Attributes.Attribute.html",
    "title": "Class Attribute | NetAF",
    "keywords": "Class Attribute Provides a description of an attribute. Inheritance object Attribute Implements IRestoreFromObjectSerialization<AttributeSerialization> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Assets.Attributes Assembly: NetAF.dll Syntax public class Attribute : IRestoreFromObjectSerialization<AttributeSerialization> Constructors | Edit this page View Source Attribute(string, string, int, int) Provides a description of an attribute. Declaration public Attribute(string name, string description, int minimum, int maximum) Parameters Type Name Description string name Specify the name of the attribute. string description Specify the description of the attribute. int minimum Specify the minimum limit of the attribute. int maximum Specify the maximum limit of the attribute. Properties | Edit this page View Source Description Get the description of the attribute. Declaration public string Description { get; } Property Value Type Description string | Edit this page View Source Maximum Get the maximum limit of the attribute. Declaration public int Maximum { get; } Property Value Type Description int | Edit this page View Source Minimum Get the minimum limit of the attribute. Declaration public int Minimum { get; } Property Value Type Description int | Edit this page View Source Name Get the name of the attribute. Declaration public string Name { get; } Property Value Type Description string Methods | Edit this page View Source FromSerialization(AttributeSerialization) Create a new Attribute from a serialization. Declaration public static Attribute FromSerialization(AttributeSerialization serialization) Parameters Type Name Description AttributeSerialization serialization The serialization to create the Attribute from. Returns Type Description Attribute | Edit this page View Source RestoreFrom(AttributeSerialization) Restore this object from a serialization. Declaration public void RestoreFrom(AttributeSerialization serialization) Parameters Type Name Description AttributeSerialization serialization The serialization to restore from. Implements IRestoreFromObjectSerialization<T>"
  },
  "api/NetAF.Assets.Attributes.AttributeManager.html": {
    "href": "api/NetAF.Assets.Attributes.AttributeManager.html",
    "title": "Class AttributeManager | NetAF",
    "keywords": "Class AttributeManager Provides a class for managing attributes. Inheritance object AttributeManager Implements IRestoreFromObjectSerialization<AttributeManagerSerialization> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Assets.Attributes Assembly: NetAF.dll Syntax public sealed class AttributeManager : IRestoreFromObjectSerialization<AttributeManagerSerialization> Properties | Edit this page View Source Count Get the number of attributes this manager has. Declaration public int Count { get; } Property Value Type Description int Methods | Edit this page View Source Add(Attribute, int) Add a value to an attribute. Declaration public void Add(Attribute attribute, int value) Parameters Type Name Description Attribute attribute The attribute. int value The value. | Edit this page View Source Add(string, int) Add a value to an attribute. Declaration public void Add(string attributeName, int value) Parameters Type Name Description string attributeName The name of the attribute. int value The value. | Edit this page View Source GetAsDictionary() Get all attributes as a dictionary. Declaration public Dictionary<Attribute, int> GetAsDictionary() Returns Type Description Dictionary<Attribute, int> A dictionary where the key are the attributes and the values are the values. | Edit this page View Source GetAttributes() Get all attributes. Declaration public Attribute[] GetAttributes() Returns Type Description Attribute[] An array of attributes. | Edit this page View Source GetValue(Attribute) Get the value of an attribute. Declaration public int GetValue(Attribute attribute) Parameters Type Name Description Attribute attribute The attribute. Returns Type Description int The value. | Edit this page View Source GetValue(string) Get the value of an attribute. Declaration public int GetValue(string attributeName) Parameters Type Name Description string attributeName The name of the attribute. Returns Type Description int The value. | Edit this page View Source Remove(Attribute) Remove an attribute. Declaration public void Remove(Attribute attribute) Parameters Type Name Description Attribute attribute The attribute. | Edit this page View Source Remove(string) Remove an attribute. Declaration public void Remove(string attributeName) Parameters Type Name Description string attributeName The name of the attribute. | Edit this page View Source RemoveAll() Remove all attributes. Declaration public void RemoveAll() | Edit this page View Source RestoreFrom(AttributeManagerSerialization) Restore this object from a serialization. Declaration public void RestoreFrom(AttributeManagerSerialization serialization) Parameters Type Name Description AttributeManagerSerialization serialization The serialization to restore from. | Edit this page View Source Subtract(Attribute, int) Subtract a value from an attribute. Declaration public void Subtract(Attribute attribute, int value) Parameters Type Name Description Attribute attribute The attribute. int value The value. | Edit this page View Source Subtract(string, int) Subtract a value from an attribute. Declaration public void Subtract(string attributeName, int value) Parameters Type Name Description string attributeName The name of the attribute. int value The value. Implements IRestoreFromObjectSerialization<T>"
  },
  "api/NetAF.Assets.Attributes.html": {
    "href": "api/NetAF.Assets.Attributes.html",
    "title": "Namespace NetAF.Assets.Attributes | NetAF",
    "keywords": "Namespace NetAF.Assets.Attributes Classes Attribute Provides a description of an attribute. AttributeManager Provides a class for managing attributes."
  },
  "api/NetAF.Assets.Characters.Character.html": {
    "href": "api/NetAF.Assets.Characters.Character.html",
    "title": "Class Character | NetAF",
    "keywords": "Class Character Represents a generic in game character. Inheritance object ExaminableObject Character NonPlayableCharacter PlayableCharacter Implements IInteractWithItem IItemContainer IExaminable IPlayerVisible IRestoreFromObjectSerialization<ExaminableSerialization> IRestoreFromObjectSerialization<CharacterSerialization> Inherited Members ExaminableObject.Examination ExaminableObject.Identifier ExaminableObject.Description ExaminableObject.Commands ExaminableObject.Attributes ExaminableObject.Examine(ExaminationScene) ExaminableObject.IsPlayerVisible ExaminableObject.RestoreFrom(ExaminableSerialization) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Assets.Characters Assembly: NetAF.dll Syntax public abstract class Character : ExaminableObject, IInteractWithItem, IItemContainer, IExaminable, IPlayerVisible, IRestoreFromObjectSerialization<ExaminableSerialization>, IRestoreFromObjectSerialization<CharacterSerialization> Properties | Edit this page View Source Interaction Get the interaction. Declaration public InteractionCallback Interaction { get; protected set; } Property Value Type Description InteractionCallback | Edit this page View Source IsAlive Get if this character is alive. Declaration public bool IsAlive { get; protected set; } Property Value Type Description bool | Edit this page View Source Items Get the items. Declaration public Item[] Items { get; protected set; } Property Value Type Description Item[] Methods | Edit this page View Source AddItem(Item) Add an item. Declaration public void AddItem(Item item) Parameters Type Name Description Item item The item to add. | Edit this page View Source FindItem(string, out Item, bool) Find an item. Declaration public virtual bool FindItem(string itemName, out Item item, bool includeInvisibleItems = false) Parameters Type Name Description string itemName The items name. Item item The item. bool includeInvisibleItems Specify if invisible items should be included. Returns Type Description bool True if the item was found. | Edit this page View Source Give(Item, Character) Give an item to another in game Character. Declaration public virtual bool Give(Item item, Character character) Parameters Type Name Description Item item The item to give. Character character The Character to give the item to. Returns Type Description bool True if the transaction completed OK, else false. | Edit this page View Source HasItem(Item, bool) Determine if this PlayableCharacter has an item. Declaration public virtual bool HasItem(Item item, bool includeInvisibleItems = false) Parameters Type Name Description Item item The item. bool includeInvisibleItems Specify if invisible items should be included. Returns Type Description bool True if the item is found, else false. | Edit this page View Source Interact(Item) Interact with an item. Declaration public Interaction Interact(Item item) Parameters Type Name Description Item item The item to interact with. Returns Type Description Interaction The interaction. | Edit this page View Source InteractWithItem(Item) Interact with a specified item. Declaration protected virtual Interaction InteractWithItem(Item item) Parameters Type Name Description Item item The item to interact with. Returns Type Description Interaction The interaction. | Edit this page View Source Kill() Kill the character. Declaration public virtual void Kill() | Edit this page View Source RemoveItem(Item) Remove an item. Declaration public void RemoveItem(Item item) Parameters Type Name Description Item item The item to remove. | Edit this page View Source RestoreFrom(CharacterSerialization) Restore this object from a serialization. Declaration public void RestoreFrom(CharacterSerialization serialization) Parameters Type Name Description CharacterSerialization serialization The serialization to restore from. Implements IInteractWithItem IItemContainer IExaminable IPlayerVisible IRestoreFromObjectSerialization<T> IRestoreFromObjectSerialization<T>"
  },
  "api/NetAF.Assets.Characters.IConverser.html": {
    "href": "api/NetAF.Assets.Characters.IConverser.html",
    "title": "Interface IConverser | NetAF",
    "keywords": "Interface IConverser Represents an object that can converse. Inherited Members IExaminable.Identifier IExaminable.Description IExaminable.Commands IExaminable.Attributes IExaminable.Examine(ExaminationScene) IPlayerVisible.IsPlayerVisible IRestoreFromObjectSerialization<ExaminableSerialization>.RestoreFrom(ExaminableSerialization) Namespace: NetAF.Assets.Characters Assembly: NetAF.dll Syntax public interface IConverser : IExaminable, IPlayerVisible, IRestoreFromObjectSerialization<ExaminableSerialization> Properties | Edit this page View Source Conversation Get the conversation. Declaration Conversation Conversation { get; } Property Value Type Description Conversation"
  },
  "api/NetAF.Assets.Characters.NonPlayableCharacter.html": {
    "href": "api/NetAF.Assets.Characters.NonPlayableCharacter.html",
    "title": "Class NonPlayableCharacter | NetAF",
    "keywords": "Class NonPlayableCharacter Represents a non-playable character. Inheritance object ExaminableObject Character NonPlayableCharacter Implements IInteractWithItem IItemContainer IRestoreFromObjectSerialization<CharacterSerialization> IConverser IExaminable IPlayerVisible IRestoreFromObjectSerialization<ExaminableSerialization> IRestoreFromObjectSerialization<NonPlayableCharacterSerialization> Inherited Members Character.IsAlive Character.Interaction Character.Kill() Character.HasItem(Item, bool) Character.FindItem(string, out Item, bool) Character.Give(Item, Character) Character.Interact(Item) Character.Items Character.AddItem(Item) Character.RemoveItem(Item) Character.RestoreFrom(CharacterSerialization) ExaminableObject.Examination ExaminableObject.Identifier ExaminableObject.Description ExaminableObject.Commands ExaminableObject.Attributes ExaminableObject.Examine(ExaminationScene) ExaminableObject.IsPlayerVisible ExaminableObject.RestoreFrom(ExaminableSerialization) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Assets.Characters Assembly: NetAF.dll Syntax public sealed class NonPlayableCharacter : Character, IInteractWithItem, IItemContainer, IRestoreFromObjectSerialization<CharacterSerialization>, IConverser, IExaminable, IPlayerVisible, IRestoreFromObjectSerialization<ExaminableSerialization>, IRestoreFromObjectSerialization<NonPlayableCharacterSerialization> Constructors | Edit this page View Source NonPlayableCharacter(Identifier, Description, Conversation, CustomCommand[], InteractionCallback, ExaminationCallback) Initializes a new instance of the NonPlayableCharacter class. Declaration public NonPlayableCharacter(Identifier identifier, Description description, Conversation conversation = null, CustomCommand[] commands = null, InteractionCallback interaction = null, ExaminationCallback examination = null) Parameters Type Name Description Identifier identifier The identifier. Description description The description. Conversation conversation The conversation. CustomCommand[] commands This objects commands. InteractionCallback interaction The interaction. ExaminationCallback examination The examination. | Edit this page View Source NonPlayableCharacter(Identifier, Description, bool, Conversation, CustomCommand[], InteractionCallback, ExaminationCallback) Initializes a new instance of the NonPlayableCharacter class. Declaration public NonPlayableCharacter(Identifier identifier, Description description, bool isAlive, Conversation conversation = null, CustomCommand[] commands = null, InteractionCallback interaction = null, ExaminationCallback examination = null) Parameters Type Name Description Identifier identifier The identifier. Description description The description. bool isAlive If this character is alive. Conversation conversation The conversation. CustomCommand[] commands This objects commands. InteractionCallback interaction The interaction. ExaminationCallback examination The examination. | Edit this page View Source NonPlayableCharacter(string, string, Conversation, CustomCommand[], InteractionCallback, ExaminationCallback) Initializes a new instance of the NonPlayableCharacter class. Declaration public NonPlayableCharacter(string identifier, string description, Conversation conversation = null, CustomCommand[] commands = null, InteractionCallback interaction = null, ExaminationCallback examination = null) Parameters Type Name Description string identifier The identifier. string description The description. Conversation conversation The conversation. CustomCommand[] commands This objects commands. InteractionCallback interaction The interaction. ExaminationCallback examination The examination. Properties | Edit this page View Source Conversation Get the conversation. Declaration public Conversation Conversation { get; } Property Value Type Description Conversation Methods | Edit this page View Source RestoreFrom(NonPlayableCharacterSerialization) Restore this object from a serialization. Declaration public void RestoreFrom(NonPlayableCharacterSerialization serialization) Parameters Type Name Description NonPlayableCharacterSerialization serialization The serialization to restore from. Implements IInteractWithItem IItemContainer IRestoreFromObjectSerialization<T> IConverser IExaminable IPlayerVisible IRestoreFromObjectSerialization<T> IRestoreFromObjectSerialization<T>"
  },
  "api/NetAF.Assets.Characters.PlayableCharacter.html": {
    "href": "api/NetAF.Assets.Characters.PlayableCharacter.html",
    "title": "Class PlayableCharacter | NetAF",
    "keywords": "Class PlayableCharacter Represents a playable character. Inheritance object ExaminableObject Character PlayableCharacter Implements IInteractWithItem IItemContainer IExaminable IPlayerVisible IRestoreFromObjectSerialization<ExaminableSerialization> IRestoreFromObjectSerialization<CharacterSerialization> Inherited Members Character.IsAlive Character.Interaction Character.Kill() Character.HasItem(Item, bool) Character.FindItem(string, out Item, bool) Character.Give(Item, Character) Character.Interact(Item) Character.Items Character.AddItem(Item) Character.RemoveItem(Item) Character.RestoreFrom(CharacterSerialization) ExaminableObject.Examination ExaminableObject.Identifier ExaminableObject.Description ExaminableObject.Commands ExaminableObject.Attributes ExaminableObject.Examine(ExaminationScene) ExaminableObject.IsPlayerVisible ExaminableObject.RestoreFrom(ExaminableSerialization) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Assets.Characters Assembly: NetAF.dll Syntax public sealed class PlayableCharacter : Character, IInteractWithItem, IItemContainer, IExaminable, IPlayerVisible, IRestoreFromObjectSerialization<ExaminableSerialization>, IRestoreFromObjectSerialization<CharacterSerialization> Constructors | Edit this page View Source PlayableCharacter(Identifier, Description, Item[], CustomCommand[], InteractionCallback, ExaminationCallback) Initializes a new instance of the PlayableCharacter class. Declaration public PlayableCharacter(Identifier identifier, Description description, Item[] items = null, CustomCommand[] commands = null, InteractionCallback interaction = null, ExaminationCallback examination = null) Parameters Type Name Description Identifier identifier The identifier. Description description The description. Item[] items The items. CustomCommand[] commands This objects commands. InteractionCallback interaction The interaction. ExaminationCallback examination The examination. | Edit this page View Source PlayableCharacter(Identifier, Description, bool, Item[], CustomCommand[], InteractionCallback, ExaminationCallback) Initializes a new instance of the PlayableCharacter class. Declaration public PlayableCharacter(Identifier identifier, Description description, bool canConverse, Item[] items = null, CustomCommand[] commands = null, InteractionCallback interaction = null, ExaminationCallback examination = null) Parameters Type Name Description Identifier identifier The identifier. Description description The description. bool canConverse If this object can converse with an IConverser. Item[] items The items. CustomCommand[] commands This objects commands. InteractionCallback interaction The interaction. ExaminationCallback examination The examination. | Edit this page View Source PlayableCharacter(string, string, Item[], CustomCommand[], InteractionCallback, ExaminationCallback) Initializes a new instance of the PlayableCharacter class. Declaration public PlayableCharacter(string identifier, string description, Item[] items = null, CustomCommand[] commands = null, InteractionCallback interaction = null, ExaminationCallback examination = null) Parameters Type Name Description string identifier The identifier. string description The description. Item[] items The items. CustomCommand[] commands This objects commands. InteractionCallback interaction The interaction. ExaminationCallback examination The examination. | Edit this page View Source PlayableCharacter(string, string, bool, Item[], CustomCommand[], InteractionCallback, ExaminationCallback) Initializes a new instance of the PlayableCharacter class. Declaration public PlayableCharacter(string identifier, string description, bool canConverse, Item[] items = null, CustomCommand[] commands = null, InteractionCallback interaction = null, ExaminationCallback examination = null) Parameters Type Name Description string identifier The identifier. string description The description. bool canConverse If this object can converse with an IConverser. Item[] items The items. CustomCommand[] commands This objects commands. InteractionCallback interaction The interaction. ExaminationCallback examination The examination. Properties | Edit this page View Source CanConverse Get if this playable character can converse with an IConverser. Declaration public bool CanConverse { get; } Property Value Type Description bool Implements IInteractWithItem IItemContainer IExaminable IPlayerVisible IRestoreFromObjectSerialization<T> IRestoreFromObjectSerialization<T>"
  },
  "api/NetAF.Assets.Characters.html": {
    "href": "api/NetAF.Assets.Characters.html",
    "title": "Namespace NetAF.Assets.Characters | NetAF",
    "keywords": "Namespace NetAF.Assets.Characters Classes Character Represents a generic in game character. NonPlayableCharacter Represents a non-playable character. PlayableCharacter Represents a playable character. Interfaces IConverser Represents an object that can converse."
  },
  "api/NetAF.Assets.Condition.html": {
    "href": "api/NetAF.Assets.Condition.html",
    "title": "Delegate Condition | NetAF",
    "keywords": "Delegate Condition Represents a callback for conditions. Namespace: NetAF.Assets Assembly: NetAF.dll Syntax public delegate bool Condition() Returns Type Description bool The result of the condition."
  },
  "api/NetAF.Assets.ConditionalDescription.html": {
    "href": "api/NetAF.Assets.ConditionalDescription.html",
    "title": "Class ConditionalDescription | NetAF",
    "keywords": "Class ConditionalDescription Represents a conditional description of an object. Inheritance object Description ConditionalDescription Inherited Members Description.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Assets Assembly: NetAF.dll Syntax public sealed class ConditionalDescription : Description Constructors | Edit this page View Source ConditionalDescription(string, string, Condition) Represents a conditional description of an object. Declaration public ConditionalDescription(string trueDescription, string falseDescription, Condition condition) Parameters Type Name Description string trueDescription The true description. string falseDescription The false description. Condition condition The condition. Properties | Edit this page View Source Condition Get or set the condition Declaration public Condition Condition { get; set; } Property Value Type Description Condition Methods | Edit this page View Source GetDescription() Get the description. Declaration public override string GetDescription() Returns Type Description string The description. Overrides Description.GetDescription()"
  },
  "api/NetAF.Assets.Description.html": {
    "href": "api/NetAF.Assets.Description.html",
    "title": "Class Description | NetAF",
    "keywords": "Class Description Represents a description of an object. Inheritance object Description ConditionalDescription Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Assets Assembly: NetAF.dll Syntax public class Description Constructors | Edit this page View Source Description(string) Represents a description of an object. Declaration public Description(string description) Parameters Type Name Description string description The description Properties | Edit this page View Source DefaultDescription Get or set the description. Declaration protected string DefaultDescription { get; set; } Property Value Type Description string | Edit this page View Source Empty Get an empty description. Declaration public static Description Empty { get; } Property Value Type Description Description Methods | Edit this page View Source GetDescription() Get the description. Declaration public virtual string GetDescription() Returns Type Description string The description."
  },
  "api/NetAF.Assets.ExaminableObject.html": {
    "href": "api/NetAF.Assets.ExaminableObject.html",
    "title": "Class ExaminableObject | NetAF",
    "keywords": "Class ExaminableObject Represents an object that can be examined. Inheritance object ExaminableObject Character Item Exit Overworld Region Room Implements IExaminable IPlayerVisible IRestoreFromObjectSerialization<ExaminableSerialization> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Assets Assembly: NetAF.dll Syntax public class ExaminableObject : IExaminable, IPlayerVisible, IRestoreFromObjectSerialization<ExaminableSerialization> Properties | Edit this page View Source Attributes Get the attribute manager for this object. Declaration public AttributeManager Attributes { get; } Property Value Type Description AttributeManager | Edit this page View Source Commands Get this objects commands. Declaration public CustomCommand[] Commands { get; protected set; } Property Value Type Description CustomCommand[] | Edit this page View Source Description Get a description of this object. Declaration public Description Description { get; protected set; } Property Value Type Description Description | Edit this page View Source Examination Get the callback handling all examination of this object. Declaration public ExaminationCallback Examination { get; protected set; } Property Value Type Description ExaminationCallback | Edit this page View Source Identifier Get this objects identifier. Declaration public Identifier Identifier { get; protected set; } Property Value Type Description Identifier | Edit this page View Source IsPlayerVisible Get or set if this is visible to the player. Declaration public bool IsPlayerVisible { get; set; } Property Value Type Description bool Methods | Edit this page View Source Examine(ExaminationScene) Examine this object. Declaration public virtual ExaminationResult Examine(ExaminationScene scene) Parameters Type Name Description ExaminationScene scene The scene this object is being examined from. Returns Type Description ExaminationResult A ExaminationResult detailing the examination of this object. | Edit this page View Source RestoreFrom(ExaminableSerialization) Restore this object from a serialization. Declaration public void RestoreFrom(ExaminableSerialization serialization) Parameters Type Name Description ExaminableSerialization serialization The serialization to restore from. Implements IExaminable IPlayerVisible IRestoreFromObjectSerialization<T>"
  },
  "api/NetAF.Assets.ExaminationCallback.html": {
    "href": "api/NetAF.Assets.ExaminationCallback.html",
    "title": "Delegate ExaminationCallback | NetAF",
    "keywords": "Delegate ExaminationCallback Represents the callback for examinations. Namespace: NetAF.Assets Assembly: NetAF.dll Syntax public delegate ExaminationResult ExaminationCallback(ExaminationRequest request) Parameters Type Name Description ExaminationRequest request The examination request. Returns Type Description ExaminationResult A string representing the result of the examination."
  },
  "api/NetAF.Assets.ExaminationRequest.html": {
    "href": "api/NetAF.Assets.ExaminationRequest.html",
    "title": "Class ExaminationRequest | NetAF",
    "keywords": "Class ExaminationRequest Represents a request to examine an IExaminable. Inheritance object ExaminationRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Assets Assembly: NetAF.dll Syntax public class ExaminationRequest Constructors | Edit this page View Source ExaminationRequest(IExaminable, ExaminationScene) Represents a request to examine an IExaminable. Declaration public ExaminationRequest(IExaminable examinable, ExaminationScene scene) Parameters Type Name Description IExaminable examinable The object being examined. ExaminationScene scene The scene the object is being examined from. | Edit this page View Source ExaminationRequest(IExaminable, Game) Initializes a new instance of the ExaminationRequest class. Declaration public ExaminationRequest(IExaminable examinable, Game game) Parameters Type Name Description IExaminable examinable The object being examined. Game game The executing game. Properties | Edit this page View Source Examinable Get the examinable object. Declaration public IExaminable Examinable { get; } Property Value Type Description IExaminable | Edit this page View Source Scene Get the examination scene. Declaration public ExaminationScene Scene { get; } Property Value Type Description ExaminationScene"
  },
  "api/NetAF.Assets.ExaminationResult.html": {
    "href": "api/NetAF.Assets.ExaminationResult.html",
    "title": "Class ExaminationResult | NetAF",
    "keywords": "Class ExaminationResult Represents the result of an examination. Inheritance object Result ExaminationResult Inherited Members Result.Description object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Assets Assembly: NetAF.dll Syntax public class ExaminationResult : Result Constructors | Edit this page View Source ExaminationResult(string) Initializes a new instance of the ExaminationResult class. Declaration public ExaminationResult(string description) Parameters Type Name Description string description A description of the result."
  },
  "api/NetAF.Assets.ExaminationScene.html": {
    "href": "api/NetAF.Assets.ExaminationScene.html",
    "title": "Class ExaminationScene | NetAF",
    "keywords": "Class ExaminationScene Represents a scene that an examination occurs in. Inheritance object ExaminationScene Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Assets Assembly: NetAF.dll Syntax public class ExaminationScene Constructors | Edit this page View Source ExaminationScene(Character, Room) Represents a scene that an examination occurs in. Declaration public ExaminationScene(Character examiner, Room room) Parameters Type Name Description Character examiner The character who is examining the object. Room room The room the examinable is being examined from. | Edit this page View Source ExaminationScene(Game) Initializes a new instance of the ExaminationScene class. Declaration public ExaminationScene(Game game) Parameters Type Name Description Game game The executing game. Properties | Edit this page View Source Examiner Get the examiner. Declaration public Character Examiner { get; } Property Value Type Description Character | Edit this page View Source NoScene Get a default value for when there is no scene. Declaration public static ExaminationScene NoScene { get; } Property Value Type Description ExaminationScene | Edit this page View Source Room Get the room the examinable is being examined from. Declaration public Room Room { get; } Property Value Type Description Room"
  },
  "api/NetAF.Assets.IExaminable.html": {
    "href": "api/NetAF.Assets.IExaminable.html",
    "title": "Interface IExaminable | NetAF",
    "keywords": "Interface IExaminable Represents any object that is examinable. Inherited Members IPlayerVisible.IsPlayerVisible IRestoreFromObjectSerialization<ExaminableSerialization>.RestoreFrom(ExaminableSerialization) Namespace: NetAF.Assets Assembly: NetAF.dll Syntax public interface IExaminable : IPlayerVisible, IRestoreFromObjectSerialization<ExaminableSerialization> Properties | Edit this page View Source Attributes Get the attribute manager for this object. Declaration AttributeManager Attributes { get; } Property Value Type Description AttributeManager | Edit this page View Source Commands Get this objects commands. Declaration CustomCommand[] Commands { get; } Property Value Type Description CustomCommand[] | Edit this page View Source Description Get a description of this object. Declaration Description Description { get; } Property Value Type Description Description | Edit this page View Source Identifier Get this objects identifier. Declaration Identifier Identifier { get; } Property Value Type Description Identifier Methods | Edit this page View Source Examine(ExaminationScene) Examine this object. Declaration ExaminationResult Examine(ExaminationScene scene) Parameters Type Name Description ExaminationScene scene The scene this object is being examined from. Returns Type Description ExaminationResult A ExaminationResult detailing the examination of this object."
  },
  "api/NetAF.Assets.IInteractWithItem.html": {
    "href": "api/NetAF.Assets.IInteractWithItem.html",
    "title": "Interface IInteractWithItem | NetAF",
    "keywords": "Interface IInteractWithItem Represents any object that can interact with an item. Namespace: NetAF.Assets Assembly: NetAF.dll Syntax public interface IInteractWithItem Methods | Edit this page View Source Interact(Item) Interact with an item. Declaration Interaction Interact(Item item) Parameters Type Name Description Item item The item to interact with. Returns Type Description Interaction The interaction."
  },
  "api/NetAF.Assets.IItemContainer.html": {
    "href": "api/NetAF.Assets.IItemContainer.html",
    "title": "Interface IItemContainer | NetAF",
    "keywords": "Interface IItemContainer Represents any object that is a container of items. Inherited Members IExaminable.Identifier IExaminable.Description IExaminable.Commands IExaminable.Attributes IExaminable.Examine(ExaminationScene) IPlayerVisible.IsPlayerVisible IRestoreFromObjectSerialization<ExaminableSerialization>.RestoreFrom(ExaminableSerialization) Namespace: NetAF.Assets Assembly: NetAF.dll Syntax public interface IItemContainer : IExaminable, IPlayerVisible, IRestoreFromObjectSerialization<ExaminableSerialization> Properties | Edit this page View Source Items Get the items. Declaration Item[] Items { get; } Property Value Type Description Item[] Methods | Edit this page View Source AddItem(Item) Add an item. Declaration void AddItem(Item item) Parameters Type Name Description Item item The item to add. | Edit this page View Source RemoveItem(Item) Remove an item. Declaration void RemoveItem(Item item) Parameters Type Name Description Item item The item to remove."
  },
  "api/NetAF.Assets.IPlayerVisible.html": {
    "href": "api/NetAF.Assets.IPlayerVisible.html",
    "title": "Interface IPlayerVisible | NetAF",
    "keywords": "Interface IPlayerVisible Represents any object that is visible to a player. Namespace: NetAF.Assets Assembly: NetAF.dll Syntax public interface IPlayerVisible Properties | Edit this page View Source IsPlayerVisible Get or set if this is visible to the player. Declaration bool IsPlayerVisible { get; set; } Property Value Type Description bool"
  },
  "api/NetAF.Assets.Identifier.html": {
    "href": "api/NetAF.Assets.Identifier.html",
    "title": "Class Identifier | NetAF",
    "keywords": "Class Identifier Provides a class that can be used as an identifier. Inheritance object Identifier Implements IEquatable<string> IEquatable<Identifier> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Namespace: NetAF.Assets Assembly: NetAF.dll Syntax public sealed class Identifier : IEquatable<string>, IEquatable<Identifier> Constructors | Edit this page View Source Identifier(string) Provides a class that can be used as an identifier. Declaration public Identifier(string name) Parameters Type Name Description string name The name. Properties | Edit this page View Source Empty Get an empty identifier. Declaration public static Identifier Empty { get; } Property Value Type Description Identifier | Edit this page View Source IdentifiableName Get the name as a case insensitive identifier. Declaration public string IdentifiableName { get; } Property Value Type Description string | Edit this page View Source Name Get the name. Declaration public string Name { get; } Property Value Type Description string Methods | Edit this page View Source Equals(Identifier) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(Identifier other) Parameters Type Name Description Identifier other An object to compare with this object. Returns Type Description bool true if the current object is equal to the other parameter; otherwise, false. | Edit this page View Source Equals(string) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(string other) Parameters Type Name Description string other An object to compare with this object. Returns Type Description bool true if the current object is equal to the other parameter; otherwise, false. | Edit this page View Source ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description string A string that represents the current object. Overrides object.ToString() Implements IEquatable<T> IEquatable<T>"
  },
  "api/NetAF.Assets.Interaction.html": {
    "href": "api/NetAF.Assets.Interaction.html",
    "title": "Class Interaction | NetAF",
    "keywords": "Class Interaction Represents an interaction. Inheritance object Result Interaction Inherited Members Result.Description object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Assets Assembly: NetAF.dll Syntax public sealed class Interaction : Result Constructors | Edit this page View Source Interaction(InteractionResult, Item) Initializes a new instance of the Interaction class. Declaration public Interaction(InteractionResult result, Item item) Parameters Type Name Description InteractionResult result The result of the interaction. Item item The item used in the interaction. | Edit this page View Source Interaction(InteractionResult, Item, string) Initializes a new instance of the Interaction class. Declaration public Interaction(InteractionResult result, Item item, string descriptionOfEffect) Parameters Type Name Description InteractionResult result The result of the interaction. Item item The item used in the interaction. string descriptionOfEffect A description of the effect. Properties | Edit this page View Source Item Get the item used in the interaction. Declaration public Item Item { get; } Property Value Type Description Item | Edit this page View Source Result Get the result. Declaration public InteractionResult Result { get; } Property Value Type Description InteractionResult"
  },
  "api/NetAF.Assets.InteractionCallback.html": {
    "href": "api/NetAF.Assets.InteractionCallback.html",
    "title": "Delegate InteractionCallback | NetAF",
    "keywords": "Delegate InteractionCallback Represents the callback for interacting with objects. Namespace: NetAF.Assets Assembly: NetAF.dll Syntax public delegate Interaction InteractionCallback(Item item) Parameters Type Name Description Item item The item to interact with. Returns Type Description Interaction The interaction."
  },
  "api/NetAF.Assets.InteractionResult.html": {
    "href": "api/NetAF.Assets.InteractionResult.html",
    "title": "Enum InteractionResult | NetAF",
    "keywords": "Enum InteractionResult Enumeration of interaction results. Namespace: NetAF.Assets Assembly: NetAF.dll Syntax public enum InteractionResult Fields Name Description ItemAndTargetExpires The item and the target expires. ItemExpires The item expires. NoChange No change. PlayerDies The player dies. TargetExpires The target expires."
  },
  "api/NetAF.Assets.Item.html": {
    "href": "api/NetAF.Assets.Item.html",
    "title": "Class Item | NetAF",
    "keywords": "Class Item Represents an item that can be used within the game. Inheritance object ExaminableObject Item Implements IExaminable IPlayerVisible IRestoreFromObjectSerialization<ExaminableSerialization> IInteractWithItem IRestoreFromObjectSerialization<ItemSerialization> Inherited Members ExaminableObject.Examination ExaminableObject.Identifier ExaminableObject.Description ExaminableObject.Commands ExaminableObject.Attributes ExaminableObject.Examine(ExaminationScene) ExaminableObject.IsPlayerVisible ExaminableObject.RestoreFrom(ExaminableSerialization) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Assets Assembly: NetAF.dll Syntax public sealed class Item : ExaminableObject, IExaminable, IPlayerVisible, IRestoreFromObjectSerialization<ExaminableSerialization>, IInteractWithItem, IRestoreFromObjectSerialization<ItemSerialization> Constructors | Edit this page View Source Item(Identifier, Description, bool, CustomCommand[], InteractionCallback, ExaminationCallback) Initializes a new instance of the Item class. Declaration public Item(Identifier identifier, Description description, bool isTakeable = false, CustomCommand[] commands = null, InteractionCallback interaction = null, ExaminationCallback examination = null) Parameters Type Name Description Identifier identifier This Items identifier. Description description A description of this Item. bool isTakeable Specify if this item is takeable. CustomCommand[] commands This objects commands. InteractionCallback interaction The interaction. ExaminationCallback examination The examination. | Edit this page View Source Item(string, string, bool, CustomCommand[], InteractionCallback, ExaminationCallback) Initializes a new instance of the Item class. Declaration public Item(string identifier, string description, bool isTakeable = false, CustomCommand[] commands = null, InteractionCallback interaction = null, ExaminationCallback examination = null) Parameters Type Name Description string identifier This Items identifier. string description A description of this Item. bool isTakeable Specify if this item is takeable. CustomCommand[] commands This objects commands. InteractionCallback interaction The interaction. ExaminationCallback examination The examination. Properties | Edit this page View Source Interaction Get the interaction. Declaration public InteractionCallback Interaction { get; } Property Value Type Description InteractionCallback | Edit this page View Source IsTakeable Get or set if this is takeable. Declaration public bool IsTakeable { get; } Property Value Type Description bool Methods | Edit this page View Source Interact(Item) Interact with an item. Declaration public Interaction Interact(Item item) Parameters Type Name Description Item item The item to interact with. Returns Type Description Interaction The interaction. | Edit this page View Source RestoreFrom(ItemSerialization) Restore this object from a serialization. Declaration public void RestoreFrom(ItemSerialization serialization) Parameters Type Name Description ItemSerialization serialization The serialization to restore from. Implements IExaminable IPlayerVisible IRestoreFromObjectSerialization<T> IInteractWithItem IRestoreFromObjectSerialization<T>"
  },
  "api/NetAF.Assets.Locations.Direction.html": {
    "href": "api/NetAF.Assets.Locations.Direction.html",
    "title": "Enum Direction | NetAF",
    "keywords": "Enum Direction Enumeration of directions. Namespace: NetAF.Assets.Locations Assembly: NetAF.dll Syntax public enum Direction Fields Name Description Down Down. East East. North North. South South. Up Up. West West. Extension Methods DirectionExtensions.Inverse(Direction)"
  },
  "api/NetAF.Assets.Locations.Exit.html": {
    "href": "api/NetAF.Assets.Locations.Exit.html",
    "title": "Class Exit | NetAF",
    "keywords": "Class Exit Represents an exit from a GameLocation. Inheritance object ExaminableObject Exit Implements IExaminable IPlayerVisible IRestoreFromObjectSerialization<ExaminableSerialization> IInteractWithItem IRestoreFromObjectSerialization<ExitSerialization> Inherited Members ExaminableObject.Examination ExaminableObject.Identifier ExaminableObject.Description ExaminableObject.Commands ExaminableObject.Attributes ExaminableObject.Examine(ExaminationScene) ExaminableObject.IsPlayerVisible ExaminableObject.RestoreFrom(ExaminableSerialization) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Assets.Locations Assembly: NetAF.dll Syntax public sealed class Exit : ExaminableObject, IExaminable, IPlayerVisible, IRestoreFromObjectSerialization<ExaminableSerialization>, IInteractWithItem, IRestoreFromObjectSerialization<ExitSerialization> Constructors | Edit this page View Source Exit(Direction, bool, Identifier, Description, CustomCommand[], InteractionCallback, ExaminationCallback) Initializes a new instance of the Exit class. Declaration public Exit(Direction direction, bool isLocked = false, Identifier identifier = null, Description description = null, CustomCommand[] commands = null, InteractionCallback interaction = null, ExaminationCallback examination = null) Parameters Type Name Description Direction direction The direction of the exit. bool isLocked If this exit is locked. Identifier identifier An identifier for the exit. Description description A description of the exit. CustomCommand[] commands This objects commands. InteractionCallback interaction The interaction. ExaminationCallback examination The examination. Properties | Edit this page View Source Direction Get the direction of the exit. Declaration public Direction Direction { get; } Property Value Type Description Direction | Edit this page View Source Interaction Get the interaction. Declaration public InteractionCallback Interaction { get; } Property Value Type Description InteractionCallback | Edit this page View Source IsLocked Get if this Exit is locked. Declaration public bool IsLocked { get; } Property Value Type Description bool Methods | Edit this page View Source Interact(Item) Interact with an item. Declaration public Interaction Interact(Item item) Parameters Type Name Description Item item The item to interact with. Returns Type Description Interaction The interaction. | Edit this page View Source Lock() Lock this exit. Declaration public void Lock() | Edit this page View Source RestoreFrom(ExitSerialization) Restore this object from a serialization. Declaration public void RestoreFrom(ExitSerialization serialization) Parameters Type Name Description ExitSerialization serialization The serialization to restore from. | Edit this page View Source Unlock() Unlock this exit. Declaration public void Unlock() Implements IExaminable IPlayerVisible IRestoreFromObjectSerialization<T> IInteractWithItem IRestoreFromObjectSerialization<T>"
  },
  "api/NetAF.Assets.Locations.Matrix.html": {
    "href": "api/NetAF.Assets.Locations.Matrix.html",
    "title": "Class Matrix | NetAF",
    "keywords": "Class Matrix Provides a 3D matrix of rooms. Inheritance object Matrix Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Assets.Locations Assembly: NetAF.dll Syntax public sealed class Matrix Constructors | Edit this page View Source Matrix(RoomPosition[]) Provides a 3D matrix of rooms. Declaration public Matrix(RoomPosition[] roomPositions) Parameters Type Name Description RoomPosition[] roomPositions The rooms to be represented. Properties | Edit this page View Source Depth Get the depth of the matrix. Declaration public int Depth { get; } Property Value Type Description int | Edit this page View Source Height Get the height of the matrix. Declaration public int Height { get; } Property Value Type Description int | Edit this page View Source this[int, int, int] Get a room in this matrix. Declaration public Room this[int x, int y, int z] { get; } Parameters Type Name Description int x The x position. int y The y position. int z The z position. Property Value Type Description Room The room. | Edit this page View Source Width Get the width of the matrix. Declaration public int Width { get; } Property Value Type Description int Methods | Edit this page View Source ToRooms() Return this matrix as a one dimensional array of rooms. Declaration public Room[] ToRooms() Returns Type Description Room[] The rooms, as a one dimensional array."
  },
  "api/NetAF.Assets.Locations.Overworld.html": {
    "href": "api/NetAF.Assets.Locations.Overworld.html",
    "title": "Class Overworld | NetAF",
    "keywords": "Class Overworld Represents an entire overworld. Inheritance object ExaminableObject Overworld Implements IExaminable IPlayerVisible IRestoreFromObjectSerialization<ExaminableSerialization> IRestoreFromObjectSerialization<OverworldSerialization> Inherited Members ExaminableObject.Examination ExaminableObject.Identifier ExaminableObject.Description ExaminableObject.Commands ExaminableObject.Attributes ExaminableObject.IsPlayerVisible ExaminableObject.RestoreFrom(ExaminableSerialization) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Assets.Locations Assembly: NetAF.dll Syntax public sealed class Overworld : ExaminableObject, IExaminable, IPlayerVisible, IRestoreFromObjectSerialization<ExaminableSerialization>, IRestoreFromObjectSerialization<OverworldSerialization> Constructors | Edit this page View Source Overworld(Identifier, Description, CustomCommand[], ExaminationCallback) Initializes a new instance of the overworld class. Declaration public Overworld(Identifier identifier, Description description, CustomCommand[] commands = null, ExaminationCallback examination = null) Parameters Type Name Description Identifier identifier The identifier for this overworld. Description description A description of this overworld. CustomCommand[] commands This objects commands. ExaminationCallback examination The examination. | Edit this page View Source Overworld(string, string, CustomCommand[], ExaminationCallback) Initializes a new instance of the overworld class. Declaration public Overworld(string identifier, string description, CustomCommand[] commands = null, ExaminationCallback examination = null) Parameters Type Name Description string identifier The identifier for this overworld. string description A description of this overworld. CustomCommand[] commands This objects commands. ExaminationCallback examination The examination. Properties | Edit this page View Source CurrentRegion Get the current region. Declaration public Region CurrentRegion { get; } Property Value Type Description Region | Edit this page View Source Regions Get the regions in this overworld. Declaration public Region[] Regions { get; } Property Value Type Description Region[] Methods | Edit this page View Source AddRegion(Region) Add a region to this overworld. Declaration public void AddRegion(Region region) Parameters Type Name Description Region region The region to add. | Edit this page View Source Examine(ExaminationScene) Examine this object. Declaration public override ExaminationResult Examine(ExaminationScene scene) Parameters Type Name Description ExaminationScene scene The scene this object is being examined from. Returns Type Description ExaminationResult A ExaminationResult detailing the examination of this object. Overrides ExaminableObject.Examine(ExaminationScene) | Edit this page View Source FindRegion(string, out Region) Find a region. Declaration public bool FindRegion(string regionName, out Region region) Parameters Type Name Description string regionName The regions name. Region region The region. Returns Type Description bool True if the region was found. | Edit this page View Source Move(Region) Move to a region. Declaration public bool Move(Region region) Parameters Type Name Description Region region The region to move to. Returns Type Description bool True if the region could be moved to, else false. | Edit this page View Source RemoveRegion(Region) Remove a region from this overworld. Declaration public void RemoveRegion(Region region) Parameters Type Name Description Region region The region to remove. | Edit this page View Source RestoreFrom(OverworldSerialization) Restore this object from a serialization. Declaration public void RestoreFrom(OverworldSerialization serialization) Parameters Type Name Description OverworldSerialization serialization The serialization to restore from. Implements IExaminable IPlayerVisible IRestoreFromObjectSerialization<T> IRestoreFromObjectSerialization<T>"
  },
  "api/NetAF.Assets.Locations.Region.html": {
    "href": "api/NetAF.Assets.Locations.Region.html",
    "title": "Class Region | NetAF",
    "keywords": "Class Region Represents a region. Inheritance object ExaminableObject Region Implements IExaminable IPlayerVisible IRestoreFromObjectSerialization<ExaminableSerialization> IRestoreFromObjectSerialization<RegionSerialization> Inherited Members ExaminableObject.Examination ExaminableObject.Identifier ExaminableObject.Description ExaminableObject.Commands ExaminableObject.Attributes ExaminableObject.IsPlayerVisible ExaminableObject.RestoreFrom(ExaminableSerialization) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Assets.Locations Assembly: NetAF.dll Syntax public sealed class Region : ExaminableObject, IExaminable, IPlayerVisible, IRestoreFromObjectSerialization<ExaminableSerialization>, IRestoreFromObjectSerialization<RegionSerialization> Constructors | Edit this page View Source Region(Identifier, Description, CustomCommand[], ExaminationCallback) Initializes a new instance of the Region class. Declaration public Region(Identifier identifier, Description description, CustomCommand[] commands = null, ExaminationCallback examination = null) Parameters Type Name Description Identifier identifier This Regions identifier. Description description The description of this Region. CustomCommand[] commands This objects commands. ExaminationCallback examination The examination. | Edit this page View Source Region(string, string, CustomCommand[], ExaminationCallback) Initializes a new instance of the Region class. Declaration public Region(string identifier, string description, CustomCommand[] commands = null, ExaminationCallback examination = null) Parameters Type Name Description string identifier This Regions identifier. string description The description of this Region. CustomCommand[] commands This objects commands. ExaminationCallback examination The examination. Properties | Edit this page View Source CurrentRoom Get the current room. Declaration public Room CurrentRoom { get; } Property Value Type Description Room | Edit this page View Source IsVisibleWithoutDiscovery Get if the current region is visible without discovery. Declaration public bool IsVisibleWithoutDiscovery { get; set; } Property Value Type Description bool | Edit this page View Source this[int, int, int] Get a room at a specified location. Declaration public Room this[int x, int y, int z] { get; } Parameters Type Name Description int x The x position. int y The y position. int z The z position. Property Value Type Description Room The room. | Edit this page View Source Rooms Get the number of rooms region contains. Declaration public int Rooms { get; } Property Value Type Description int Methods | Edit this page View Source AddRoom(Room, int, int, int) Add a Room to this region. Declaration public bool AddRoom(Room room, int x, int y, int z) Parameters Type Name Description Room room The room to add. int x The x position within the region. int y The y position within the region. int z The z position within the region. Returns Type Description bool | Edit this page View Source Examine(ExaminationScene) Examine this object. Declaration public override ExaminationResult Examine(ExaminationScene scene) Parameters Type Name Description ExaminationScene scene The scene this object is being examined from. Returns Type Description ExaminationResult A ExaminationResult detailing the examination of this object. Overrides ExaminableObject.Examine(ExaminationScene) | Edit this page View Source GetAdjoiningRoom(Direction) Get an adjoining room to the Region.CurrentRoom property. Declaration public Room GetAdjoiningRoom(Direction direction) Parameters Type Name Description Direction direction The direction of the adjoining Room. Returns Type Description Room The adjoining Room. | Edit this page View Source GetAdjoiningRoom(Direction, Room) Get an adjoining room to a room. Declaration public Room GetAdjoiningRoom(Direction direction, Room room) Parameters Type Name Description Direction direction The direction of the adjoining room. Room room The room to use as the reference. Returns Type Description Room The adjoining room. | Edit this page View Source GetPositionOfRoom(Room) Get the position of a room. Declaration public RoomPosition GetPositionOfRoom(Room room) Parameters Type Name Description Room room The room. Returns Type Description RoomPosition The position of the room. | Edit this page View Source JumpToRoom(Point3D) Jump to a room. Declaration public bool JumpToRoom(Point3D location) Parameters Type Name Description Point3D location The location of the room. Returns Type Description bool True if the room could be jumped to, else false. | Edit this page View Source Move(Direction) Move in a direction. Declaration public bool Move(Direction direction) Parameters Type Name Description Direction direction The direction to move in. Returns Type Description bool True if the move was successful, else false. | Edit this page View Source RestoreFrom(RegionSerialization) Restore this object from a serialization. Declaration public void RestoreFrom(RegionSerialization serialization) Parameters Type Name Description RegionSerialization serialization The serialization to restore from. | Edit this page View Source SetStartRoom(Room) Set the room to start in. Declaration public void SetStartRoom(Room room) Parameters Type Name Description Room room The Room to start in. | Edit this page View Source SetStartRoom(int, int, int) Set the room to start in. Declaration public void SetStartRoom(int x, int y, int z) Parameters Type Name Description int x The x position. int y The y position. int z The z position. | Edit this page View Source ToMatrix() Get this region as a 3D matrix of rooms. Declaration public Matrix ToMatrix() Returns Type Description Matrix This region, as a 3D matrix. | Edit this page View Source TryFindRoom(string, out Room) Try and find a room within this region. Declaration public bool TryFindRoom(string name, out Room room) Parameters Type Name Description string name The rooms name. Room room The room, if found, else null. Returns Type Description bool True if the room could be found, else false. | Edit this page View Source UnlockDoorPair(Direction) Unlock a pair of doors in a specified direction in the CurrentRoom. Declaration public bool UnlockDoorPair(Direction direction) Parameters Type Name Description Direction direction The direction to unlock in. Returns Type Description bool True if the door pair could be unlocked, else false. Implements IExaminable IPlayerVisible IRestoreFromObjectSerialization<T> IRestoreFromObjectSerialization<T>"
  },
  "api/NetAF.Assets.Locations.Room.html": {
    "href": "api/NetAF.Assets.Locations.Room.html",
    "title": "Class Room | NetAF",
    "keywords": "Class Room Represents a room Inheritance object ExaminableObject Room Implements IInteractWithItem IItemContainer IExaminable IPlayerVisible IRestoreFromObjectSerialization<ExaminableSerialization> IRestoreFromObjectSerialization<RoomSerialization> Inherited Members ExaminableObject.Examination ExaminableObject.Identifier ExaminableObject.Description ExaminableObject.Commands ExaminableObject.Attributes ExaminableObject.IsPlayerVisible ExaminableObject.RestoreFrom(ExaminableSerialization) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Assets.Locations Assembly: NetAF.dll Syntax public sealed class Room : ExaminableObject, IInteractWithItem, IItemContainer, IExaminable, IPlayerVisible, IRestoreFromObjectSerialization<ExaminableSerialization>, IRestoreFromObjectSerialization<RoomSerialization> Constructors | Edit this page View Source Room(Identifier, Description, Exit[], Item[], CustomCommand[], InteractionCallback, ExaminationCallback) Initializes a new instance of the Room class. Declaration public Room(Identifier identifier, Description description, Exit[] exits = null, Item[] items = null, CustomCommand[] commands = null, InteractionCallback interaction = null, ExaminationCallback examination = null) Parameters Type Name Description Identifier identifier This rooms identifier. Description description This rooms description. Exit[] exits The exits from this room. Item[] items The items in this room. CustomCommand[] commands This objects commands. InteractionCallback interaction The interaction. ExaminationCallback examination The examination. | Edit this page View Source Room(string, string, Exit[], Item[], CustomCommand[], InteractionCallback, ExaminationCallback) Initializes a new instance of the Room class. Declaration public Room(string identifier, string description, Exit[] exits = null, Item[] items = null, CustomCommand[] commands = null, InteractionCallback interaction = null, ExaminationCallback examination = null) Parameters Type Name Description string identifier This rooms identifier. string description This rooms description. Exit[] exits The exits from this room. Item[] items The items in this room. CustomCommand[] commands This objects commands. InteractionCallback interaction The interaction. ExaminationCallback examination The examination. Properties | Edit this page View Source Characters Get the characters in this Room. Declaration public NonPlayableCharacter[] Characters { get; } Property Value Type Description NonPlayableCharacter[] | Edit this page View Source EnteredFrom Get which direction this Room was entered from. Declaration public Direction? EnteredFrom { get; } Property Value Type Description Direction? | Edit this page View Source Exits Get the exits. Declaration public Exit[] Exits { get; } Property Value Type Description Exit[] | Edit this page View Source HasBeenVisited Get if this location has been visited. Declaration public bool HasBeenVisited { get; } Property Value Type Description bool | Edit this page View Source Interaction Get the interaction. Declaration public InteractionCallback Interaction { get; } Property Value Type Description InteractionCallback | Edit this page View Source this[Direction] Get an exit. Declaration public Exit this[Direction direction] { get; } Parameters Type Name Description Direction direction The direction of an exit. Property Value Type Description Exit The exit. | Edit this page View Source Items Get the items. Declaration public Item[] Items { get; } Property Value Type Description Item[] | Edit this page View Source UnlockedExits Get all unlocked exits. Declaration public Exit[] UnlockedExits { get; } Property Value Type Description Exit[] Methods | Edit this page View Source AddCharacter(NonPlayableCharacter) Add a character to this room. Declaration public void AddCharacter(NonPlayableCharacter character) Parameters Type Name Description NonPlayableCharacter character The character to add. | Edit this page View Source AddItem(Item) Add an item. Declaration public void AddItem(Item item) Parameters Type Name Description Item item The item to add. | Edit this page View Source CanMove(Direction) Test if a move is possible. Declaration public bool CanMove(Direction direction) Parameters Type Name Description Direction direction The direction to test. Returns Type Description bool If a move in the specified direction is possible. | Edit this page View Source ContainsCharacter(NonPlayableCharacter, bool) Get if this Room contains a character. Declaration public bool ContainsCharacter(NonPlayableCharacter character, bool includeInvisibleCharacters = false) Parameters Type Name Description NonPlayableCharacter character The character. bool includeInvisibleCharacters Specify if invisible characters should be included. Returns Type Description bool True if the item is in this room, else false. | Edit this page View Source ContainsCharacter(string, bool) Get if this Room contains a character. Declaration public bool ContainsCharacter(string characterName, bool includeInvisibleCharacters = false) Parameters Type Name Description string characterName The character name to check for. bool includeInvisibleCharacters Specify if invisible characters should be included. Returns Type Description bool True if the item is in this room, else false. | Edit this page View Source ContainsExit(Direction, bool) Get if this Room contains an exit. Declaration public bool ContainsExit(Direction direction, bool includeInvisibleExits = false) Parameters Type Name Description Direction direction The direction of the exit to check for. bool includeInvisibleExits Specify if invisible exits should be included. Returns Type Description bool True if the exit exists, else false. | Edit this page View Source ContainsExit(bool) Get if this Room contains an exit. Declaration public bool ContainsExit(bool includeInvisibleExits = false) Parameters Type Name Description bool includeInvisibleExits Specify if invisible exits should be included. Returns Type Description bool True if the exit exists, else false. | Edit this page View Source ContainsInteractionTarget(string) Get if this Room contains an interaction target. Declaration public bool ContainsInteractionTarget(string targetName) Parameters Type Name Description string targetName The name of the target to check for. Returns Type Description bool True if the target is in this room, else false. | Edit this page View Source ContainsItem(Item) Get if this Room contains an item. This will not include items whose ExaminableObject.IsPlayerVisible property is set to false. Declaration public bool ContainsItem(Item item) Parameters Type Name Description Item item The item to check for. Returns Type Description bool True if the item is in this room, else false. | Edit this page View Source ContainsItem(string, bool) Get if this Room contains an item. Declaration public bool ContainsItem(string itemName, bool includeInvisibleItems = false) Parameters Type Name Description string itemName The item name to check for. bool includeInvisibleItems Specify if invisible items should be included. Returns Type Description bool True if the item is in this room, else false. | Edit this page View Source Examine(ExaminationScene) Handle examination this Room. Declaration public override ExaminationResult Examine(ExaminationScene scene) Parameters Type Name Description ExaminationScene scene The scene this object is being examined from. Returns Type Description ExaminationResult The result of this examination. Overrides ExaminableObject.Examine(ExaminationScene) | Edit this page View Source FindCharacter(string, out NonPlayableCharacter) Find a character. This will not include characters whose ExaminableObject.IsPlayerVisible property is set to false. Declaration public bool FindCharacter(string characterName, out NonPlayableCharacter character) Parameters Type Name Description string characterName The character. NonPlayableCharacter character The character name. Returns Type Description bool True if the character was found. | Edit this page View Source FindCharacter(string, out NonPlayableCharacter, bool) Find a character. Declaration public bool FindCharacter(string characterName, out NonPlayableCharacter character, bool includeInvisibleCharacters) Parameters Type Name Description string characterName The character name. NonPlayableCharacter character The character. bool includeInvisibleCharacters Specify if invisible characters should be included. Returns Type Description bool True if the character was found. | Edit this page View Source FindExit(Direction, bool, out Exit) Find an exit. Declaration public bool FindExit(Direction direction, bool includeInvisibleExits, out Exit exit) Parameters Type Name Description Direction direction The exits direction. bool includeInvisibleExits Specify if invisible exists should be included. Exit exit The exit. Returns Type Description bool True if the exit was found. | Edit this page View Source FindInteractionTarget(string, out IInteractWithItem) Find an interaction target. Declaration public bool FindInteractionTarget(string targetName, out IInteractWithItem target) Parameters Type Name Description string targetName The targets name. IInteractWithItem target The target. Returns Type Description bool True if the target was found. | Edit this page View Source FindItem(string, out Item) Find an item. This will not include items whose ExaminableObject.IsPlayerVisible property is set to false Declaration public bool FindItem(string itemName, out Item item) Parameters Type Name Description string itemName The items name. This is case insensitive Item item The item Returns Type Description bool True if the item was found | Edit this page View Source FindItem(string, out Item, bool) Find an item. Declaration public bool FindItem(string itemName, out Item item, bool includeInvisibleItems) Parameters Type Name Description string itemName The items name. Item item The item. bool includeInvisibleItems Specify is invisible items should be included. Returns Type Description bool True if the item was found. | Edit this page View Source HasLockedExitInDirection(Direction, bool) Get if this room has a visible locked exit in a specified direction. Declaration public bool HasLockedExitInDirection(Direction direction, bool includeInvisibleExits = false) Parameters Type Name Description Direction direction The direction to check. bool includeInvisibleExits Specify if invisible exits should be included. Returns Type Description bool If there is a locked exit in the specified direction. | Edit this page View Source HasUnlockedExitInDirection(Direction, bool) Get if this room has a visible unlocked exit in a specified direction. Declaration public bool HasUnlockedExitInDirection(Direction direction, bool includeInvisibleExits = false) Parameters Type Name Description Direction direction The direction to check. bool includeInvisibleExits Specify if invisible exits should be included. Returns Type Description bool If there is a unlocked exit in the specified direction. | Edit this page View Source Interact(Item) Interact with an item. Declaration public Interaction Interact(Item item) Parameters Type Name Description Item item The item to interact with. Returns Type Description Interaction The interaction. | Edit this page View Source MovedInto(Direction?) Handle movement into this GameLocation. Declaration public void MovedInto(Direction? fromDirection) Parameters Type Name Description Direction? fromDirection The direction movement into this Room is from. Use null if there is no direction. | Edit this page View Source RemoveCharacter(NonPlayableCharacter) Remove a character from the room. Declaration public void RemoveCharacter(NonPlayableCharacter character) Parameters Type Name Description NonPlayableCharacter character The character to remove. | Edit this page View Source RemoveInteractionTarget(IInteractWithItem) Remove an interaction target from the room. Declaration public IInteractWithItem RemoveInteractionTarget(IInteractWithItem target) Parameters Type Name Description IInteractWithItem target The target to remove. Returns Type Description IInteractWithItem The target removed from this room. | Edit this page View Source RemoveItem(Item) Remove an item. Declaration public void RemoveItem(Item item) Parameters Type Name Description Item item The item to remove. | Edit this page View Source RestoreFrom(RoomSerialization) Restore this object from a serialization. Declaration public void RestoreFrom(RoomSerialization serialization) Parameters Type Name Description RoomSerialization serialization The serialization to restore from. | Edit this page View Source SpecifyConditionalDescription(ConditionalDescription) Specify a conditional description of this room. Declaration public void SpecifyConditionalDescription(ConditionalDescription description) Parameters Type Name Description ConditionalDescription description The description of this room. Implements IInteractWithItem IItemContainer IExaminable IPlayerVisible IRestoreFromObjectSerialization<T> IRestoreFromObjectSerialization<T>"
  },
  "api/NetAF.Assets.Locations.RoomPosition.html": {
    "href": "api/NetAF.Assets.Locations.RoomPosition.html",
    "title": "Class RoomPosition | NetAF",
    "keywords": "Class RoomPosition Represents a room position. Inheritance object RoomPosition Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Assets.Locations Assembly: NetAF.dll Syntax public class RoomPosition Constructors | Edit this page View Source RoomPosition(Room, Point3D) Represents a room position. Declaration public RoomPosition(Room room, Point3D position) Parameters Type Name Description Room room The room/ Point3D position The position of the room. Properties | Edit this page View Source Position Get the position of the room. Declaration public Point3D Position { get; } Property Value Type Description Point3D | Edit this page View Source Room Get the room. Declaration public Room Room { get; } Property Value Type Description Room Methods | Edit this page View Source IsAtPosition(Point3D) Get if this RoomPosition is at a position. Declaration public bool IsAtPosition(Point3D position) Parameters Type Name Description Point3D position The position. Returns Type Description bool True if this is at the position, else false. | Edit this page View Source IsAtPosition(int, int, int) Get if this RoomPosition is at a position. Declaration public bool IsAtPosition(int x, int y, int z) Parameters Type Name Description int x The X position. int y The Y position. int z The Z position. Returns Type Description bool True if this is at the position, else false."
  },
  "api/NetAF.Assets.Locations.ViewPoint.html": {
    "href": "api/NetAF.Assets.Locations.ViewPoint.html",
    "title": "Class ViewPoint | NetAF",
    "keywords": "Class ViewPoint Represents a view point from a room. Inheritance object ViewPoint Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Assets.Locations Assembly: NetAF.dll Syntax public sealed class ViewPoint Properties | Edit this page View Source Any Get if there is a view in any direction. Declaration public bool Any { get; } Property Value Type Description bool | Edit this page View Source AnyNotVisited Get if there is a view in any direction. Declaration public bool AnyNotVisited { get; } Property Value Type Description bool | Edit this page View Source AnyVisited Get if there is a view in any direction. Declaration public bool AnyVisited { get; } Property Value Type Description bool | Edit this page View Source this[Direction] Get the room that lies in a specified direction. Declaration public Room this[Direction direction] { get; } Parameters Type Name Description Direction direction The direction to check. Property Value Type Description Room The room. | Edit this page View Source NoView Get a view point representing no view. Declaration public static ViewPoint NoView { get; } Property Value Type Description ViewPoint Methods | Edit this page View Source Create(Region) Create a new ViewPoint. Declaration public static ViewPoint Create(Region region) Parameters Type Name Description Region region The region to create the view point from. Returns Type Description ViewPoint The view point."
  },
  "api/NetAF.Assets.Locations.html": {
    "href": "api/NetAF.Assets.Locations.html",
    "title": "Namespace NetAF.Assets.Locations | NetAF",
    "keywords": "Namespace NetAF.Assets.Locations Classes Exit Represents an exit from a GameLocation. Matrix Provides a 3D matrix of rooms. Overworld Represents an entire overworld. Region Represents a region. Room Represents a room RoomPosition Represents a room position. ViewPoint Represents a view point from a room. Enums Direction Enumeration of directions."
  },
  "api/NetAF.Assets.Point2D.html": {
    "href": "api/NetAF.Assets.Point2D.html",
    "title": "Struct Point2D | NetAF",
    "keywords": "Struct Point2D Represents a two-dimensional point. Implements IEquatable<Point2D> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: NetAF.Assets Assembly: NetAF.dll Syntax public readonly struct Point2D : IEquatable<Point2D> Constructors | Edit this page View Source Point2D(int, int) Represents a two-dimensional point. Declaration public Point2D(int x, int y) Parameters Type Name Description int x The x position. int y The y position. Properties | Edit this page View Source X Get the X position. Declaration public int X { get; } Property Value Type Description int | Edit this page View Source Y Get the Y position. Declaration public int Y { get; } Property Value Type Description int Methods | Edit this page View Source Equals(Point2D) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(Point2D other) Parameters Type Name Description Point2D other An object to compare with this object. Returns Type Description bool true if the current object is equal to the other parameter; otherwise, false. Implements IEquatable<T>"
  },
  "api/NetAF.Assets.Point3D.html": {
    "href": "api/NetAF.Assets.Point3D.html",
    "title": "Struct Point3D | NetAF",
    "keywords": "Struct Point3D Represents a three-dimensional point. Implements IEquatable<Point3D> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: NetAF.Assets Assembly: NetAF.dll Syntax public readonly struct Point3D : IEquatable<Point3D> Constructors | Edit this page View Source Point3D(int, int, int) Represents a three-dimensional point. Declaration public Point3D(int x, int y, int z) Parameters Type Name Description int x The x position. int y The y position. int z The z position. Properties | Edit this page View Source X Get the X position. Declaration public int X { get; } Property Value Type Description int | Edit this page View Source Y Get the Y position. Declaration public int Y { get; } Property Value Type Description int | Edit this page View Source Z Get the Z position. Declaration public int Z { get; } Property Value Type Description int Methods | Edit this page View Source Equals(Point3D) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(Point3D other) Parameters Type Name Description Point3D other An object to compare with this object. Returns Type Description bool true if the current object is equal to the other parameter; otherwise, false. Implements IEquatable<T>"
  },
  "api/NetAF.Assets.Result.html": {
    "href": "api/NetAF.Assets.Result.html",
    "title": "Class Result | NetAF",
    "keywords": "Class Result Represents a result. Inheritance object Result ExaminationResult Interaction Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Assets Assembly: NetAF.dll Syntax public abstract class Result Constructors | Edit this page View Source Result() Initializes a new instance of the Result class. Declaration protected Result() Properties | Edit this page View Source Description Get the description. Declaration public string Description { get; protected set; } Property Value Type Description string"
  },
  "api/NetAF.Assets.Size.html": {
    "href": "api/NetAF.Assets.Size.html",
    "title": "Struct Size | NetAF",
    "keywords": "Struct Size Represents a size. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: NetAF.Assets Assembly: NetAF.dll Syntax public readonly struct Size Constructors | Edit this page View Source Size(int, int) Represents a size. Declaration public Size(int width, int height) Parameters Type Name Description int width The width. int height The height. Properties | Edit this page View Source Height Get the height. Declaration public int Height { get; } Property Value Type Description int | Edit this page View Source Width Get the width. Declaration public int Width { get; } Property Value Type Description int"
  },
  "api/NetAF.Assets.html": {
    "href": "api/NetAF.Assets.html",
    "title": "Namespace NetAF.Assets | NetAF",
    "keywords": "Namespace NetAF.Assets Classes ConditionalDescription Represents a conditional description of an object. Description Represents a description of an object. ExaminableObject Represents an object that can be examined. ExaminationRequest Represents a request to examine an IExaminable. ExaminationResult Represents the result of an examination. ExaminationScene Represents a scene that an examination occurs in. Identifier Provides a class that can be used as an identifier. Interaction Represents an interaction. Item Represents an item that can be used within the game. Result Represents a result. Structs Point2D Represents a two-dimensional point. Point3D Represents a three-dimensional point. Size Represents a size. Interfaces IExaminable Represents any object that is examinable. IInteractWithItem Represents any object that can interact with an item. IItemContainer Represents any object that is a container of items. IPlayerVisible Represents any object that is visible to a player. Enums InteractionResult Enumeration of interaction results. Delegates Condition Represents a callback for conditions. ExaminationCallback Represents the callback for examinations. InteractionCallback Represents the callback for interacting with objects."
  },
  "api/NetAF.Commands.CommandHelp.html": {
    "href": "api/NetAF.Commands.CommandHelp.html",
    "title": "Class CommandHelp | NetAF",
    "keywords": "Class CommandHelp Provides help for a command. Inheritance object CommandHelp Implements IEquatable<CommandHelp> IEquatable<string> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Commands Assembly: NetAF.dll Syntax public sealed class CommandHelp : IEquatable<CommandHelp>, IEquatable<string> Constructors | Edit this page View Source CommandHelp(string, string, string) Provides help for a command. Declaration public CommandHelp(string command, string description, string shortcut = \"\") Parameters Type Name Description string command The command. string description The help. string shortcut A shortcut for the command. Properties | Edit this page View Source Command Get the command. Declaration public string Command { get; } Property Value Type Description string | Edit this page View Source Description Get the description of the command. Declaration public string Description { get; } Property Value Type Description string | Edit this page View Source Shortcut Get the shortcut for the command. Declaration public string Shortcut { get; } Property Value Type Description string Methods | Edit this page View Source Equals(CommandHelp) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(CommandHelp other) Parameters Type Name Description CommandHelp other An object to compare with this object. Returns Type Description bool true if the current object is equal to the other parameter; otherwise, false. | Edit this page View Source Equals(string) Indicates whether the current object is equal to another object of a different type. Declaration public bool Equals(string other) Parameters Type Name Description string other An object to compare with this object. Returns Type Description bool true if the current object is equal to the other parameter; otherwise, false. Implements IEquatable<T> IEquatable<T> Extension Methods CommandHelpExtensions.FormattedToDisplayShortcut(CommandHelp) CommandHelpExtensions.FormattedToDisplayShortcutAndVariable(CommandHelp)"
  },
  "api/NetAF.Commands.Conversation.Next.html": {
    "href": "api/NetAF.Commands.Conversation.Next.html",
    "title": "Class Next | NetAF",
    "keywords": "Class Next Represents the Next command. Inheritance object Next Implements ICommand Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Commands.Conversation Assembly: NetAF.dll Syntax public sealed class Next : ICommand Methods | Edit this page View Source Invoke(Game) Invoke the command. Declaration public Reaction Invoke(Game game) Parameters Type Name Description Game game The game to invoke the command on. Returns Type Description Reaction The reaction. Implements ICommand"
  },
  "api/NetAF.Commands.Conversation.Respond.html": {
    "href": "api/NetAF.Commands.Conversation.Respond.html",
    "title": "Class Respond | NetAF",
    "keywords": "Class Respond Represents the Respond command. Inheritance object Respond Implements ICommand Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Commands.Conversation Assembly: NetAF.dll Syntax public sealed class Respond : ICommand Constructors | Edit this page View Source Respond(Response) Represents the Respond command. Declaration public Respond(Response response) Parameters Type Name Description Response response The response. Methods | Edit this page View Source Invoke(Game) Invoke the command. Declaration public Reaction Invoke(Game game) Parameters Type Name Description Game game The game to invoke the command on. Returns Type Description Reaction The reaction. Implements ICommand"
  },
  "api/NetAF.Commands.Conversation.html": {
    "href": "api/NetAF.Commands.Conversation.html",
    "title": "Namespace NetAF.Commands.Conversation | NetAF",
    "keywords": "Namespace NetAF.Commands.Conversation Classes Next Represents the Next command. Respond Represents the Respond command."
  },
  "api/NetAF.Commands.CustomCommand.html": {
    "href": "api/NetAF.Commands.CustomCommand.html",
    "title": "Class CustomCommand | NetAF",
    "keywords": "Class CustomCommand Provides a custom command. Inheritance object CustomCommand Load Save Implements ICommand IPlayerVisible IRestoreFromObjectSerialization<CustomCommandSerialization> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Commands Assembly: NetAF.dll Syntax public class CustomCommand : ICommand, IPlayerVisible, IRestoreFromObjectSerialization<CustomCommandSerialization> Constructors | Edit this page View Source CustomCommand(CommandHelp, bool, bool, CustomCommandCallback) Provides a custom command. Declaration public CustomCommand(CommandHelp help, bool isPlayerVisible, bool interpretIfNotPlayerVisible, CustomCommandCallback callback) Parameters Type Name Description CommandHelp help The help for this command. bool isPlayerVisible If this is visible to the player. bool interpretIfNotPlayerVisible If this command can be interpreted when the IsPlayerVisible is false. CustomCommandCallback callback The callback to invoke when this command is invoked. Properties | Edit this page View Source Arguments Get or set the arguments. Declaration public string[] Arguments { get; set; } Property Value Type Description string[] | Edit this page View Source Help Get the help for this command. Declaration public CommandHelp Help { get; } Property Value Type Description CommandHelp | Edit this page View Source InterpretIfNotPlayerVisible Get if this command can be interpreted when the IsPlayerVisible is false. Declaration public bool InterpretIfNotPlayerVisible { get; set; } Property Value Type Description bool | Edit this page View Source IsPlayerVisible Get or set if this is visible to the player. Declaration public bool IsPlayerVisible { get; set; } Property Value Type Description bool Methods | Edit this page View Source Invoke(Game) Invoke the command. Declaration public Reaction Invoke(Game game) Parameters Type Name Description Game game The game to invoke the command on. Returns Type Description Reaction The reaction. | Edit this page View Source RestoreFrom(CustomCommandSerialization) Restore this object from a serialization. Declaration public void RestoreFrom(CustomCommandSerialization serialization) Parameters Type Name Description CustomCommandSerialization serialization The serialization to restore from. Implements ICommand IPlayerVisible IRestoreFromObjectSerialization<T>"
  },
  "api/NetAF.Commands.CustomCommandCallback.html": {
    "href": "api/NetAF.Commands.CustomCommandCallback.html",
    "title": "Delegate CustomCommandCallback | NetAF",
    "keywords": "Delegate CustomCommandCallback Provides a callback for custom commands. Namespace: NetAF.Commands Assembly: NetAF.dll Syntax public delegate Reaction CustomCommandCallback(Game game, string[] arguments) Parameters Type Name Description Game game The game to invoke the command on. string[] arguments The arguments to invoke the command with. Returns Type Description Reaction The reaction to the command."
  },
  "api/NetAF.Commands.Frame.CommandsOff.html": {
    "href": "api/NetAF.Commands.Frame.CommandsOff.html",
    "title": "Class CommandsOff | NetAF",
    "keywords": "Class CommandsOff Represents the CommandsOff command. Inheritance object CommandsOff Implements ICommand Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Commands.Frame Assembly: NetAF.dll Syntax public sealed class CommandsOff : ICommand Properties | Edit this page View Source CommandHelp Get the command help. Declaration public static CommandHelp CommandHelp { get; } Property Value Type Description CommandHelp Methods | Edit this page View Source Invoke(Game) Invoke the command. Declaration public Reaction Invoke(Game game) Parameters Type Name Description Game game The game to invoke the command on. Returns Type Description Reaction The reaction. Implements ICommand"
  },
  "api/NetAF.Commands.Frame.CommandsOn.html": {
    "href": "api/NetAF.Commands.Frame.CommandsOn.html",
    "title": "Class CommandsOn | NetAF",
    "keywords": "Class CommandsOn Represents the CommandsOn command. Inheritance object CommandsOn Implements ICommand Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Commands.Frame Assembly: NetAF.dll Syntax public sealed class CommandsOn : ICommand Properties | Edit this page View Source CommandHelp Get the command help. Declaration public static CommandHelp CommandHelp { get; } Property Value Type Description CommandHelp Methods | Edit this page View Source Invoke(Game) Invoke the command. Declaration public Reaction Invoke(Game game) Parameters Type Name Description Game game The game to invoke the command on. Returns Type Description Reaction The reaction. Implements ICommand"
  },
  "api/NetAF.Commands.Frame.KeyOff.html": {
    "href": "api/NetAF.Commands.Frame.KeyOff.html",
    "title": "Class KeyOff | NetAF",
    "keywords": "Class KeyOff Represents the KeyOff command. Inheritance object KeyOff Implements ICommand Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Commands.Frame Assembly: NetAF.dll Syntax public sealed class KeyOff : ICommand Properties | Edit this page View Source CommandHelp Get the command help. Declaration public static CommandHelp CommandHelp { get; } Property Value Type Description CommandHelp Methods | Edit this page View Source Invoke(Game) Invoke the command. Declaration public Reaction Invoke(Game game) Parameters Type Name Description Game game The game to invoke the command on. Returns Type Description Reaction The reaction. Implements ICommand"
  },
  "api/NetAF.Commands.Frame.KeyOn.html": {
    "href": "api/NetAF.Commands.Frame.KeyOn.html",
    "title": "Class KeyOn | NetAF",
    "keywords": "Class KeyOn Represents the KeyOn command. Inheritance object KeyOn Implements ICommand Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Commands.Frame Assembly: NetAF.dll Syntax public sealed class KeyOn : ICommand Properties | Edit this page View Source CommandHelp Get the command help. Declaration public static CommandHelp CommandHelp { get; } Property Value Type Description CommandHelp Methods | Edit this page View Source Invoke(Game) Invoke the command. Declaration public Reaction Invoke(Game game) Parameters Type Name Description Game game The game to invoke the command on. Returns Type Description Reaction The reaction. Implements ICommand"
  },
  "api/NetAF.Commands.Frame.html": {
    "href": "api/NetAF.Commands.Frame.html",
    "title": "Namespace NetAF.Commands.Frame | NetAF",
    "keywords": "Namespace NetAF.Commands.Frame Classes CommandsOff Represents the CommandsOff command. CommandsOn Represents the CommandsOn command. KeyOff Represents the KeyOff command. KeyOn Represents the KeyOn command."
  },
  "api/NetAF.Commands.Global.About.html": {
    "href": "api/NetAF.Commands.Global.About.html",
    "title": "Class About | NetAF",
    "keywords": "Class About Represents the About command. Inheritance object About Implements ICommand Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Commands.Global Assembly: NetAF.dll Syntax public sealed class About : ICommand Properties | Edit this page View Source CommandHelp Get the command help. Declaration public static CommandHelp CommandHelp { get; } Property Value Type Description CommandHelp Methods | Edit this page View Source Invoke(Game) Invoke the command. Declaration public Reaction Invoke(Game game) Parameters Type Name Description Game game The game to invoke the command on. Returns Type Description Reaction The reaction. Implements ICommand"
  },
  "api/NetAF.Commands.Global.End.html": {
    "href": "api/NetAF.Commands.Global.End.html",
    "title": "Class End | NetAF",
    "keywords": "Class End Represents the End command. Inheritance object End Implements ICommand Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Commands.Global Assembly: NetAF.dll Syntax public sealed class End : ICommand Properties | Edit this page View Source CommandHelp Get the command help. Declaration public static CommandHelp CommandHelp { get; } Property Value Type Description CommandHelp Methods | Edit this page View Source Invoke(Game) Invoke the command. Declaration public Reaction Invoke(Game game) Parameters Type Name Description Game game The game to invoke the command on. Returns Type Description Reaction The reaction. Implements ICommand"
  },
  "api/NetAF.Commands.Global.Exit.html": {
    "href": "api/NetAF.Commands.Global.Exit.html",
    "title": "Class Exit | NetAF",
    "keywords": "Class Exit Represents the Exit command. Inheritance object Exit Implements ICommand Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Commands.Global Assembly: NetAF.dll Syntax public sealed class Exit : ICommand Properties | Edit this page View Source CommandHelp Get the command help. Declaration public static CommandHelp CommandHelp { get; } Property Value Type Description CommandHelp Methods | Edit this page View Source Invoke(Game) Invoke the command. Declaration public Reaction Invoke(Game game) Parameters Type Name Description Game game The game to invoke the command on. Returns Type Description Reaction The reaction. Implements ICommand"
  },
  "api/NetAF.Commands.Global.Help.html": {
    "href": "api/NetAF.Commands.Global.Help.html",
    "title": "Class Help | NetAF",
    "keywords": "Class Help Represents the Help command. Inheritance object Help Implements ICommand Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Commands.Global Assembly: NetAF.dll Syntax public sealed class Help : ICommand Properties | Edit this page View Source CommandHelp Get the command help. Declaration public static CommandHelp CommandHelp { get; } Property Value Type Description CommandHelp Methods | Edit this page View Source Invoke(Game) Invoke the command. Declaration public Reaction Invoke(Game game) Parameters Type Name Description Game game The game to invoke the command on. Returns Type Description Reaction The reaction. Implements ICommand"
  },
  "api/NetAF.Commands.Global.Map.html": {
    "href": "api/NetAF.Commands.Global.Map.html",
    "title": "Class Map | NetAF",
    "keywords": "Class Map Represents the Map command. Inheritance object Map Implements ICommand Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Commands.Global Assembly: NetAF.dll Syntax public sealed class Map : ICommand Properties | Edit this page View Source CommandHelp Get the command help. Declaration public static CommandHelp CommandHelp { get; } Property Value Type Description CommandHelp Methods | Edit this page View Source Invoke(Game) Invoke the command. Declaration public Reaction Invoke(Game game) Parameters Type Name Description Game game The game to invoke the command on. Returns Type Description Reaction The reaction. Implements ICommand"
  },
  "api/NetAF.Commands.Global.New.html": {
    "href": "api/NetAF.Commands.Global.New.html",
    "title": "Class New | NetAF",
    "keywords": "Class New Represents the New command. Inheritance object New Implements ICommand Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Commands.Global Assembly: NetAF.dll Syntax public sealed class New : ICommand Properties | Edit this page View Source CommandHelp Get the command help. Declaration public static CommandHelp CommandHelp { get; } Property Value Type Description CommandHelp Methods | Edit this page View Source Invoke(Game) Invoke the command. Declaration public Reaction Invoke(Game game) Parameters Type Name Description Game game The game to invoke the command on. Returns Type Description Reaction The reaction. Implements ICommand"
  },
  "api/NetAF.Commands.Global.html": {
    "href": "api/NetAF.Commands.Global.html",
    "title": "Namespace NetAF.Commands.Global | NetAF",
    "keywords": "Namespace NetAF.Commands.Global Classes About Represents the About command. End Represents the End command. Exit Represents the Exit command. Help Represents the Help command. Map Represents the Map command. New Represents the New command."
  },
  "api/NetAF.Commands.ICommand.html": {
    "href": "api/NetAF.Commands.ICommand.html",
    "title": "Interface ICommand | NetAF",
    "keywords": "Interface ICommand Represents a command. Namespace: NetAF.Commands Assembly: NetAF.dll Syntax public interface ICommand Methods | Edit this page View Source Invoke(Game) Invoke the command. Declaration Reaction Invoke(Game game) Parameters Type Name Description Game game The game to invoke the command on. Returns Type Description Reaction The reaction."
  },
  "api/NetAF.Commands.Persistence.Load.html": {
    "href": "api/NetAF.Commands.Persistence.Load.html",
    "title": "Class Load | NetAF",
    "keywords": "Class Load Represents the Load command. Inheritance object CustomCommand Load Implements ICommand IPlayerVisible IRestoreFromObjectSerialization<CustomCommandSerialization> Inherited Members CustomCommand.Arguments CustomCommand.Help CustomCommand.InterpretIfNotPlayerVisible CustomCommand.Invoke(Game) CustomCommand.IsPlayerVisible CustomCommand.RestoreFrom(CustomCommandSerialization) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Commands.Persistence Assembly: NetAF.dll Syntax public sealed class Load : CustomCommand, ICommand, IPlayerVisible, IRestoreFromObjectSerialization<CustomCommandSerialization> Constructors | Edit this page View Source Load() Initializes a new instance of the Load class. Declaration public Load() Implements ICommand IPlayerVisible IRestoreFromObjectSerialization<T>"
  },
  "api/NetAF.Commands.Persistence.Save.html": {
    "href": "api/NetAF.Commands.Persistence.Save.html",
    "title": "Class Save | NetAF",
    "keywords": "Class Save Represents the Save command. Inheritance object CustomCommand Save Implements ICommand IPlayerVisible IRestoreFromObjectSerialization<CustomCommandSerialization> Inherited Members CustomCommand.Arguments CustomCommand.Help CustomCommand.InterpretIfNotPlayerVisible CustomCommand.Invoke(Game) CustomCommand.IsPlayerVisible CustomCommand.RestoreFrom(CustomCommandSerialization) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Commands.Persistence Assembly: NetAF.dll Syntax public sealed class Save : CustomCommand, ICommand, IPlayerVisible, IRestoreFromObjectSerialization<CustomCommandSerialization> Constructors | Edit this page View Source Save() Initializes a new instance of the Save class. Declaration public Save() Implements ICommand IPlayerVisible IRestoreFromObjectSerialization<T>"
  },
  "api/NetAF.Commands.Persistence.html": {
    "href": "api/NetAF.Commands.Persistence.html",
    "title": "Namespace NetAF.Commands.Persistence | NetAF",
    "keywords": "Namespace NetAF.Commands.Persistence Classes Load Represents the Load command. Save Represents the Save command."
  },
  "api/NetAF.Commands.Reaction.html": {
    "href": "api/NetAF.Commands.Reaction.html",
    "title": "Class Reaction | NetAF",
    "keywords": "Class Reaction Represents a reaction. Inheritance object Reaction Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Commands Assembly: NetAF.dll Syntax public sealed class Reaction Constructors | Edit this page View Source Reaction(ReactionResult, string) Represents a reaction. Declaration public Reaction(ReactionResult result, string description) Parameters Type Name Description ReactionResult result The result. string description A description of the result. Properties | Edit this page View Source Description Get a description of the result. Declaration public string Description { get; } Property Value Type Description string | Edit this page View Source Result Get the result. Declaration public ReactionResult Result { get; } Property Value Type Description ReactionResult"
  },
  "api/NetAF.Commands.ReactionResult.html": {
    "href": "api/NetAF.Commands.ReactionResult.html",
    "title": "Enum ReactionResult | NetAF",
    "keywords": "Enum ReactionResult Enumeration of reaction results. Namespace: NetAF.Commands Assembly: NetAF.dll Syntax public enum ReactionResult Fields Name Description Error An error occurred. GameModeChanged The game mode was changed. Inform The user should be informed. Silent The user should not be informed."
  },
  "api/NetAF.Commands.RegionMap.Pan.html": {
    "href": "api/NetAF.Commands.RegionMap.Pan.html",
    "title": "Class Pan | NetAF",
    "keywords": "Class Pan Represents the Pan command. Inheritance object Pan Implements ICommand Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Commands.RegionMap Assembly: NetAF.dll Syntax public sealed class Pan : ICommand Constructors | Edit this page View Source Pan(Direction) Represents the Pan command. Declaration public Pan(Direction direction) Parameters Type Name Description Direction direction The direction to pan. Properties | Edit this page View Source DownCommandHelp Get the command help for down. Declaration public static CommandHelp DownCommandHelp { get; } Property Value Type Description CommandHelp | Edit this page View Source EastCommandHelp Get the command help for east. Declaration public static CommandHelp EastCommandHelp { get; } Property Value Type Description CommandHelp | Edit this page View Source NorthCommandHelp Get the command help for north. Declaration public static CommandHelp NorthCommandHelp { get; } Property Value Type Description CommandHelp | Edit this page View Source SouthCommandHelp Get the command help for south. Declaration public static CommandHelp SouthCommandHelp { get; } Property Value Type Description CommandHelp | Edit this page View Source UpCommandHelp Get the command help for up. Declaration public static CommandHelp UpCommandHelp { get; } Property Value Type Description CommandHelp | Edit this page View Source WestCommandHelp Get the command help for west. Declaration public static CommandHelp WestCommandHelp { get; } Property Value Type Description CommandHelp Methods | Edit this page View Source GetPanPosition(Point3D, Direction) Get the pan position. Declaration public static Point3D GetPanPosition(Point3D current, Direction direction) Parameters Type Name Description Point3D current The current pan position. Direction direction The direction to pan. Returns Type Description Point3D The modified pan position. | Edit this page View Source Invoke(Game) Invoke the command. Declaration public Reaction Invoke(Game game) Parameters Type Name Description Game game The game to invoke the command on. Returns Type Description Reaction The reaction. Implements ICommand"
  },
  "api/NetAF.Commands.RegionMap.PanReset.html": {
    "href": "api/NetAF.Commands.RegionMap.PanReset.html",
    "title": "Class PanReset | NetAF",
    "keywords": "Class PanReset Represents the PanReset command. Inheritance object PanReset Implements ICommand Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Commands.RegionMap Assembly: NetAF.dll Syntax public sealed class PanReset : ICommand Properties | Edit this page View Source CommandHelp Get the command help. Declaration public static CommandHelp CommandHelp { get; } Property Value Type Description CommandHelp Methods | Edit this page View Source Invoke(Game) Invoke the command. Declaration public Reaction Invoke(Game game) Parameters Type Name Description Game game The game to invoke the command on. Returns Type Description Reaction The reaction. Implements ICommand"
  },
  "api/NetAF.Commands.RegionMap.html": {
    "href": "api/NetAF.Commands.RegionMap.html",
    "title": "Namespace NetAF.Commands.RegionMap | NetAF",
    "keywords": "Namespace NetAF.Commands.RegionMap Classes Pan Represents the Pan command. PanReset Represents the PanReset command."
  },
  "api/NetAF.Commands.Scene.Drop.html": {
    "href": "api/NetAF.Commands.Scene.Drop.html",
    "title": "Class Drop | NetAF",
    "keywords": "Class Drop Represents the Drop command. Inheritance object Drop Implements ICommand Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Commands.Scene Assembly: NetAF.dll Syntax public sealed class Drop : ICommand Constructors | Edit this page View Source Drop(Item) Represents the Drop command. Declaration public Drop(Item item) Parameters Type Name Description Item item The item to take. Properties | Edit this page View Source CommandHelp Get the command help. Declaration public static CommandHelp CommandHelp { get; } Property Value Type Description CommandHelp Methods | Edit this page View Source Invoke(Game) Invoke the command. Declaration public Reaction Invoke(Game game) Parameters Type Name Description Game game The game to invoke the command on. Returns Type Description Reaction The reaction. Implements ICommand"
  },
  "api/NetAF.Commands.Scene.Examine.html": {
    "href": "api/NetAF.Commands.Scene.Examine.html",
    "title": "Class Examine | NetAF",
    "keywords": "Class Examine Represents the Examine command. Inheritance object Examine Implements ICommand Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Commands.Scene Assembly: NetAF.dll Syntax public sealed class Examine : ICommand Constructors | Edit this page View Source Examine(IExaminable) Represents the Examine command. Declaration public Examine(IExaminable examinable) Parameters Type Name Description IExaminable examinable The examinable. Properties | Edit this page View Source CommandHelp Get the command help. Declaration public static CommandHelp CommandHelp { get; } Property Value Type Description CommandHelp Methods | Edit this page View Source Invoke(Game) Invoke the command. Declaration public Reaction Invoke(Game game) Parameters Type Name Description Game game The game to invoke the command on. Returns Type Description Reaction The reaction. Implements ICommand"
  },
  "api/NetAF.Commands.Scene.Move.html": {
    "href": "api/NetAF.Commands.Scene.Move.html",
    "title": "Class Move | NetAF",
    "keywords": "Class Move Represents the Move command. Inheritance object Move Implements ICommand Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Commands.Scene Assembly: NetAF.dll Syntax public sealed class Move : ICommand Constructors | Edit this page View Source Move(Direction) Represents the Move command. Declaration public Move(Direction direction) Parameters Type Name Description Direction direction The direction to move. Properties | Edit this page View Source DownCommandHelp Get the command help for down. Declaration public static CommandHelp DownCommandHelp { get; } Property Value Type Description CommandHelp | Edit this page View Source EastCommandHelp Get the command help for east. Declaration public static CommandHelp EastCommandHelp { get; } Property Value Type Description CommandHelp | Edit this page View Source NorthCommandHelp Get the command help for north. Declaration public static CommandHelp NorthCommandHelp { get; } Property Value Type Description CommandHelp | Edit this page View Source SouthCommandHelp Get the command help for south. Declaration public static CommandHelp SouthCommandHelp { get; } Property Value Type Description CommandHelp | Edit this page View Source UpCommandHelp Get the command help for up. Declaration public static CommandHelp UpCommandHelp { get; } Property Value Type Description CommandHelp | Edit this page View Source WestCommandHelp Get the command help for west. Declaration public static CommandHelp WestCommandHelp { get; } Property Value Type Description CommandHelp Methods | Edit this page View Source Invoke(Game) Invoke the command. Declaration public Reaction Invoke(Game game) Parameters Type Name Description Game game The game to invoke the command on. Returns Type Description Reaction The reaction. Implements ICommand"
  },
  "api/NetAF.Commands.Scene.Take.html": {
    "href": "api/NetAF.Commands.Scene.Take.html",
    "title": "Class Take | NetAF",
    "keywords": "Class Take Represents the Take command. Inheritance object Take Implements ICommand Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Commands.Scene Assembly: NetAF.dll Syntax public sealed class Take : ICommand Constructors | Edit this page View Source Take(Item) Represents the Take command. Declaration public Take(Item item) Parameters Type Name Description Item item The item to take. Properties | Edit this page View Source CommandHelp Get the command help. Declaration public static CommandHelp CommandHelp { get; } Property Value Type Description CommandHelp Methods | Edit this page View Source Invoke(Game) Invoke the command. Declaration public Reaction Invoke(Game game) Parameters Type Name Description Game game The game to invoke the command on. Returns Type Description Reaction The reaction. Implements ICommand"
  },
  "api/NetAF.Commands.Scene.TakeAll.html": {
    "href": "api/NetAF.Commands.Scene.TakeAll.html",
    "title": "Class TakeAll | NetAF",
    "keywords": "Class TakeAll Represents the Take all command. Inheritance object TakeAll Implements ICommand Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Commands.Scene Assembly: NetAF.dll Syntax public sealed class TakeAll : ICommand Properties | Edit this page View Source CommandHelp Get the command help. Declaration public static CommandHelp CommandHelp { get; } Property Value Type Description CommandHelp Methods | Edit this page View Source Invoke(Game) Invoke the command. Declaration public Reaction Invoke(Game game) Parameters Type Name Description Game game The game to invoke the command on. Returns Type Description Reaction The reaction. Implements ICommand"
  },
  "api/NetAF.Commands.Scene.Talk.html": {
    "href": "api/NetAF.Commands.Scene.Talk.html",
    "title": "Class Talk | NetAF",
    "keywords": "Class Talk Represents the Talk command. Inheritance object Talk Implements ICommand Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Commands.Scene Assembly: NetAF.dll Syntax public sealed class Talk : ICommand Constructors | Edit this page View Source Talk(IConverser) Represents the Talk command. Declaration public Talk(IConverser converser) Parameters Type Name Description IConverser converser The converser. Properties | Edit this page View Source TalkCommandHelp Get the command help. Declaration public static CommandHelp TalkCommandHelp { get; } Property Value Type Description CommandHelp | Edit this page View Source ToCommandHelp Get the command help for to. Declaration public static CommandHelp ToCommandHelp { get; } Property Value Type Description CommandHelp Methods | Edit this page View Source Invoke(Game) Invoke the command. Declaration public Reaction Invoke(Game game) Parameters Type Name Description Game game The game to invoke the command on. Returns Type Description Reaction The reaction. Implements ICommand"
  },
  "api/NetAF.Commands.Scene.Unactionable.html": {
    "href": "api/NetAF.Commands.Scene.Unactionable.html",
    "title": "Class Unactionable | NetAF",
    "keywords": "Class Unactionable Represents the Unactionable command. Inheritance object Unactionable Implements ICommand Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Commands.Scene Assembly: NetAF.dll Syntax public sealed class Unactionable : ICommand Constructors | Edit this page View Source Unactionable() Initializes a new instance of the Unactionable class. Declaration public Unactionable() | Edit this page View Source Unactionable(string) Initializes a new instance of the Unactionable class. Declaration public Unactionable(string description) Parameters Type Name Description string description The description. Properties | Edit this page View Source Description Get the description. Declaration public string Description { get; } Property Value Type Description string Methods | Edit this page View Source Invoke(Game) Invoke the command. Declaration public Reaction Invoke(Game game) Parameters Type Name Description Game game The game to invoke the command on. Returns Type Description Reaction The reaction. Implements ICommand"
  },
  "api/NetAF.Commands.Scene.UseOn.html": {
    "href": "api/NetAF.Commands.Scene.UseOn.html",
    "title": "Class UseOn | NetAF",
    "keywords": "Class UseOn Represents the UseOn command. Inheritance object UseOn Implements ICommand Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Commands.Scene Assembly: NetAF.dll Syntax public sealed class UseOn : ICommand Constructors | Edit this page View Source UseOn(Item, IInteractWithItem) Represents the UseOn command. Declaration public UseOn(Item item, IInteractWithItem target) Parameters Type Name Description Item item The item to use. IInteractWithItem target The target of the command. Properties | Edit this page View Source OnCommandHelp Get the command help for on. Declaration public static CommandHelp OnCommandHelp { get; } Property Value Type Description CommandHelp | Edit this page View Source UseCommandHelp Get the command help. Declaration public static CommandHelp UseCommandHelp { get; } Property Value Type Description CommandHelp Methods | Edit this page View Source Invoke(Game) Invoke the command. Declaration public Reaction Invoke(Game game) Parameters Type Name Description Game game The game to invoke the command on. Returns Type Description Reaction The reaction. Implements ICommand"
  },
  "api/NetAF.Commands.Scene.html": {
    "href": "api/NetAF.Commands.Scene.html",
    "title": "Namespace NetAF.Commands.Scene | NetAF",
    "keywords": "Namespace NetAF.Commands.Scene Classes Drop Represents the Drop command. Examine Represents the Examine command. Move Represents the Move command. Take Represents the Take command. TakeAll Represents the Take all command. Talk Represents the Talk command. Unactionable Represents the Unactionable command. UseOn Represents the UseOn command."
  },
  "api/NetAF.Commands.html": {
    "href": "api/NetAF.Commands.html",
    "title": "Namespace NetAF.Commands | NetAF",
    "keywords": "Namespace NetAF.Commands Classes CommandHelp Provides help for a command. CustomCommand Provides a custom command. Reaction Represents a reaction. Interfaces ICommand Represents a command. Enums ReactionResult Enumeration of reaction results. Delegates CustomCommandCallback Provides a callback for custom commands."
  },
  "api/NetAF.Conversations.Conversation.html": {
    "href": "api/NetAF.Conversations.Conversation.html",
    "title": "Class Conversation | NetAF",
    "keywords": "Class Conversation Represents a conversation. Inheritance object Conversation Implements IRestoreFromObjectSerialization<ConversationSerialization> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Conversations Assembly: NetAF.dll Syntax public sealed class Conversation : IRestoreFromObjectSerialization<ConversationSerialization> Constructors | Edit this page View Source Conversation(params Paragraph[]) Represents a conversation. Declaration public Conversation(params Paragraph[] paragraphs) Parameters Type Name Description Paragraph[] paragraphs The paragraphs. Properties | Edit this page View Source CurrentParagraph Get the current paragraph in the conversation. Declaration public Paragraph CurrentParagraph { get; } Property Value Type Description Paragraph | Edit this page View Source Log Get the log. Declaration public LogItem[] Log { get; } Property Value Type Description LogItem[] | Edit this page View Source Paragraphs Get the current paragraph in the conversation. Declaration public Paragraph[] Paragraphs { get; } Property Value Type Description Paragraph[] Methods | Edit this page View Source Next(Game) Trigger the next line in this conversation. Declaration public Reaction Next(Game game) Parameters Type Name Description Game game The game. Returns Type Description Reaction The reaction to the line. | Edit this page View Source Respond(Response, Game) Respond to the conversation. Declaration public Reaction Respond(Response response, Game game) Parameters Type Name Description Response response The response. Game game The game. Returns Type Description Reaction The reaction to the response. | Edit this page View Source RestoreFrom(ConversationSerialization) Restore this object from a serialization. Declaration public void RestoreFrom(ConversationSerialization serialization) Parameters Type Name Description ConversationSerialization serialization The serialization to restore from. Implements IRestoreFromObjectSerialization<T>"
  },
  "api/NetAF.Conversations.ConversationActionCallback.html": {
    "href": "api/NetAF.Conversations.ConversationActionCallback.html",
    "title": "Delegate ConversationActionCallback | NetAF",
    "keywords": "Delegate ConversationActionCallback Provides a callback that can be used in conversations invoking actions. Namespace: NetAF.Conversations Assembly: NetAF.dll Syntax public delegate void ConversationActionCallback(Game game) Parameters Type Name Description Game game The game to invoke the callback on."
  },
  "api/NetAF.Conversations.Instructions.ByCallback.html": {
    "href": "api/NetAF.Conversations.Instructions.ByCallback.html",
    "title": "Class ByCallback | NetAF",
    "keywords": "Class ByCallback An end of paragraph instruction that shifts paragraphs based on a callback. Inheritance object ByCallback Implements IEndOfPargraphInstruction Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Conversations.Instructions Assembly: NetAF.dll Syntax public sealed class ByCallback : IEndOfPargraphInstruction Constructors | Edit this page View Source ByCallback(Func<IEndOfPargraphInstruction>) An end of paragraph instruction that shifts paragraphs based on a callback. Declaration public ByCallback(Func<IEndOfPargraphInstruction> callback) Parameters Type Name Description Func<IEndOfPargraphInstruction> callback The callback that decides the instruction to use. Properties | Edit this page View Source Callback Get the callback that decides the instruction to use. Declaration public Func<IEndOfPargraphInstruction> Callback { get; } Property Value Type Description Func<IEndOfPargraphInstruction> Methods | Edit this page View Source GetIndexOfNext(Paragraph, Paragraph[]) Get the index of the next paragraph. Declaration public int GetIndexOfNext(Paragraph current, Paragraph[] paragraphs) Parameters Type Name Description Paragraph current The current paragraph. Paragraph[] paragraphs The collection of paragraphs. Returns Type Description int The index of the next paragraph. Implements IEndOfPargraphInstruction"
  },
  "api/NetAF.Conversations.Instructions.First.html": {
    "href": "api/NetAF.Conversations.Instructions.First.html",
    "title": "Class First | NetAF",
    "keywords": "Class First An end of paragraph instruction that shifts paragraphs to the start. Inheritance object First Implements IEndOfPargraphInstruction Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Conversations.Instructions Assembly: NetAF.dll Syntax public sealed class First : IEndOfPargraphInstruction Methods | Edit this page View Source GetIndexOfNext(Paragraph, Paragraph[]) Get the index of the next paragraph. Declaration public int GetIndexOfNext(Paragraph current, Paragraph[] paragraphs) Parameters Type Name Description Paragraph current The current paragraph. Paragraph[] paragraphs The collection of paragraphs. Returns Type Description int The index of the next paragraph. Implements IEndOfPargraphInstruction"
  },
  "api/NetAF.Conversations.Instructions.GoTo.html": {
    "href": "api/NetAF.Conversations.Instructions.GoTo.html",
    "title": "Class GoTo | NetAF",
    "keywords": "Class GoTo An end of paragraph instruction that shifts paragraphs based on an absolute index. Inheritance object GoTo Implements IEndOfPargraphInstruction Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Conversations.Instructions Assembly: NetAF.dll Syntax public sealed class GoTo : IEndOfPargraphInstruction Constructors | Edit this page View Source GoTo(int) An end of paragraph instruction that shifts paragraphs based on an absolute index. Declaration public GoTo(int index) Parameters Type Name Description int index The index of the next paragraph. Properties | Edit this page View Source Index Get the index. Declaration public int Index { get; } Property Value Type Description int Methods | Edit this page View Source GetIndexOfNext(Paragraph, Paragraph[]) Get the index of the next paragraph. Declaration public int GetIndexOfNext(Paragraph current, Paragraph[] paragraphs) Parameters Type Name Description Paragraph current The current paragraph. Paragraph[] paragraphs The collection of paragraphs. Returns Type Description int The index of the next paragraph. Implements IEndOfPargraphInstruction"
  },
  "api/NetAF.Conversations.Instructions.IEndOfPargraphInstruction.html": {
    "href": "api/NetAF.Conversations.Instructions.IEndOfPargraphInstruction.html",
    "title": "Interface IEndOfPargraphInstruction | NetAF",
    "keywords": "Interface IEndOfPargraphInstruction Represents an instructon to be carried out at the end of a paragraph. Namespace: NetAF.Conversations.Instructions Assembly: NetAF.dll Syntax public interface IEndOfPargraphInstruction Methods | Edit this page View Source GetIndexOfNext(Paragraph, Paragraph[]) Get the index of the next paragraph. Declaration int GetIndexOfNext(Paragraph current, Paragraph[] paragraphs) Parameters Type Name Description Paragraph current The current paragraph. Paragraph[] paragraphs The collection of paragraphs. Returns Type Description int The index of the next paragraph."
  },
  "api/NetAF.Conversations.Instructions.Jump.html": {
    "href": "api/NetAF.Conversations.Instructions.Jump.html",
    "title": "Class Jump | NetAF",
    "keywords": "Class Jump An end of paragraph instruction that shifts paragraphs based on a delta. Inheritance object Jump Implements IEndOfPargraphInstruction Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Conversations.Instructions Assembly: NetAF.dll Syntax public sealed class Jump : IEndOfPargraphInstruction Constructors | Edit this page View Source Jump(int) An end of paragraph instruction that shifts paragraphs based on a delta. Declaration public Jump(int delta) Parameters Type Name Description int delta The delta to shift paragraphs by. Properties | Edit this page View Source Delta Get the delta. Declaration public int Delta { get; } Property Value Type Description int Methods | Edit this page View Source GetIndexOfNext(Paragraph, Paragraph[]) Get the index of the next paragraph. Declaration public int GetIndexOfNext(Paragraph current, Paragraph[] paragraphs) Parameters Type Name Description Paragraph current The current paragraph. Paragraph[] paragraphs The collection of paragraphs. Returns Type Description int The index of the next paragraph. Implements IEndOfPargraphInstruction"
  },
  "api/NetAF.Conversations.Instructions.Last.html": {
    "href": "api/NetAF.Conversations.Instructions.Last.html",
    "title": "Class Last | NetAF",
    "keywords": "Class Last An end of paragraph instruction that shifts paragraphs to the end. Inheritance object Last Implements IEndOfPargraphInstruction Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Conversations.Instructions Assembly: NetAF.dll Syntax public sealed class Last : IEndOfPargraphInstruction Methods | Edit this page View Source GetIndexOfNext(Paragraph, Paragraph[]) Get the index of the next paragraph. Declaration public int GetIndexOfNext(Paragraph current, Paragraph[] paragraphs) Parameters Type Name Description Paragraph current The current paragraph. Paragraph[] paragraphs The collection of paragraphs. Returns Type Description int The index of the next paragraph. Implements IEndOfPargraphInstruction"
  },
  "api/NetAF.Conversations.Instructions.Next.html": {
    "href": "api/NetAF.Conversations.Instructions.Next.html",
    "title": "Class Next | NetAF",
    "keywords": "Class Next An end of paragraph instruction that shifts paragraphs to the next paragraph. Inheritance object Next Implements IEndOfPargraphInstruction Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Conversations.Instructions Assembly: NetAF.dll Syntax public sealed class Next : IEndOfPargraphInstruction Methods | Edit this page View Source GetIndexOfNext(Paragraph, Paragraph[]) Get the index of the next paragraph. Declaration public int GetIndexOfNext(Paragraph current, Paragraph[] paragraphs) Parameters Type Name Description Paragraph current The current paragraph. Paragraph[] paragraphs The collection of paragraphs. Returns Type Description int The index of the next paragraph. Implements IEndOfPargraphInstruction"
  },
  "api/NetAF.Conversations.Instructions.Previous.html": {
    "href": "api/NetAF.Conversations.Instructions.Previous.html",
    "title": "Class Previous | NetAF",
    "keywords": "Class Previous An end of paragraph instruction that shifts paragraphs to the previous paragraph. Inheritance object Previous Implements IEndOfPargraphInstruction Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Conversations.Instructions Assembly: NetAF.dll Syntax public sealed class Previous : IEndOfPargraphInstruction Methods | Edit this page View Source GetIndexOfNext(Paragraph, Paragraph[]) Get the index of the next paragraph. Declaration public int GetIndexOfNext(Paragraph current, Paragraph[] paragraphs) Parameters Type Name Description Paragraph current The current paragraph. Paragraph[] paragraphs The collection of paragraphs. Returns Type Description int The index of the next paragraph. Implements IEndOfPargraphInstruction"
  },
  "api/NetAF.Conversations.Instructions.Repeat.html": {
    "href": "api/NetAF.Conversations.Instructions.Repeat.html",
    "title": "Class Repeat | NetAF",
    "keywords": "Class Repeat An end of paragraph instruction that repeats. Inheritance object Repeat Implements IEndOfPargraphInstruction Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Conversations.Instructions Assembly: NetAF.dll Syntax public sealed class Repeat : IEndOfPargraphInstruction Methods | Edit this page View Source GetIndexOfNext(Paragraph, Paragraph[]) Get the index of the next paragraph. Declaration public int GetIndexOfNext(Paragraph current, Paragraph[] paragraphs) Parameters Type Name Description Paragraph current The current paragraph. Paragraph[] paragraphs The collection of paragraphs. Returns Type Description int The index of the next paragraph. Implements IEndOfPargraphInstruction"
  },
  "api/NetAF.Conversations.Instructions.ToName.html": {
    "href": "api/NetAF.Conversations.Instructions.ToName.html",
    "title": "Class ToName | NetAF",
    "keywords": "Class ToName An end of paragraph instruction that shifts paragraphs based on a name. Inheritance object ToName Implements IEndOfPargraphInstruction Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Conversations.Instructions Assembly: NetAF.dll Syntax public sealed class ToName : IEndOfPargraphInstruction Constructors | Edit this page View Source ToName(string) An end of paragraph instruction that shifts paragraphs based on a name. Declaration public ToName(string name) Parameters Type Name Description string name The name of the paragraph to jump to. Properties | Edit this page View Source Name Get the name of the paragraph to jump to. Declaration public string Name { get; } Property Value Type Description string Methods | Edit this page View Source GetIndexOfNext(Paragraph, Paragraph[]) Get the index of the next paragraph. Declaration public int GetIndexOfNext(Paragraph current, Paragraph[] paragraphs) Parameters Type Name Description Paragraph current The current paragraph. Paragraph[] paragraphs The collection of paragraphs. Returns Type Description int The index of the next paragraph. Implements IEndOfPargraphInstruction"
  },
  "api/NetAF.Conversations.Instructions.html": {
    "href": "api/NetAF.Conversations.Instructions.html",
    "title": "Namespace NetAF.Conversations.Instructions | NetAF",
    "keywords": "Namespace NetAF.Conversations.Instructions Classes ByCallback An end of paragraph instruction that shifts paragraphs based on a callback. First An end of paragraph instruction that shifts paragraphs to the start. GoTo An end of paragraph instruction that shifts paragraphs based on an absolute index. Jump An end of paragraph instruction that shifts paragraphs based on a delta. Last An end of paragraph instruction that shifts paragraphs to the end. Next An end of paragraph instruction that shifts paragraphs to the next paragraph. Previous An end of paragraph instruction that shifts paragraphs to the previous paragraph. Repeat An end of paragraph instruction that repeats. ToName An end of paragraph instruction that shifts paragraphs based on a name. Interfaces IEndOfPargraphInstruction Represents an instructon to be carried out at the end of a paragraph."
  },
  "api/NetAF.Conversations.LogItem.html": {
    "href": "api/NetAF.Conversations.LogItem.html",
    "title": "Class LogItem | NetAF",
    "keywords": "Class LogItem Provides a container for log items. Inheritance object LogItem Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Conversations Assembly: NetAF.dll Syntax public sealed class LogItem Constructors | Edit this page View Source LogItem(Participant, string) Provides a container for log items. Declaration public LogItem(Participant participant, string line) Parameters Type Name Description Participant participant The participant. string line The line. Properties | Edit this page View Source Line Get the line. Declaration public string Line { get; } Property Value Type Description string | Edit this page View Source Participant Get the participant. Declaration public Participant Participant { get; } Property Value Type Description Participant"
  },
  "api/NetAF.Conversations.Paragraph.html": {
    "href": "api/NetAF.Conversations.Paragraph.html",
    "title": "Class Paragraph | NetAF",
    "keywords": "Class Paragraph Represents a paragraph in a Conversation. Inheritance object Paragraph Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Conversations Assembly: NetAF.dll Syntax public sealed class Paragraph Constructors | Edit this page View Source Paragraph(string, ConversationActionCallback, IEndOfPargraphInstruction, string) Represents a paragraph in a Conversation. Declaration public Paragraph(string line, ConversationActionCallback action, IEndOfPargraphInstruction instruction, string name = \"\") Parameters Type Name Description string line Specify the line. ConversationActionCallback action Specify any action to be carried out with this line. IEndOfPargraphInstruction instruction Specify the end of paragraph instruction. This can be applied to a conversation to direct the conversation after this paragraph. string name Specify the name of the paragraph. | Edit this page View Source Paragraph(string, ConversationActionCallback, string) Initializes a new instance of the Paragraph class. Declaration public Paragraph(string line, ConversationActionCallback action, string name = \"\") Parameters Type Name Description string line Specify the line. ConversationActionCallback action Specify any action to be carried out with this line. string name Specify the name of the paragraph. | Edit this page View Source Paragraph(string, IEndOfPargraphInstruction, string) Initializes a new instance of the Paragraph class. Declaration public Paragraph(string line, IEndOfPargraphInstruction instruction, string name = \"\") Parameters Type Name Description string line Specify the line. IEndOfPargraphInstruction instruction Specify the end of paragraph instruction. This can be applied to a conversation to direct the conversation after this paragraph. string name Specify the name of the paragraph. | Edit this page View Source Paragraph(string, string) Initializes a new instance of the Paragraph class. Declaration public Paragraph(string line, string name = \"\") Parameters Type Name Description string line Specify the line. string name Specify the name of the paragraph. Properties | Edit this page View Source Action Get or set any action to carry out on this line. Declaration public ConversationActionCallback Action { get; set; } Property Value Type Description ConversationActionCallback | Edit this page View Source CanRespond Get if a response is possible. Declaration public bool CanRespond { get; } Property Value Type Description bool | Edit this page View Source Instruction Get the end of paragraph instruction. This can be applied to a conversation to direct the conversation after this paragraph. Declaration public IEndOfPargraphInstruction Instruction { get; } Property Value Type Description IEndOfPargraphInstruction | Edit this page View Source Line Get or set the line. Declaration public string Line { get; set; } Property Value Type Description string | Edit this page View Source Name Get the name. Declaration public string Name { get; } Property Value Type Description string | Edit this page View Source Responses Get or set the responses, applicable to the last line. Declaration public Response[] Responses { get; set; } Property Value Type Description Response[]"
  },
  "api/NetAF.Conversations.Participant.html": {
    "href": "api/NetAF.Conversations.Participant.html",
    "title": "Enum Participant | NetAF",
    "keywords": "Enum Participant Enumeration of participants in a conversation. Namespace: NetAF.Conversations Assembly: NetAF.dll Syntax public enum Participant Fields Name Description Other Any other participant. Player The player."
  },
  "api/NetAF.Conversations.Response.html": {
    "href": "api/NetAF.Conversations.Response.html",
    "title": "Class Response | NetAF",
    "keywords": "Class Response Provides a response to a conversation. Inheritance object Response Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Conversations Assembly: NetAF.dll Syntax public sealed class Response Constructors | Edit this page View Source Response(string) Initializes a new instance of the Response class. Declaration public Response(string line) Parameters Type Name Description string line The line to trigger this response. | Edit this page View Source Response(string, IEndOfPargraphInstruction) Provides a response to a conversation. Declaration public Response(string line, IEndOfPargraphInstruction instruction) Parameters Type Name Description string line The line to trigger this response. IEndOfPargraphInstruction instruction Specify the end of paragraph instruction. This can be applied to a conversation to direct the conversation after this paragraph. Properties | Edit this page View Source Instruction Get the end of paragraph instruction. This can be applied to a conversation to direct the conversation after this paragraph. Declaration public IEndOfPargraphInstruction Instruction { get; } Property Value Type Description IEndOfPargraphInstruction | Edit this page View Source Line Get the line. Declaration public string Line { get; } Property Value Type Description string"
  },
  "api/NetAF.Conversations.html": {
    "href": "api/NetAF.Conversations.html",
    "title": "Namespace NetAF.Conversations | NetAF",
    "keywords": "Namespace NetAF.Conversations Classes Conversation Represents a conversation. LogItem Provides a container for log items. Paragraph Represents a paragraph in a Conversation. Response Provides a response to a conversation. Enums Participant Enumeration of participants in a conversation. Delegates ConversationActionCallback Provides a callback that can be used in conversations invoking actions."
  },
  "api/NetAF.Extensions.CommandHelpExtensions.html": {
    "href": "api/NetAF.Extensions.CommandHelpExtensions.html",
    "title": "Class CommandHelpExtensions | NetAF",
    "keywords": "Class CommandHelpExtensions Provides extension methods for CommandHelp. Inheritance object CommandHelpExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Extensions Assembly: NetAF.dll Syntax public static class CommandHelpExtensions Methods | Edit this page View Source FormattedToDisplayShortcut(CommandHelp) Returns this CommandHelp formatted to display command in the format Command/Shortcut. Declaration public static CommandHelp FormattedToDisplayShortcut(this CommandHelp value) Parameters Type Name Description CommandHelp value The value. Returns Type Description CommandHelp The formatted CommandHelp. | Edit this page View Source FormattedToDisplayShortcutAndVariable(CommandHelp) Returns this CommandHelp formatted to display command in the format Command/Shortcut __. Declaration public static CommandHelp FormattedToDisplayShortcutAndVariable(this CommandHelp value) Parameters Type Name Description CommandHelp value The value. Returns Type Description CommandHelp The formatted CommandHelp."
  },
  "api/NetAF.Extensions.DirectionExtensions.html": {
    "href": "api/NetAF.Extensions.DirectionExtensions.html",
    "title": "Class DirectionExtensions | NetAF",
    "keywords": "Class DirectionExtensions Provides extension versions for Directions. Inheritance object DirectionExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Extensions Assembly: NetAF.dll Syntax public static class DirectionExtensions Methods | Edit this page View Source Inverse(Direction) Get an inverse direction. Declaration public static Direction Inverse(this Direction value) Parameters Type Name Description Direction value The direction. Returns Type Description Direction The inverse direction."
  },
  "api/NetAF.Extensions.StringBuilderExtensions.html": {
    "href": "api/NetAF.Extensions.StringBuilderExtensions.html",
    "title": "Class StringBuilderExtensions | NetAF",
    "keywords": "Class StringBuilderExtensions Provides extension methods for StringBuilder. Inheritance object StringBuilderExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Extensions Assembly: NetAF.dll Syntax public static class StringBuilderExtensions Methods | Edit this page View Source EnsureFinishedSentence(StringBuilder) Ensure this string is a finished sentence, ending in either ?, ! or . Declaration public static void EnsureFinishedSentence(this StringBuilder value) Parameters Type Name Description StringBuilder value The string to finish."
  },
  "api/NetAF.Extensions.StringExtensions.html": {
    "href": "api/NetAF.Extensions.StringExtensions.html",
    "title": "Class StringExtensions | NetAF",
    "keywords": "Class StringExtensions Provides extension methods for strings. Inheritance object StringExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Extensions Assembly: NetAF.dll Syntax public static class StringExtensions Methods | Edit this page View Source AddSentence(string, string) Add a sentence to this string. Declaration public static string AddSentence(this string value, string other) Parameters Type Name Description string value The value. string other The other value. Returns Type Description string The concatenated string. | Edit this page View Source CaseInsensitiveContains(string, string) Returns a value indicating whether a specified substring occurs within this string. This is not case sensitive. Declaration public static bool CaseInsensitiveContains(this string value, string subString) Parameters Type Name Description string value The value. string subString The string to seek. Returns Type Description bool True if the value parameter occurs within this string, or if value is the empty string (\"\"); otherwise, false. | Edit this page View Source EnsureFinishedSentence(string) Ensure this string is a finished sentence, ending in either ?, ! or . Declaration public static string EnsureFinishedSentence(this string value) Parameters Type Name Description string value The string to finish. Returns Type Description string The finished string. | Edit this page View Source EqualsExaminable(string, IExaminable) Determine if this string equals an IExaminable. Declaration public static bool EqualsExaminable(this string value, IExaminable examinable) Parameters Type Name Description string value The value. IExaminable examinable The examinable. Returns Type Description bool True if this string equals the identifier, else false. | Edit this page View Source EqualsIdentifier(string, Identifier) Determine if this string equals an identifier. Declaration public static bool EqualsIdentifier(this string value, Identifier identifier) Parameters Type Name Description string value The value. Identifier identifier The identifier. Returns Type Description bool True if this string equals the identifier, else false. | Edit this page View Source GetObjectifier(string) Get an objectifier for a word. Declaration public static string GetObjectifier(this string word) Parameters Type Name Description string word The word. Returns Type Description string The objectifier. | Edit this page View Source InsensitiveEquals(string, string) Compare this string to another, with no case sensitivity. Declaration public static bool InsensitiveEquals(this string value, string other) Parameters Type Name Description string value The value. string other The other value. Returns Type Description bool The number of lines in the string. | Edit this page View Source IsPlural(string) Get if a word is plural. Declaration public static bool IsPlural(this string word) Parameters Type Name Description string word The word to check. Returns Type Description bool True if the word is plural. | Edit this page View Source IsVowel(string) Get if a character is a vowel. Declaration public static bool IsVowel(this string value) Parameters Type Name Description string value The value to check. Returns Type Description bool True if the character is a vowel. | Edit this page View Source LineCount(string) Determine the number of lines in this string. Declaration public static int LineCount(this string value) Parameters Type Name Description string value The value. Returns Type Description int The number of lines in the string. | Edit this page View Source RemoveSentenceEnd(string) Ensure this string is not a finished sentence, ending in either ?, ! or . Declaration public static string RemoveSentenceEnd(this string value) Parameters Type Name Description string value The string to ensure isn't finished finish. Returns Type Description string The unfinished string. | Edit this page View Source ToDescription(string) Returns this string as a Description. Declaration public static Description ToDescription(this string value) Parameters Type Name Description string value The value. Returns Type Description Description This string as a description. | Edit this page View Source ToIdentifier(string) Returns this string as an Identifier. Declaration public static Identifier ToIdentifier(this string value) Parameters Type Name Description string value The value. Returns Type Description Identifier This string as an identifier. | Edit this page View Source ToSentenceCase(string) Convert a string to sentence case. Declaration public static string ToSentenceCase(this string value) Parameters Type Name Description string value The value. Returns Type Description string The word in sentence case. | Edit this page View Source ToSpeech(string) Convert a string to speech. Declaration public static string ToSpeech(this string value) Parameters Type Name Description string value The value. Returns Type Description string The value in sentence case."
  },
  "api/NetAF.Extensions.html": {
    "href": "api/NetAF.Extensions.html",
    "title": "Namespace NetAF.Extensions | NetAF",
    "keywords": "Namespace NetAF.Extensions Classes CommandHelpExtensions Provides extension methods for CommandHelp. DirectionExtensions Provides extension versions for Directions. StringBuilderExtensions Provides extension methods for StringBuilder. StringExtensions Provides extension methods for strings."
  },
  "api/NetAF.Interpretation.ConversationCommandInterpreter.html": {
    "href": "api/NetAF.Interpretation.ConversationCommandInterpreter.html",
    "title": "Class ConversationCommandInterpreter | NetAF",
    "keywords": "Class ConversationCommandInterpreter Provides an object that can be used for interpreting conversation commands. Inheritance object ConversationCommandInterpreter Implements IInterpreter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Interpretation Assembly: NetAF.dll Syntax public sealed class ConversationCommandInterpreter : IInterpreter Properties | Edit this page View Source DefaultSupportedCommands Get an array of all supported commands. Declaration public static CommandHelp[] DefaultSupportedCommands { get; } Property Value Type Description CommandHelp[] | Edit this page View Source SupportedCommands Get an array of all supported commands. Declaration public CommandHelp[] SupportedCommands { get; } Property Value Type Description CommandHelp[] Methods | Edit this page View Source GetContextualCommandHelp(Game) Get contextual command help for a game, based on its current state. Declaration public CommandHelp[] GetContextualCommandHelp(Game game) Parameters Type Name Description Game game The game. Returns Type Description CommandHelp[] The contextual help. | Edit this page View Source Interpret(string, Game) Interpret a string. Declaration public InterpretationResult Interpret(string input, Game game) Parameters Type Name Description string input The string to interpret. Game game The game. Returns Type Description InterpretationResult The result of the interpretation. Implements IInterpreter"
  },
  "api/NetAF.Interpretation.CustomCommandInterpreter.html": {
    "href": "api/NetAF.Interpretation.CustomCommandInterpreter.html",
    "title": "Class CustomCommandInterpreter | NetAF",
    "keywords": "Class CustomCommandInterpreter Provides an object that can be used for interpreting custom commands. Inheritance object CustomCommandInterpreter Implements IInterpreter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Interpretation Assembly: NetAF.dll Syntax public sealed class CustomCommandInterpreter : IInterpreter Properties | Edit this page View Source SupportedCommands Get an array of all supported commands. Declaration public CommandHelp[] SupportedCommands { get; } Property Value Type Description CommandHelp[] Methods | Edit this page View Source GetContextualCommandHelp(Game) Get contextual command help for a game, based on its current state. Declaration public CommandHelp[] GetContextualCommandHelp(Game game) Parameters Type Name Description Game game The game. Returns Type Description CommandHelp[] The contextual help. | Edit this page View Source Interpret(string, Game) Interpret a string. Declaration public InterpretationResult Interpret(string input, Game game) Parameters Type Name Description string input The string to interpret. Game game The game. Returns Type Description InterpretationResult The result of the interpretation. Implements IInterpreter"
  },
  "api/NetAF.Interpretation.FrameCommandInterpreter.html": {
    "href": "api/NetAF.Interpretation.FrameCommandInterpreter.html",
    "title": "Class FrameCommandInterpreter | NetAF",
    "keywords": "Class FrameCommandInterpreter Provides an object that can be used for interpreting frame commands. Inheritance object FrameCommandInterpreter Implements IInterpreter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Interpretation Assembly: NetAF.dll Syntax public sealed class FrameCommandInterpreter : IInterpreter Properties | Edit this page View Source DefaultSupportedCommands Get an array of all supported commands. Declaration public static CommandHelp[] DefaultSupportedCommands { get; } Property Value Type Description CommandHelp[] | Edit this page View Source SupportedCommands Get an array of all supported commands. Declaration public CommandHelp[] SupportedCommands { get; } Property Value Type Description CommandHelp[] Methods | Edit this page View Source GetContextualCommandHelp(Game) Get contextual command help for a game, based on its current state. Declaration public CommandHelp[] GetContextualCommandHelp(Game game) Parameters Type Name Description Game game The game. Returns Type Description CommandHelp[] The contextual help. | Edit this page View Source Interpret(string, Game) Interpret a string. Declaration public InterpretationResult Interpret(string input, Game game) Parameters Type Name Description string input The string to interpret. Game game The game. Returns Type Description InterpretationResult The result of the interpretation. Implements IInterpreter"
  },
  "api/NetAF.Interpretation.GlobalCommandInterpreter.html": {
    "href": "api/NetAF.Interpretation.GlobalCommandInterpreter.html",
    "title": "Class GlobalCommandInterpreter | NetAF",
    "keywords": "Class GlobalCommandInterpreter Provides an object that can be used for interpreting global commands. Inheritance object GlobalCommandInterpreter Implements IInterpreter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Interpretation Assembly: NetAF.dll Syntax public sealed class GlobalCommandInterpreter : IInterpreter Properties | Edit this page View Source DefaultSupportedCommands Get an array of all supported commands. Declaration public static CommandHelp[] DefaultSupportedCommands { get; } Property Value Type Description CommandHelp[] | Edit this page View Source SupportedCommands Get an array of all supported commands. Declaration public CommandHelp[] SupportedCommands { get; } Property Value Type Description CommandHelp[] Methods | Edit this page View Source GetContextualCommandHelp(Game) Get contextual command help for a game, based on its current state. Declaration public CommandHelp[] GetContextualCommandHelp(Game game) Parameters Type Name Description Game game The game. Returns Type Description CommandHelp[] The contextual help. | Edit this page View Source Interpret(string, Game) Interpret a string. Declaration public InterpretationResult Interpret(string input, Game game) Parameters Type Name Description string input The string to interpret. Game game The game. Returns Type Description InterpretationResult The result of the interpretation. Implements IInterpreter"
  },
  "api/NetAF.Interpretation.IInterpreter.html": {
    "href": "api/NetAF.Interpretation.IInterpreter.html",
    "title": "Interface IInterpreter | NetAF",
    "keywords": "Interface IInterpreter Represents any object that can act as an interpreter for input. Namespace: NetAF.Interpretation Assembly: NetAF.dll Syntax public interface IInterpreter Properties | Edit this page View Source SupportedCommands Get an array of all supported commands. Declaration CommandHelp[] SupportedCommands { get; } Property Value Type Description CommandHelp[] Methods | Edit this page View Source GetContextualCommandHelp(Game) Get contextual command help for a game, based on its current state. Declaration CommandHelp[] GetContextualCommandHelp(Game game) Parameters Type Name Description Game game The game. Returns Type Description CommandHelp[] The contextual help. | Edit this page View Source Interpret(string, Game) Interpret a string. Declaration InterpretationResult Interpret(string input, Game game) Parameters Type Name Description string input The string to interpret. Game game The game. Returns Type Description InterpretationResult The result of the interpretation."
  },
  "api/NetAF.Interpretation.InputInterpreter.html": {
    "href": "api/NetAF.Interpretation.InputInterpreter.html",
    "title": "Class InputInterpreter | NetAF",
    "keywords": "Class InputInterpreter Provides an object that can be used for interpreting game input. Inheritance object InputInterpreter Implements IInterpreter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Interpretation Assembly: NetAF.dll Syntax public sealed class InputInterpreter : IInterpreter Constructors | Edit this page View Source InputInterpreter(params IInterpreter[]) Provides an object that can be used for interpreting game input. Declaration public InputInterpreter(params IInterpreter[] interpreters) Parameters Type Name Description IInterpreter[] interpreters The interpreters. Properties | Edit this page View Source SupportedCommands Get an array of all supported commands. Declaration public CommandHelp[] SupportedCommands { get; } Property Value Type Description CommandHelp[] Methods | Edit this page View Source GetContextualCommandHelp(Game) Get contextual command help for a game, based on its current state. Declaration public CommandHelp[] GetContextualCommandHelp(Game game) Parameters Type Name Description Game game The game. Returns Type Description CommandHelp[] The contextual help. | Edit this page View Source Interpret(string, Game) Interpret a string. Declaration public InterpretationResult Interpret(string input, Game game) Parameters Type Name Description string input The string to interpret. Game game The game. Returns Type Description InterpretationResult The result of the interpretation. Implements IInterpreter"
  },
  "api/NetAF.Interpretation.InterpretationResult.html": {
    "href": "api/NetAF.Interpretation.InterpretationResult.html",
    "title": "Class InterpretationResult | NetAF",
    "keywords": "Class InterpretationResult Represents the result of an interpretation. Inheritance object InterpretationResult Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Interpretation Assembly: NetAF.dll Syntax public class InterpretationResult Constructors | Edit this page View Source InterpretationResult(bool, ICommand) Represents the result of an interpretation. Declaration public InterpretationResult(bool wasInterpretedSuccessfully, ICommand command) Parameters Type Name Description bool wasInterpretedSuccessfully If interpretation was successful. ICommand command The command. Properties | Edit this page View Source Command Get the command. Declaration public ICommand Command { get; } Property Value Type Description ICommand | Edit this page View Source Fail Get a default result for failure. Declaration public static InterpretationResult Fail { get; } Property Value Type Description InterpretationResult | Edit this page View Source WasInterpretedSuccessfully Get if interpretation was successful. Declaration public bool WasInterpretedSuccessfully { get; } Property Value Type Description bool"
  },
  "api/NetAF.Interpretation.Interpreters.html": {
    "href": "api/NetAF.Interpretation.Interpreters.html",
    "title": "Class Interpreters | NetAF",
    "keywords": "Class Interpreters Provides collections of interpreters. Inheritance object Interpreters Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Interpretation Assembly: NetAF.dll Syntax public static class Interpreters Properties | Edit this page View Source ConversationInterpreter Get the conversation command interpreter. Declaration public static IInterpreter ConversationInterpreter { get; } Property Value Type Description IInterpreter | Edit this page View Source Default Get the default interpreters. Declaration public static IInterpreter Default { get; } Property Value Type Description IInterpreter | Edit this page View Source RegionMapCommandInterpreter Get the region map command interpreter. Declaration public static IInterpreter RegionMapCommandInterpreter { get; } Property Value Type Description IInterpreter | Edit this page View Source SceneInterpreter Get the scene command interpreter. Declaration public static IInterpreter SceneInterpreter { get; } Property Value Type Description IInterpreter"
  },
  "api/NetAF.Interpretation.RegionMapCommandInterpreter.html": {
    "href": "api/NetAF.Interpretation.RegionMapCommandInterpreter.html",
    "title": "Class RegionMapCommandInterpreter | NetAF",
    "keywords": "Class RegionMapCommandInterpreter Provides an object that can be used for interpreting region map commands. Inheritance object RegionMapCommandInterpreter Implements IInterpreter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Interpretation Assembly: NetAF.dll Syntax public sealed class RegionMapCommandInterpreter : IInterpreter Properties | Edit this page View Source DefaultSupportedCommands Get an array of all supported commands. Declaration public static CommandHelp[] DefaultSupportedCommands { get; } Property Value Type Description CommandHelp[] | Edit this page View Source SupportedCommands Get an array of all supported commands. Declaration public CommandHelp[] SupportedCommands { get; } Property Value Type Description CommandHelp[] Methods | Edit this page View Source GetContextualCommandHelp(Game) Get contextual command help for a game, based on its current state. Declaration public CommandHelp[] GetContextualCommandHelp(Game game) Parameters Type Name Description Game game The game. Returns Type Description CommandHelp[] The contextual help. | Edit this page View Source Interpret(string, Game) Interpret a string. Declaration public InterpretationResult Interpret(string input, Game game) Parameters Type Name Description string input The string to interpret. Game game The game. Returns Type Description InterpretationResult The result of the interpretation. Implements IInterpreter"
  },
  "api/NetAF.Interpretation.SceneCommandInterpreter.html": {
    "href": "api/NetAF.Interpretation.SceneCommandInterpreter.html",
    "title": "Class SceneCommandInterpreter | NetAF",
    "keywords": "Class SceneCommandInterpreter Provides an object that can be used for interpreting scene commands. Inheritance object SceneCommandInterpreter Implements IInterpreter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Interpretation Assembly: NetAF.dll Syntax public sealed class SceneCommandInterpreter : IInterpreter Fields | Edit this page View Source Me Get the me command. Declaration public const string Me = \"Me\" Field Value Type Description string | Edit this page View Source Overworld Get the overworld command. Declaration public const string Overworld = \"Overworld\" Field Value Type Description string | Edit this page View Source Region Get the region command. Declaration public const string Region = \"Region\" Field Value Type Description string | Edit this page View Source Room Get the room command. Declaration public const string Room = \"Room\" Field Value Type Description string Properties | Edit this page View Source DefaultSupportedCommands Get an array of all supported commands. Declaration public static CommandHelp[] DefaultSupportedCommands { get; } Property Value Type Description CommandHelp[] | Edit this page View Source SupportedCommands Get an array of all supported commands. Declaration public CommandHelp[] SupportedCommands { get; } Property Value Type Description CommandHelp[] Methods | Edit this page View Source GetContextualCommandHelp(Game) Get contextual command help for a game, based on its current state. Declaration public CommandHelp[] GetContextualCommandHelp(Game game) Parameters Type Name Description Game game The game. Returns Type Description CommandHelp[] The contextual help. | Edit this page View Source Interpret(string, Game) Interpret a string. Declaration public InterpretationResult Interpret(string input, Game game) Parameters Type Name Description string input The string to interpret. Game game The game. Returns Type Description InterpretationResult The result of the interpretation. Implements IInterpreter"
  },
  "api/NetAF.Interpretation.html": {
    "href": "api/NetAF.Interpretation.html",
    "title": "Namespace NetAF.Interpretation | NetAF",
    "keywords": "Namespace NetAF.Interpretation Classes ConversationCommandInterpreter Provides an object that can be used for interpreting conversation commands. CustomCommandInterpreter Provides an object that can be used for interpreting custom commands. FrameCommandInterpreter Provides an object that can be used for interpreting frame commands. GlobalCommandInterpreter Provides an object that can be used for interpreting global commands. InputInterpreter Provides an object that can be used for interpreting game input. InterpretationResult Represents the result of an interpretation. Interpreters Provides collections of interpreters. RegionMapCommandInterpreter Provides an object that can be used for interpreting region map commands. SceneCommandInterpreter Provides an object that can be used for interpreting scene commands. Interfaces IInterpreter Represents any object that can act as an interpreter for input."
  },
  "api/NetAF.Logic.AssetCatalog.html": {
    "href": "api/NetAF.Logic.AssetCatalog.html",
    "title": "Class AssetCatalog | NetAF",
    "keywords": "Class AssetCatalog Provides a catalog of all assets in a game. Inheritance object AssetCatalog Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Logic Assembly: NetAF.dll Syntax public class AssetCatalog Properties | Edit this page View Source Characters Get the characters. Declaration public NonPlayableCharacter[] Characters { get; } Property Value Type Description NonPlayableCharacter[] | Edit this page View Source Examinables Get the examinables. Declaration public IExaminable[] Examinables { get; } Property Value Type Description IExaminable[] | Edit this page View Source ItemContainers Get the item containers. Declaration public IItemContainer[] ItemContainers { get; } Property Value Type Description IItemContainer[] | Edit this page View Source Items Get the items. Declaration public Item[] Items { get; } Property Value Type Description Item[] | Edit this page View Source Players Get the players. Declaration public PlayableCharacter[] Players { get; } Property Value Type Description PlayableCharacter[] | Edit this page View Source Rooms Get the rooms. Declaration public Room[] Rooms { get; } Property Value Type Description Room[] Methods | Edit this page View Source FromGame(Game) Create a new AssetCatalog from a game. Declaration public static AssetCatalog FromGame(Game game) Parameters Type Name Description Game game The game to create the catalog from. Returns Type Description AssetCatalog The populate asset catalog. | Edit this page View Source Register(params IExaminable[]) Registers a collection of examinables. Declaration public void Register(params IExaminable[] examinables) Parameters Type Name Description IExaminable[] examinables The examinables to register. | Edit this page View Source Register(params IAssetTemplate<IExaminable>[]) Registers a collection of examinables. Declaration public void Register(params IAssetTemplate<IExaminable>[] templates) Parameters Type Name Description IAssetTemplate<IExaminable>[] templates The templates to register."
  },
  "api/NetAF.Logic.AssetGenerator.html": {
    "href": "api/NetAF.Logic.AssetGenerator.html",
    "title": "Class AssetGenerator | NetAF",
    "keywords": "Class AssetGenerator Represents a generator for game assets. Inheritance object AssetGenerator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Logic Assembly: NetAF.dll Syntax public sealed class AssetGenerator Methods | Edit this page View Source Custom(OverworldCreationCallback, PlayerCreationCallback) Create an asset generator that creates custom values. Callbacks determine the overworld and player that will be returned on each call to GetOverworld and GetPlayer. Declaration public static AssetGenerator Custom(OverworldCreationCallback overworldCreationCallback, PlayerCreationCallback playerCreationCallback) Parameters Type Name Description OverworldCreationCallback overworldCreationCallback The overworld creation callback. PlayerCreationCallback playerCreationCallback The player creation callback. Returns Type Description AssetGenerator Asset generation that will always return an overworld and a player as defined by the callbacks. | Edit this page View Source GetOverworld() Get the overworld. Declaration public Overworld GetOverworld() Returns Type Description Overworld The overworld. | Edit this page View Source GetPlayer() Get the player. Declaration public PlayableCharacter GetPlayer() Returns Type Description PlayableCharacter The player. | Edit this page View Source New(IAssetTemplate<Overworld>, IAssetTemplate<PlayableCharacter>) Create an asset generator that creates new values. Different instances of overworld and player will be returned on each call to GetOverworld and GetPlayer. Declaration public static AssetGenerator New(IAssetTemplate<Overworld> overworldTemplate, IAssetTemplate<PlayableCharacter> playerTemplate) Parameters Type Name Description IAssetTemplate<Overworld> overworldTemplate The overworld template. IAssetTemplate<PlayableCharacter> playerTemplate The player template. Returns Type Description AssetGenerator Asset generation that will always return a new overworld and a new player. | Edit this page View Source New(OverworldMaker, IAssetTemplate<PlayableCharacter>) Create an asset generator that creates new values. Different instances of overworld and player will be returned on each call to GetOverworld and GetPlayer. Declaration public static AssetGenerator New(OverworldMaker overworldMaker, IAssetTemplate<PlayableCharacter> playerTemplate) Parameters Type Name Description OverworldMaker overworldMaker The overworld maker. IAssetTemplate<PlayableCharacter> playerTemplate The player template. Returns Type Description AssetGenerator Asset generation that will always return a new overworld and a new player. | Edit this page View Source Retained(Overworld, PlayableCharacter) Create an asset generator that uses retained value. The same instance of overworld and player will be returned on each call to GetOverworld and GetPlayer. Declaration public static AssetGenerator Retained(Overworld overworld, PlayableCharacter player) Parameters Type Name Description Overworld overworld The overworld. PlayableCharacter player The player. Returns Type Description AssetGenerator Asset generation that will always return the same instance overworld and the same instance of the player."
  },
  "api/NetAF.Logic.Callbacks.GameCreationCallback.html": {
    "href": "api/NetAF.Logic.Callbacks.GameCreationCallback.html",
    "title": "Delegate GameCreationCallback | NetAF",
    "keywords": "Delegate GameCreationCallback Represents the callback used for Game creation. Namespace: NetAF.Logic.Callbacks Assembly: NetAF.dll Syntax public delegate Game GameCreationCallback() Returns Type Description Game A game created by the callback."
  },
  "api/NetAF.Logic.Callbacks.GameSetupCallback.html": {
    "href": "api/NetAF.Logic.Callbacks.GameSetupCallback.html",
    "title": "Delegate GameSetupCallback | NetAF",
    "keywords": "Delegate GameSetupCallback Represents the callback used for Game setup. Namespace: NetAF.Logic.Callbacks Assembly: NetAF.dll Syntax public delegate void GameSetupCallback(Game game) Parameters Type Name Description Game game The game to setup."
  },
  "api/NetAF.Logic.Callbacks.OverworldCreationCallback.html": {
    "href": "api/NetAF.Logic.Callbacks.OverworldCreationCallback.html",
    "title": "Delegate OverworldCreationCallback | NetAF",
    "keywords": "Delegate OverworldCreationCallback Represents a callback for Overworld creation. Namespace: NetAF.Logic.Callbacks Assembly: NetAF.dll Syntax public delegate Overworld OverworldCreationCallback() Returns Type Description Overworld A generated Overworld."
  },
  "api/NetAF.Logic.Callbacks.PlayerCreationCallback.html": {
    "href": "api/NetAF.Logic.Callbacks.PlayerCreationCallback.html",
    "title": "Delegate PlayerCreationCallback | NetAF",
    "keywords": "Delegate PlayerCreationCallback Represents a callback for Player creation. Namespace: NetAF.Logic.Callbacks Assembly: NetAF.dll Syntax public delegate PlayableCharacter PlayerCreationCallback() Returns Type Description PlayableCharacter A generated Player."
  },
  "api/NetAF.Logic.Callbacks.html": {
    "href": "api/NetAF.Logic.Callbacks.html",
    "title": "Namespace NetAF.Logic.Callbacks | NetAF",
    "keywords": "Namespace NetAF.Logic.Callbacks Delegates GameCreationCallback Represents the callback used for Game creation. GameSetupCallback Represents the callback used for Game setup. OverworldCreationCallback Represents a callback for Overworld creation. PlayerCreationCallback Represents a callback for Player creation."
  },
  "api/NetAF.Logic.Configuration.ConsoleGameConfiguration.html": {
    "href": "api/NetAF.Logic.Configuration.ConsoleGameConfiguration.html",
    "title": "Class ConsoleGameConfiguration | NetAF",
    "keywords": "Class ConsoleGameConfiguration Represents a configuration for a console game. Inheritance object ConsoleGameConfiguration Implements IGameConfiguration Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Logic.Configuration Assembly: NetAF.dll Syntax public sealed class ConsoleGameConfiguration : IGameConfiguration Constructors | Edit this page View Source ConsoleGameConfiguration(Size, ExitMode, IIOAdapter) Represents a configuration for a console game. Declaration public ConsoleGameConfiguration(Size displaySize, ExitMode exitMode, IIOAdapter adapter) Parameters Type Name Description Size displaySize The display size. ExitMode exitMode The exit mode. IIOAdapter adapter The I/O adapter. Properties | Edit this page View Source Adapter Get the I/O adapter. Declaration public IIOAdapter Adapter { get; } Property Value Type Description IIOAdapter | Edit this page View Source Default Get the default game configuration. Declaration public static IGameConfiguration Default { get; } Property Value Type Description IGameConfiguration | Edit this page View Source DisplayCommandListInSceneFrames Get or set if the command list is displayed in scene frames. Declaration public bool DisplayCommandListInSceneFrames { get; set; } Property Value Type Description bool | Edit this page View Source DisplaySize Get the display size. Declaration public Size DisplaySize { get; } Property Value Type Description Size | Edit this page View Source ExitMode Get the exit mode. Declaration public ExitMode ExitMode { get; } Property Value Type Description ExitMode | Edit this page View Source FrameBuilders Get or set the collection of frame builders to use to render the game. Declaration public FrameBuilderCollection FrameBuilders { get; set; } Property Value Type Description FrameBuilderCollection | Edit this page View Source Interpreter Get or set the interpreter used for interpreting input. Declaration public IInterpreter Interpreter { get; set; } Property Value Type Description IInterpreter | Edit this page View Source SceneMapKeyType Get or set the type of key to use on the scene map. Declaration public KeyType SceneMapKeyType { get; set; } Property Value Type Description KeyType Implements IGameConfiguration"
  },
  "api/NetAF.Logic.Configuration.IGameConfiguration.html": {
    "href": "api/NetAF.Logic.Configuration.IGameConfiguration.html",
    "title": "Interface IGameConfiguration | NetAF",
    "keywords": "Interface IGameConfiguration Represents a configuration for a game. Namespace: NetAF.Logic.Configuration Assembly: NetAF.dll Syntax public interface IGameConfiguration Properties | Edit this page View Source Adapter Get the I/O adapter. Declaration IIOAdapter Adapter { get; } Property Value Type Description IIOAdapter | Edit this page View Source DisplayCommandListInSceneFrames Get or set if the command list is displayed in scene frames. Declaration bool DisplayCommandListInSceneFrames { get; set; } Property Value Type Description bool | Edit this page View Source DisplaySize Get the display size. Declaration Size DisplaySize { get; } Property Value Type Description Size | Edit this page View Source ExitMode Get the exit mode. Declaration ExitMode ExitMode { get; } Property Value Type Description ExitMode | Edit this page View Source FrameBuilders Get or set the collection of frame builders to use to render the game. Declaration FrameBuilderCollection FrameBuilders { get; set; } Property Value Type Description FrameBuilderCollection | Edit this page View Source Interpreter Get or set the interpreter used for interpreting input. Declaration IInterpreter Interpreter { get; set; } Property Value Type Description IInterpreter | Edit this page View Source SceneMapKeyType Get or set the type of key to use on the scene map. Declaration KeyType SceneMapKeyType { get; set; } Property Value Type Description KeyType"
  },
  "api/NetAF.Logic.Configuration.html": {
    "href": "api/NetAF.Logic.Configuration.html",
    "title": "Namespace NetAF.Logic.Configuration | NetAF",
    "keywords": "Namespace NetAF.Logic.Configuration Classes ConsoleGameConfiguration Represents a configuration for a console game. Interfaces IGameConfiguration Represents a configuration for a game."
  },
  "api/NetAF.Logic.EndCheck.html": {
    "href": "api/NetAF.Logic.EndCheck.html",
    "title": "Delegate EndCheck | NetAF",
    "keywords": "Delegate EndCheck Represents the callback used for end checks. Namespace: NetAF.Logic Assembly: NetAF.dll Syntax public delegate EndCheckResult EndCheck(Game game) Parameters Type Name Description Game game The game to check for end. Returns Type Description EndCheckResult Returns a result from the check."
  },
  "api/NetAF.Logic.EndCheckResult.html": {
    "href": "api/NetAF.Logic.EndCheckResult.html",
    "title": "Class EndCheckResult | NetAF",
    "keywords": "Class EndCheckResult Represents the result of an end check. Inheritance object EndCheckResult Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Logic Assembly: NetAF.dll Syntax public class EndCheckResult Constructors | Edit this page View Source EndCheckResult(bool, string, string) Represents the result of an end check. Declaration public EndCheckResult(bool hasEnded, string title, string description) Parameters Type Name Description bool hasEnded If the game has ended. string title A title to describe the end. string description A description of the end. Properties | Edit this page View Source Description Get a description of the end. Declaration public string Description { get; } Property Value Type Description string | Edit this page View Source HasEnded Get if the game has come to an end. Declaration public bool HasEnded { get; } Property Value Type Description bool | Edit this page View Source NotEnded Get a default result for not ended. Declaration public static EndCheckResult NotEnded { get; } Property Value Type Description EndCheckResult | Edit this page View Source Title Get a title to describe the end. Declaration public string Title { get; } Property Value Type Description string"
  },
  "api/NetAF.Logic.ExitMode.html": {
    "href": "api/NetAF.Logic.ExitMode.html",
    "title": "Enum ExitMode | NetAF",
    "keywords": "Enum ExitMode Enumeration of exit modes. Namespace: NetAF.Logic Assembly: NetAF.dll Syntax public enum ExitMode Fields Name Description ExitApplication Exit the application. ReturnToTitleScreen Return to the title screen."
  },
  "api/NetAF.Logic.Game.html": {
    "href": "api/NetAF.Logic.Game.html",
    "title": "Class Game | NetAF",
    "keywords": "Class Game Represents a game. Inheritance object Game Implements IRestoreFromObjectSerialization<GameSerialization> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Logic Assembly: NetAF.dll Syntax public sealed class Game : IRestoreFromObjectSerialization<GameSerialization> Properties | Edit this page View Source Catalog Get the catalog of assets for this game. Declaration public AssetCatalog Catalog { get; } Property Value Type Description AssetCatalog | Edit this page View Source Configuration Get the configuration. Declaration public IGameConfiguration Configuration { get; } Property Value Type Description IGameConfiguration | Edit this page View Source EndConditions Get the end conditions. Declaration public GameEndConditions EndConditions { get; } Property Value Type Description GameEndConditions | Edit this page View Source Info Get the info. Declaration public GameInfo Info { get; } Property Value Type Description GameInfo | Edit this page View Source Introduction Get the introduction. Declaration public string Introduction { get; } Property Value Type Description string | Edit this page View Source Mode Get the mode. Declaration public IGameMode Mode { get; } Property Value Type Description IGameMode | Edit this page View Source Overworld Get the overworld. Declaration public Overworld Overworld { get; } Property Value Type Description Overworld | Edit this page View Source Player Get the player. Declaration public PlayableCharacter Player { get; } Property Value Type Description PlayableCharacter Methods | Edit this page View Source ChangeMode(IGameMode) Change mode to a specified mode. Declaration public void ChangeMode(IGameMode mode) Parameters Type Name Description IGameMode mode The mode. | Edit this page View Source ChangePlayer(PlayableCharacter, bool) Change to a specified player. Declaration public void ChangePlayer(PlayableCharacter player, bool jumpToLastLocation = true) Parameters Type Name Description PlayableCharacter player The player to change to. bool jumpToLastLocation Jump to the last location, if it is known. Then true the player will be added at the last location, when false the current location will be used. By default this is true. | Edit this page View Source Create(GameInfo, string, AssetGenerator, GameEndConditions, IGameConfiguration, GameSetupCallback) Create a new callback for generating instances of a game. Declaration public static GameCreationCallback Create(GameInfo info, string introduction, AssetGenerator assetGenerator, GameEndConditions conditions, IGameConfiguration configuration, GameSetupCallback setup = null) Parameters Type Name Description GameInfo info Information about the game. string introduction An introduction to the game. AssetGenerator assetGenerator The generator to use to create game assets. GameEndConditions conditions The game conditions. IGameConfiguration configuration The configuration for the game. GameSetupCallback setup A setup function to run on the created game after it has been created. Returns Type Description GameCreationCallback A new GameCreationHelper that will create a GameCreator with the parameters specified. | Edit this page View Source End() End the game. Declaration public void End() | Edit this page View Source Execute(GameCreationCallback) Execute a game. Declaration public static void Execute(GameCreationCallback creator) Parameters Type Name Description GameCreationCallback creator The creator to use to create the game. | Edit this page View Source FindInteractionTarget(string) Find an interaction target within the current scope for this Game. Declaration public IInteractWithItem FindInteractionTarget(string name) Parameters Type Name Description string name The targets name. Returns Type Description IInteractWithItem The first IInteractWithItem object which has a name that matches the name parameter. | Edit this page View Source GetAllPlayerVisibleExaminables() Get all examinables that are currently visible to the player. Declaration public IExaminable[] GetAllPlayerVisibleExaminables() Returns Type Description IExaminable[] An array of all examinables that are currently visible to the player. | Edit this page View Source GetInactivePlayerLocations() Get an array of inactive player locations. Declaration public PlayableCharacterLocation[] GetInactivePlayerLocations() Returns Type Description PlayableCharacterLocation[] An array containing all locations of inactive platers. | Edit this page View Source RestoreFrom(GameSerialization) Restore this object from a serialization. Declaration public void RestoreFrom(GameSerialization serialization) Parameters Type Name Description GameSerialization serialization The serialization to restore from. Implements IRestoreFromObjectSerialization<T>"
  },
  "api/NetAF.Logic.GameEndConditions.html": {
    "href": "api/NetAF.Logic.GameEndConditions.html",
    "title": "Class GameEndConditions | NetAF",
    "keywords": "Class GameEndConditions Provides a container for game end conditions. Inheritance object GameEndConditions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Logic Assembly: NetAF.dll Syntax public sealed class GameEndConditions Constructors | Edit this page View Source GameEndConditions(EndCheck, EndCheck) Provides a container for game end conditions. Declaration public GameEndConditions(EndCheck completionCondition, EndCheck gameOverCondition) Parameters Type Name Description EndCheck completionCondition The condition that determines if the game was completed. EndCheck gameOverCondition The condition that determines if the game has ended. Properties | Edit this page View Source CompletionCondition Get the condition that determines if the game was completed. Declaration public EndCheck CompletionCondition { get; } Property Value Type Description EndCheck | Edit this page View Source GameOverCondition Get the condition that determines if the game has ended. Declaration public EndCheck GameOverCondition { get; } Property Value Type Description EndCheck | Edit this page View Source NoEnd Get a value for no end. Declaration public static GameEndConditions NoEnd { get; } Property Value Type Description GameEndConditions | Edit this page View Source NotEnded Get an end check that returns EndCheckResult.NotEnded. Declaration public static EndCheck NotEnded { get; } Property Value Type Description EndCheck"
  },
  "api/NetAF.Logic.GameInfo.html": {
    "href": "api/NetAF.Logic.GameInfo.html",
    "title": "Class GameInfo | NetAF",
    "keywords": "Class GameInfo Provides information about a game. Inheritance object GameInfo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Logic Assembly: NetAF.dll Syntax public sealed class GameInfo Constructors | Edit this page View Source GameInfo(string, string, string) Provides information about a game. Declaration public GameInfo(string name, string description, string author) Parameters Type Name Description string name The name of the game. string description A description of the game. string author A author of the game. Properties | Edit this page View Source Author Get the author. Declaration public string Author { get; set; } Property Value Type Description string | Edit this page View Source Description Get the description of the game. Declaration public string Description { get; } Property Value Type Description string | Edit this page View Source Name Get the name of the game. Declaration public string Name { get; } Property Value Type Description string"
  },
  "api/NetAF.Logic.GameState.html": {
    "href": "api/NetAF.Logic.GameState.html",
    "title": "Enum GameState | NetAF",
    "keywords": "Enum GameState Enumeration of game states. Namespace: NetAF.Logic Assembly: NetAF.dll Syntax public enum GameState Fields Name Description Active Active. Finished Finished. Finishing Finishing. NotStarted Not started."
  },
  "api/NetAF.Logic.Modes.AboutMode.html": {
    "href": "api/NetAF.Logic.Modes.AboutMode.html",
    "title": "Class AboutMode | NetAF",
    "keywords": "Class AboutMode Provides a display mode for about. Inheritance object AboutMode Implements IGameMode Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Logic.Modes Assembly: NetAF.dll Syntax public sealed class AboutMode : IGameMode Properties | Edit this page View Source Interpreter Get the interpreter. Declaration public IInterpreter Interpreter { get; } Property Value Type Description IInterpreter | Edit this page View Source Type Get the type of mode this provides. Declaration public GameModeType Type { get; } Property Value Type Description GameModeType Methods | Edit this page View Source Render(Game) Render the current state of a game. Declaration public void Render(Game game) Parameters Type Name Description Game game The game. Implements IGameMode"
  },
  "api/NetAF.Logic.Modes.CompletionMode.html": {
    "href": "api/NetAF.Logic.Modes.CompletionMode.html",
    "title": "Class CompletionMode | NetAF",
    "keywords": "Class CompletionMode Provides a display mode for completion. Inheritance object CompletionMode Implements IGameMode Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Logic.Modes Assembly: NetAF.dll Syntax public sealed class CompletionMode : IGameMode Constructors | Edit this page View Source CompletionMode(string, string) Provides a display mode for completion. Declaration public CompletionMode(string title, string message) Parameters Type Name Description string title The title. string message The message. Properties | Edit this page View Source Interpreter Get the interpreter. Declaration public IInterpreter Interpreter { get; } Property Value Type Description IInterpreter | Edit this page View Source Type Get the type of mode this provides. Declaration public GameModeType Type { get; } Property Value Type Description GameModeType Methods | Edit this page View Source Render(Game) Render the current state of a game. Declaration public void Render(Game game) Parameters Type Name Description Game game The game. Implements IGameMode"
  },
  "api/NetAF.Logic.Modes.ConversationMode.html": {
    "href": "api/NetAF.Logic.Modes.ConversationMode.html",
    "title": "Class ConversationMode | NetAF",
    "keywords": "Class ConversationMode Provides a display mode for conversation. Inheritance object ConversationMode Implements IGameMode Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Logic.Modes Assembly: NetAF.dll Syntax public sealed class ConversationMode : IGameMode Constructors | Edit this page View Source ConversationMode(IConverser) Initializes a new instance of the ConversationMode class. Declaration public ConversationMode(IConverser converser) Parameters Type Name Description IConverser converser The IConverser the conversation is being held with. Properties | Edit this page View Source Converser Get the converser. Declaration public IConverser Converser { get; } Property Value Type Description IConverser | Edit this page View Source Interpreter Get the interpreter. Declaration public IInterpreter Interpreter { get; } Property Value Type Description IInterpreter | Edit this page View Source Type Get the type of mode this provides. Declaration public GameModeType Type { get; } Property Value Type Description GameModeType Methods | Edit this page View Source Render(Game) Render the current state of a game. Declaration public void Render(Game game) Parameters Type Name Description Game game The game. Implements IGameMode"
  },
  "api/NetAF.Logic.Modes.GameModeType.html": {
    "href": "api/NetAF.Logic.Modes.GameModeType.html",
    "title": "Enum GameModeType | NetAF",
    "keywords": "Enum GameModeType Enumeration of game mode types. Namespace: NetAF.Logic.Modes Assembly: NetAF.dll Syntax public enum GameModeType Fields Name Description Information An information mode. Interactive An interactive mode."
  },
  "api/NetAF.Logic.Modes.GameOverMode.html": {
    "href": "api/NetAF.Logic.Modes.GameOverMode.html",
    "title": "Class GameOverMode | NetAF",
    "keywords": "Class GameOverMode Provides a display mode for game over. Inheritance object GameOverMode Implements IGameMode Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Logic.Modes Assembly: NetAF.dll Syntax public sealed class GameOverMode : IGameMode Constructors | Edit this page View Source GameOverMode(string, string) Provides a display mode for game over. Declaration public GameOverMode(string title, string message) Parameters Type Name Description string title The title. string message The message. Properties | Edit this page View Source Interpreter Get the interpreter. Declaration public IInterpreter Interpreter { get; } Property Value Type Description IInterpreter | Edit this page View Source Type Get the type of mode this provides. Declaration public GameModeType Type { get; } Property Value Type Description GameModeType Methods | Edit this page View Source Render(Game) Render the current state of a game. Declaration public void Render(Game game) Parameters Type Name Description Game game The game. Implements IGameMode"
  },
  "api/NetAF.Logic.Modes.HelpMode.html": {
    "href": "api/NetAF.Logic.Modes.HelpMode.html",
    "title": "Class HelpMode | NetAF",
    "keywords": "Class HelpMode Provides a display mode for help. Inheritance object HelpMode Implements IGameMode Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Logic.Modes Assembly: NetAF.dll Syntax public sealed class HelpMode : IGameMode Constructors | Edit this page View Source HelpMode(CommandHelp[]) Provides a display mode for help. Declaration public HelpMode(CommandHelp[] commands) Parameters Type Name Description CommandHelp[] commands The commands to display. Properties | Edit this page View Source Interpreter Get the interpreter. Declaration public IInterpreter Interpreter { get; } Property Value Type Description IInterpreter | Edit this page View Source Type Get the type of mode this provides. Declaration public GameModeType Type { get; } Property Value Type Description GameModeType Methods | Edit this page View Source Render(Game) Render the current state of a game. Declaration public void Render(Game game) Parameters Type Name Description Game game The game. Implements IGameMode"
  },
  "api/NetAF.Logic.Modes.IGameMode.html": {
    "href": "api/NetAF.Logic.Modes.IGameMode.html",
    "title": "Interface IGameMode | NetAF",
    "keywords": "Interface IGameMode Represents a mode for a game. Namespace: NetAF.Logic.Modes Assembly: NetAF.dll Syntax public interface IGameMode Properties | Edit this page View Source Interpreter Get the interpreter. Declaration IInterpreter Interpreter { get; } Property Value Type Description IInterpreter | Edit this page View Source Type Get the type of mode this provides. Declaration GameModeType Type { get; } Property Value Type Description GameModeType Methods | Edit this page View Source Render(Game) Render the current state of a game. Declaration void Render(Game game) Parameters Type Name Description Game game The game."
  },
  "api/NetAF.Logic.Modes.ReactionMode.html": {
    "href": "api/NetAF.Logic.Modes.ReactionMode.html",
    "title": "Class ReactionMode | NetAF",
    "keywords": "Class ReactionMode Provides a display mode for reaction. Inheritance object ReactionMode Implements IGameMode Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Logic.Modes Assembly: NetAF.dll Syntax public sealed class ReactionMode : IGameMode Constructors | Edit this page View Source ReactionMode(string, Reaction) Provides a display mode for reaction. Declaration public ReactionMode(string title, Reaction reaction) Parameters Type Name Description string title The title. Reaction reaction The reaction. Properties | Edit this page View Source Interpreter Get the interpreter. Declaration public IInterpreter Interpreter { get; } Property Value Type Description IInterpreter | Edit this page View Source Type Get the type of mode this provides. Declaration public GameModeType Type { get; } Property Value Type Description GameModeType Methods | Edit this page View Source Render(Game) Render the current state of a game. Declaration public void Render(Game game) Parameters Type Name Description Game game The game. Implements IGameMode"
  },
  "api/NetAF.Logic.Modes.RegionMapMode.html": {
    "href": "api/NetAF.Logic.Modes.RegionMapMode.html",
    "title": "Class RegionMapMode | NetAF",
    "keywords": "Class RegionMapMode Provides a display mode for region map. Inheritance object RegionMapMode Implements IGameMode Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Logic.Modes Assembly: NetAF.dll Syntax public sealed class RegionMapMode : IGameMode Constructors | Edit this page View Source RegionMapMode(Point3D) Provides a display mode for region map. Declaration public RegionMapMode(Point3D focusPosition) Parameters Type Name Description Point3D focusPosition The position to focus on. To use the player position use RegionMapMode.Player. Properties | Edit this page View Source FocusPosition Get or set the position to focus on. To use the player position use RegionMapMode.Player. Declaration public Point3D FocusPosition { get; set; } Property Value Type Description Point3D | Edit this page View Source Interpreter Get the interpreter. Declaration public IInterpreter Interpreter { get; } Property Value Type Description IInterpreter | Edit this page View Source Player Get the value to use to display the player level. Declaration public static Point3D Player { get; } Property Value Type Description Point3D | Edit this page View Source Type Get the type of mode this provides. Declaration public GameModeType Type { get; } Property Value Type Description GameModeType Methods | Edit this page View Source CanPanToPosition(Region, Point3D) Determine if a pan position is valid. Declaration public static bool CanPanToPosition(Region region, Point3D position) Parameters Type Name Description Region region The region. Point3D position The position. Returns Type Description bool True if the pan position is valid, else false. | Edit this page View Source Render(Game) Render the current state of a game. Declaration public void Render(Game game) Parameters Type Name Description Game game The game. Implements IGameMode"
  },
  "api/NetAF.Logic.Modes.SceneMode.html": {
    "href": "api/NetAF.Logic.Modes.SceneMode.html",
    "title": "Class SceneMode | NetAF",
    "keywords": "Class SceneMode Provides a display mode for a scene. Inheritance object SceneMode Implements IGameMode Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Logic.Modes Assembly: NetAF.dll Syntax public sealed class SceneMode : IGameMode Properties | Edit this page View Source Interpreter Get the interpreter. Declaration public IInterpreter Interpreter { get; } Property Value Type Description IInterpreter | Edit this page View Source Type Get the type of mode this provides. Declaration public GameModeType Type { get; } Property Value Type Description GameModeType Methods | Edit this page View Source Render(Game) Render the current state of a game. Declaration public void Render(Game game) Parameters Type Name Description Game game The game. Implements IGameMode"
  },
  "api/NetAF.Logic.Modes.TitleMode.html": {
    "href": "api/NetAF.Logic.Modes.TitleMode.html",
    "title": "Class TitleMode | NetAF",
    "keywords": "Class TitleMode Provides a display mode for title. Inheritance object TitleMode Implements IGameMode Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Logic.Modes Assembly: NetAF.dll Syntax public sealed class TitleMode : IGameMode Properties | Edit this page View Source Interpreter Get the interpreter. Declaration public IInterpreter Interpreter { get; } Property Value Type Description IInterpreter | Edit this page View Source Type Get the type of mode this provides. Declaration public GameModeType Type { get; } Property Value Type Description GameModeType Methods | Edit this page View Source Render(Game) Render the current state of a game. Declaration public void Render(Game game) Parameters Type Name Description Game game The game. Implements IGameMode"
  },
  "api/NetAF.Logic.Modes.html": {
    "href": "api/NetAF.Logic.Modes.html",
    "title": "Namespace NetAF.Logic.Modes | NetAF",
    "keywords": "Namespace NetAF.Logic.Modes Classes AboutMode Provides a display mode for about. CompletionMode Provides a display mode for completion. ConversationMode Provides a display mode for conversation. GameOverMode Provides a display mode for game over. HelpMode Provides a display mode for help. ReactionMode Provides a display mode for reaction. RegionMapMode Provides a display mode for region map. SceneMode Provides a display mode for a scene. TitleMode Provides a display mode for title. Interfaces IGameMode Represents a mode for a game. Enums GameModeType Enumeration of game mode types."
  },
  "api/NetAF.Logic.PlayableCharacterLocation.html": {
    "href": "api/NetAF.Logic.PlayableCharacterLocation.html",
    "title": "Class PlayableCharacterLocation | NetAF",
    "keywords": "Class PlayableCharacterLocation Provides a record of the location of a playable character. Inheritance object PlayableCharacterLocation Implements IRestoreFromObjectSerialization<PlayableCharacterLocationSerialization> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Logic Assembly: NetAF.dll Syntax public class PlayableCharacterLocation : IRestoreFromObjectSerialization<PlayableCharacterLocationSerialization> Constructors | Edit this page View Source PlayableCharacterLocation(string, string, string) Provides a record of the location of a playable character. Declaration public PlayableCharacterLocation(string playerIdentifier, string regionIdentifier, string roomIdentifier) Parameters Type Name Description string playerIdentifier The player identifier. string regionIdentifier The identifier for the region that the player is in. string roomIdentifier The identifier for the room that the player is in. Properties | Edit this page View Source PlayerIdentifier Get the player. Declaration public string PlayerIdentifier { get; } Property Value Type Description string | Edit this page View Source RegionIdentifier Get the identifier for the region that the player is in. Declaration public string RegionIdentifier { get; } Property Value Type Description string | Edit this page View Source RoomIdentifier Get the identifier for room that the player is in. Declaration public string RoomIdentifier { get; } Property Value Type Description string Methods | Edit this page View Source FromSerialization(PlayableCharacterLocationSerialization) Create a new instance of PlayableCharacterLocation from a serialization. Declaration public static PlayableCharacterLocation FromSerialization(PlayableCharacterLocationSerialization serialization) Parameters Type Name Description PlayableCharacterLocationSerialization serialization The serialization. Returns Type Description PlayableCharacterLocation The location. | Edit this page View Source RestoreFrom(PlayableCharacterLocationSerialization) Restore this object from a serialization. Declaration public void RestoreFrom(PlayableCharacterLocationSerialization serialization) Parameters Type Name Description PlayableCharacterLocationSerialization serialization The serialization to restore from. Implements IRestoreFromObjectSerialization<T>"
  },
  "api/NetAF.Logic.html": {
    "href": "api/NetAF.Logic.html",
    "title": "Namespace NetAF.Logic | NetAF",
    "keywords": "Namespace NetAF.Logic Classes AssetCatalog Provides a catalog of all assets in a game. AssetGenerator Represents a generator for game assets. EndCheckResult Represents the result of an end check. Game Represents a game. GameEndConditions Provides a container for game end conditions. GameInfo Provides information about a game. PlayableCharacterLocation Provides a record of the location of a playable character. Enums ExitMode Enumeration of exit modes. GameState Enumeration of game states. Delegates EndCheck Represents the callback used for end checks."
  },
  "api/NetAF.Persistence.Json.JsonSave.html": {
    "href": "api/NetAF.Persistence.Json.JsonSave.html",
    "title": "Class JsonSave | NetAF",
    "keywords": "Class JsonSave Provides persistence for a save in the Json format. Inheritance object JsonSave Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Persistence.Json Assembly: NetAF.dll Syntax public static class JsonSave Methods | Edit this page View Source FromFile(string, out RestorePoint, out string) Return a restore point from a file. Declaration public static bool FromFile(string path, out RestorePoint restorePoint, out string message) Parameters Type Name Description string path The file path. RestorePoint restorePoint The restore point. string message A message detailing the result of the load, if the load was unsuccessful. If the load was successful this will be empty. Returns Type Description bool True if the load was successful else false. | Edit this page View Source FromJson(string) Create a restore point from Json. Declaration public static RestorePoint FromJson(string json) Parameters Type Name Description string json The json. Returns Type Description RestorePoint The restore point created from the Json. | Edit this page View Source ToFile(string, RestorePoint, out string) Persist a restore point to a file. Declaration public static bool ToFile(string path, RestorePoint restorePoint, out string message) Parameters Type Name Description string path The file path. RestorePoint restorePoint The restore point to persist. string message A message detailing the result of the save, if the save was unsuccessful. If the save was successful this will be empty. Returns Type Description bool True if the save was successful else false. | Edit this page View Source ToJson(RestorePoint) Convert a restore point to Json. Declaration public static string ToJson(RestorePoint restorePoint) Parameters Type Name Description RestorePoint restorePoint The restore point. Returns Type Description string The Json reatore point."
  },
  "api/NetAF.Persistence.Json.html": {
    "href": "api/NetAF.Persistence.Json.html",
    "title": "Namespace NetAF.Persistence.Json | NetAF",
    "keywords": "Namespace NetAF.Persistence.Json Classes JsonSave Provides persistence for a save in the Json format."
  },
  "api/NetAF.Persistence.RestorePoint.html": {
    "href": "api/NetAF.Persistence.RestorePoint.html",
    "title": "Class RestorePoint | NetAF",
    "keywords": "Class RestorePoint Represents a restore point for a Game. Inheritance object RestorePoint Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Persistence Assembly: NetAF.dll Syntax public class RestorePoint Properties | Edit this page View Source CreationTime Get or set the creation time of this save. Declaration public DateTime CreationTime { get; set; } Property Value Type Description DateTime | Edit this page View Source Game Get or set the serialized game. Declaration public GameSerialization Game { get; set; } Property Value Type Description GameSerialization | Edit this page View Source Name Get or set the name of this save. Declaration public string Name { get; set; } Property Value Type Description string Methods | Edit this page View Source Create(string, Game) Create a new restore point. Declaration public static RestorePoint Create(string name, Game game) Parameters Type Name Description string name The name of the restore point. Game game The game to create the restore point for. Returns Type Description RestorePoint The restore point."
  },
  "api/NetAF.Persistence.html": {
    "href": "api/NetAF.Persistence.html",
    "title": "Namespace NetAF.Persistence | NetAF",
    "keywords": "Namespace NetAF.Persistence Classes RestorePoint Represents a restore point for a Game."
  },
  "api/NetAF.Rendering.FrameBuilders.Console.AnsiColor.html": {
    "href": "api/NetAF.Rendering.FrameBuilders.Console.AnsiColor.html",
    "title": "Enum AnsiColor | NetAF",
    "keywords": "Enum AnsiColor Enumeration of ANSI colors. Namespace: NetAF.Rendering.FrameBuilders.Console Assembly: NetAF.dll Syntax public enum AnsiColor Fields Name Description Black Black (30). Blue Blue (34). BrightBlack Bright black (90). BrightBlue Bright blue (94). BrightCyan Bright cyan (96). BrightGreen Bright green (92). BrightMagenta Bright magenta (95). BrightRed Bright red (91). BrightWhite Bright white (97). BrightYellow Bright yellow (93). Cyan Cyan (36). Green Green (32). Magenta Magenta (35). Red Red (31). Reset Reset (0). White White (37). Yellow Yellow (33)."
  },
  "api/NetAF.Rendering.FrameBuilders.Console.ConsoleAboutFrameBuilder.html": {
    "href": "api/NetAF.Rendering.FrameBuilders.Console.ConsoleAboutFrameBuilder.html",
    "title": "Class ConsoleAboutFrameBuilder | NetAF",
    "keywords": "Class ConsoleAboutFrameBuilder Provides a builder of console about frames. Inheritance object ConsoleAboutFrameBuilder Implements IAboutFrameBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Rendering.FrameBuilders.Console Assembly: NetAF.dll Syntax public sealed class ConsoleAboutFrameBuilder : IAboutFrameBuilder Constructors | Edit this page View Source ConsoleAboutFrameBuilder(GridStringBuilder) Provides a builder of console about frames. Declaration public ConsoleAboutFrameBuilder(GridStringBuilder gridStringBuilder) Parameters Type Name Description GridStringBuilder gridStringBuilder A builder to use for the string layout. Properties | Edit this page View Source AuthorColor Get or set the author color. Declaration public AnsiColor AuthorColor { get; set; } Property Value Type Description AnsiColor | Edit this page View Source BackgroundColor Get or set the background color. Declaration public AnsiColor BackgroundColor { get; set; } Property Value Type Description AnsiColor | Edit this page View Source BorderColor Get or set the border color. Declaration public AnsiColor BorderColor { get; set; } Property Value Type Description AnsiColor | Edit this page View Source DescriptionColor Get or set the description color. Declaration public AnsiColor DescriptionColor { get; set; } Property Value Type Description AnsiColor | Edit this page View Source NameColor Get or set the name color. Declaration public AnsiColor NameColor { get; set; } Property Value Type Description AnsiColor | Edit this page View Source TitleColor Get or set the title color. Declaration public AnsiColor TitleColor { get; set; } Property Value Type Description AnsiColor Methods | Edit this page View Source Build(string, Game, Size) Build a frame. Declaration public IFrame Build(string title, Game game, Size size) Parameters Type Name Description string title The title. Game game The game. Size size The size of the frame. Returns Type Description IFrame Implements IAboutFrameBuilder"
  },
  "api/NetAF.Rendering.FrameBuilders.Console.ConsoleCompletionFrameBuilder.html": {
    "href": "api/NetAF.Rendering.FrameBuilders.Console.ConsoleCompletionFrameBuilder.html",
    "title": "Class ConsoleCompletionFrameBuilder | NetAF",
    "keywords": "Class ConsoleCompletionFrameBuilder Provides a builder of completion frames. Inheritance object ConsoleCompletionFrameBuilder Implements ICompletionFrameBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Rendering.FrameBuilders.Console Assembly: NetAF.dll Syntax public sealed class ConsoleCompletionFrameBuilder : ICompletionFrameBuilder Constructors | Edit this page View Source ConsoleCompletionFrameBuilder(GridStringBuilder) Provides a builder of completion frames. Declaration public ConsoleCompletionFrameBuilder(GridStringBuilder gridStringBuilder) Parameters Type Name Description GridStringBuilder gridStringBuilder A builder to use for the string layout. Properties | Edit this page View Source BackgroundColor Get or set the background color. Declaration public AnsiColor BackgroundColor { get; set; } Property Value Type Description AnsiColor | Edit this page View Source BorderColor Get or set the border color. Declaration public AnsiColor BorderColor { get; set; } Property Value Type Description AnsiColor | Edit this page View Source DescriptionColor Get or set the description color. Declaration public AnsiColor DescriptionColor { get; set; } Property Value Type Description AnsiColor | Edit this page View Source TitleColor Get or set the title color. Declaration public AnsiColor TitleColor { get; set; } Property Value Type Description AnsiColor Methods | Edit this page View Source Build(string, string, Size) Build a frame. Declaration public IFrame Build(string message, string reason, Size size) Parameters Type Name Description string message The message to display to the user. string reason The reason the game ended. Size size The size of the frame. Returns Type Description IFrame Implements ICompletionFrameBuilder"
  },
  "api/NetAF.Rendering.FrameBuilders.Console.ConsoleConversationFrameBuilder.html": {
    "href": "api/NetAF.Rendering.FrameBuilders.Console.ConsoleConversationFrameBuilder.html",
    "title": "Class ConsoleConversationFrameBuilder | NetAF",
    "keywords": "Class ConsoleConversationFrameBuilder Provides a builder of conversation frames. Inheritance object ConsoleConversationFrameBuilder Implements IConversationFrameBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Rendering.FrameBuilders.Console Assembly: NetAF.dll Syntax public sealed class ConsoleConversationFrameBuilder : IConversationFrameBuilder Constructors | Edit this page View Source ConsoleConversationFrameBuilder(GridStringBuilder) Provides a builder of conversation frames. Declaration public ConsoleConversationFrameBuilder(GridStringBuilder gridStringBuilder) Parameters Type Name Description GridStringBuilder gridStringBuilder A builder to use for the string layout. Properties | Edit this page View Source BackgroundColor Get or set the background color. Declaration public AnsiColor BackgroundColor { get; set; } Property Value Type Description AnsiColor | Edit this page View Source BorderColor Get or set the border color. Declaration public AnsiColor BorderColor { get; set; } Property Value Type Description AnsiColor | Edit this page View Source CommandTitle Get or set the command title. Declaration public string CommandTitle { get; set; } Property Value Type Description string | Edit this page View Source InputColor Get or set the input color. Declaration public AnsiColor InputColor { get; set; } Property Value Type Description AnsiColor | Edit this page View Source NonPlayerMessageColor Get or set the player message color. Declaration public AnsiColor NonPlayerMessageColor { get; set; } Property Value Type Description AnsiColor | Edit this page View Source PlayerMessageColor Get or set the player message color. Declaration public AnsiColor PlayerMessageColor { get; set; } Property Value Type Description AnsiColor | Edit this page View Source ResponseColor Get or set the response color. Declaration public AnsiColor ResponseColor { get; set; } Property Value Type Description AnsiColor | Edit this page View Source TitleColor Get or set the title color. Declaration public AnsiColor TitleColor { get; set; } Property Value Type Description AnsiColor Methods | Edit this page View Source Build(string, IConverser, CommandHelp[], Size) Build a frame. Declaration public IFrame Build(string title, IConverser converser, CommandHelp[] contextualCommands, Size size) Parameters Type Name Description string title The title to display to the user. IConverser converser The converser. CommandHelp[] contextualCommands The contextual commands to display. Size size The size of the frame. Returns Type Description IFrame Implements IConversationFrameBuilder"
  },
  "api/NetAF.Rendering.FrameBuilders.Console.ConsoleGameOverFrameBuilder.html": {
    "href": "api/NetAF.Rendering.FrameBuilders.Console.ConsoleGameOverFrameBuilder.html",
    "title": "Class ConsoleGameOverFrameBuilder | NetAF",
    "keywords": "Class ConsoleGameOverFrameBuilder Provides a builder of game over frames. Inheritance object ConsoleGameOverFrameBuilder Implements IGameOverFrameBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Rendering.FrameBuilders.Console Assembly: NetAF.dll Syntax public sealed class ConsoleGameOverFrameBuilder : IGameOverFrameBuilder Constructors | Edit this page View Source ConsoleGameOverFrameBuilder(GridStringBuilder) Provides a builder of game over frames. Declaration public ConsoleGameOverFrameBuilder(GridStringBuilder gridStringBuilder) Parameters Type Name Description GridStringBuilder gridStringBuilder A builder to use for the string layout. Properties | Edit this page View Source BackgroundColor Get or set the background color. Declaration public AnsiColor BackgroundColor { get; set; } Property Value Type Description AnsiColor | Edit this page View Source BorderColor Get or set the border color. Declaration public AnsiColor BorderColor { get; set; } Property Value Type Description AnsiColor | Edit this page View Source DescriptionColor Get or set the description color. Declaration public AnsiColor DescriptionColor { get; set; } Property Value Type Description AnsiColor | Edit this page View Source TitleColor Get or set the title color. Declaration public AnsiColor TitleColor { get; set; } Property Value Type Description AnsiColor Methods | Edit this page View Source Build(string, string, Size) Build a frame. Declaration public IFrame Build(string message, string reason, Size size) Parameters Type Name Description string message The message to display to the user. string reason The reason the game ended. Size size The size of the frame. Returns Type Description IFrame Implements IGameOverFrameBuilder"
  },
  "api/NetAF.Rendering.FrameBuilders.Console.ConsoleHelpFrameBuilder.html": {
    "href": "api/NetAF.Rendering.FrameBuilders.Console.ConsoleHelpFrameBuilder.html",
    "title": "Class ConsoleHelpFrameBuilder | NetAF",
    "keywords": "Class ConsoleHelpFrameBuilder Provides a builder of help frames. Inheritance object ConsoleHelpFrameBuilder Implements IHelpFrameBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Rendering.FrameBuilders.Console Assembly: NetAF.dll Syntax public sealed class ConsoleHelpFrameBuilder : IHelpFrameBuilder Constructors | Edit this page View Source ConsoleHelpFrameBuilder(GridStringBuilder) Provides a builder of help frames. Declaration public ConsoleHelpFrameBuilder(GridStringBuilder gridStringBuilder) Parameters Type Name Description GridStringBuilder gridStringBuilder A builder to use for the string layout. Properties | Edit this page View Source BackgroundColor Get or set the background color. Declaration public AnsiColor BackgroundColor { get; set; } Property Value Type Description AnsiColor | Edit this page View Source BorderColor Get or set the border color. Declaration public AnsiColor BorderColor { get; set; } Property Value Type Description AnsiColor | Edit this page View Source CommandColor Get or set the command color. Declaration public AnsiColor CommandColor { get; set; } Property Value Type Description AnsiColor | Edit this page View Source CommandDescriptionColor Get or set the description color. Declaration public AnsiColor CommandDescriptionColor { get; set; } Property Value Type Description AnsiColor | Edit this page View Source DescriptionColor Get or set the description color. Declaration public AnsiColor DescriptionColor { get; set; } Property Value Type Description AnsiColor | Edit this page View Source TitleColor Get or set the title color. Declaration public AnsiColor TitleColor { get; set; } Property Value Type Description AnsiColor Methods | Edit this page View Source Build(string, string, CommandHelp[], Size) Build a frame. Declaration public IFrame Build(string title, string description, CommandHelp[] commandHelp, Size size) Parameters Type Name Description string title The title. string description The description. CommandHelp[] commandHelp The command help. Size size The size of the frame. Returns Type Description IFrame Implements IHelpFrameBuilder"
  },
  "api/NetAF.Rendering.FrameBuilders.Console.ConsoleReactionFrameBuilder.html": {
    "href": "api/NetAF.Rendering.FrameBuilders.Console.ConsoleReactionFrameBuilder.html",
    "title": "Class ConsoleReactionFrameBuilder | NetAF",
    "keywords": "Class ConsoleReactionFrameBuilder Provides a builder of reaction frames. Inheritance object ConsoleReactionFrameBuilder Implements IReactionFrameBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Rendering.FrameBuilders.Console Assembly: NetAF.dll Syntax public sealed class ConsoleReactionFrameBuilder : IReactionFrameBuilder Constructors | Edit this page View Source ConsoleReactionFrameBuilder(GridStringBuilder) Provides a builder of reaction frames. Declaration public ConsoleReactionFrameBuilder(GridStringBuilder gridStringBuilder) Parameters Type Name Description GridStringBuilder gridStringBuilder A builder to use for the string layout. Properties | Edit this page View Source BackgroundColor Get or set the background color. Declaration public AnsiColor BackgroundColor { get; set; } Property Value Type Description AnsiColor | Edit this page View Source BorderColor Get or set the border color. Declaration public AnsiColor BorderColor { get; set; } Property Value Type Description AnsiColor | Edit this page View Source ErrorMessageColor Get or set the error message color. Declaration public AnsiColor ErrorMessageColor { get; set; } Property Value Type Description AnsiColor | Edit this page View Source MessageColor Get or set the message color. Declaration public AnsiColor MessageColor { get; set; } Property Value Type Description AnsiColor | Edit this page View Source TitleColor Get or set the title color. Declaration public AnsiColor TitleColor { get; set; } Property Value Type Description AnsiColor Methods | Edit this page View Source Build(string, string, bool, Size) Build a frame. Declaration public IFrame Build(string title, string message, bool isError, Size size) Parameters Type Name Description string title The title to display to the user. string message The message to display to the user. bool isError If the message is an error. Size size The size of the frame. Returns Type Description IFrame Implements IReactionFrameBuilder"
  },
  "api/NetAF.Rendering.FrameBuilders.Console.ConsoleRegionMapBuilder.html": {
    "href": "api/NetAF.Rendering.FrameBuilders.Console.ConsoleRegionMapBuilder.html",
    "title": "Class ConsoleRegionMapBuilder | NetAF",
    "keywords": "Class ConsoleRegionMapBuilder Provides a builder for region maps. Inheritance object ConsoleRegionMapBuilder Implements IRegionMapBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Rendering.FrameBuilders.Console Assembly: NetAF.dll Syntax public sealed class ConsoleRegionMapBuilder : IRegionMapBuilder Constructors | Edit this page View Source ConsoleRegionMapBuilder(GridStringBuilder) Provides a builder for region maps. Declaration public ConsoleRegionMapBuilder(GridStringBuilder gridStringBuilder) Parameters Type Name Description GridStringBuilder gridStringBuilder The grid string builder. Properties | Edit this page View Source CurrentFloorIndicator Get or set the character to use for the current floor. Declaration public char CurrentFloorIndicator { get; set; } Property Value Type Description char | Edit this page View Source EmptySpace Get or set the character used for representing an empty space. Declaration public char EmptySpace { get; set; } Property Value Type Description char | Edit this page View Source FocusedBoundaryColor Get or set the focused room boundary color. Declaration public AnsiColor FocusedBoundaryColor { get; set; } Property Value Type Description AnsiColor | Edit this page View Source HorizontalBoundary Get or set the character to use for horizontal boundaries. Declaration public char HorizontalBoundary { get; set; } Property Value Type Description char | Edit this page View Source LockedExit Get or set the character used for representing a locked exit. Declaration public char LockedExit { get; set; } Property Value Type Description char | Edit this page View Source LockedExitColor Get or set the locked exit color. Declaration public AnsiColor LockedExitColor { get; set; } Property Value Type Description AnsiColor | Edit this page View Source LowerLevel Get or set the character to use for lower levels. Declaration public char LowerLevel { get; set; } Property Value Type Description char | Edit this page View Source LowerLevelColor Get or set the lower level color. Declaration public AnsiColor LowerLevelColor { get; set; } Property Value Type Description AnsiColor | Edit this page View Source Player Get or set the character to use for indicating the player. Declaration public char Player { get; set; } Property Value Type Description char | Edit this page View Source PlayerColor Get or set the player color. Declaration public AnsiColor PlayerColor { get; set; } Property Value Type Description AnsiColor | Edit this page View Source ShowLowerFloors Get or set if lower floors should be shown. Declaration public bool ShowLowerFloors { get; set; } Property Value Type Description bool | Edit this page View Source UnLockedExit Get or set the character used for representing an unlocked exit. Declaration public char UnLockedExit { get; set; } Property Value Type Description char | Edit this page View Source UnvisitedBoundaryColor Get or set the unvisited room boundary color. Declaration public AnsiColor UnvisitedBoundaryColor { get; set; } Property Value Type Description AnsiColor | Edit this page View Source VerticalBoundary Get or set the character to use for vertical boundaries. Declaration public char VerticalBoundary { get; set; } Property Value Type Description char | Edit this page View Source VisitedBoundaryColor Get or set the visited room boundary color. Declaration public AnsiColor VisitedBoundaryColor { get; set; } Property Value Type Description AnsiColor Methods | Edit this page View Source BuildRegionMap(Region, Point2D, Point3D, Size) Build a map of a region. Declaration public void BuildRegionMap(Region region, Point2D startPosition, Point3D focusPosition, Size maxSize) Parameters Type Name Description Region region The region. Point2D startPosition The position to start building at. Point3D focusPosition The position to focus on. Size maxSize The maximum size available in which to build the map. Implements IRegionMapBuilder"
  },
  "api/NetAF.Rendering.FrameBuilders.Console.ConsoleRegionMapFrameBuilder.html": {
    "href": "api/NetAF.Rendering.FrameBuilders.Console.ConsoleRegionMapFrameBuilder.html",
    "title": "Class ConsoleRegionMapFrameBuilder | NetAF",
    "keywords": "Class ConsoleRegionMapFrameBuilder Provides a builder of region map frames. Inheritance object ConsoleRegionMapFrameBuilder Implements IRegionMapFrameBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Rendering.FrameBuilders.Console Assembly: NetAF.dll Syntax public sealed class ConsoleRegionMapFrameBuilder : IRegionMapFrameBuilder Constructors | Edit this page View Source ConsoleRegionMapFrameBuilder(GridStringBuilder, IRegionMapBuilder) Provides a builder of region map frames. Declaration public ConsoleRegionMapFrameBuilder(GridStringBuilder gridStringBuilder, IRegionMapBuilder regionMapBuilder) Parameters Type Name Description GridStringBuilder gridStringBuilder A builder to use for the string layout. IRegionMapBuilder regionMapBuilder A builder for region maps. Properties | Edit this page View Source BackgroundColor Get or set the background color. Declaration public AnsiColor BackgroundColor { get; set; } Property Value Type Description AnsiColor | Edit this page View Source BorderColor Get or set the border color. Declaration public AnsiColor BorderColor { get; set; } Property Value Type Description AnsiColor | Edit this page View Source CommandTitle Get or set the command title. Declaration public string CommandTitle { get; set; } Property Value Type Description string | Edit this page View Source CommandsColor Get or set the commands color. Declaration public AnsiColor CommandsColor { get; set; } Property Value Type Description AnsiColor | Edit this page View Source InputColor Get or set the input color. Declaration public AnsiColor InputColor { get; set; } Property Value Type Description AnsiColor | Edit this page View Source TitleColor Get or set the title color. Declaration public AnsiColor TitleColor { get; set; } Property Value Type Description AnsiColor Methods | Edit this page View Source Build(Region, Point3D, CommandHelp[], Size) Build a frame. Declaration public IFrame Build(Region region, Point3D focusPosition, CommandHelp[] contextualCommands, Size size) Parameters Type Name Description Region region The region. Point3D focusPosition The position to focus on. CommandHelp[] contextualCommands The contextual commands to display. Size size The size of the frame. Returns Type Description IFrame Implements IRegionMapFrameBuilder"
  },
  "api/NetAF.Rendering.FrameBuilders.Console.ConsoleRoomMapBuilder.html": {
    "href": "api/NetAF.Rendering.FrameBuilders.Console.ConsoleRoomMapBuilder.html",
    "title": "Class ConsoleRoomMapBuilder | NetAF",
    "keywords": "Class ConsoleRoomMapBuilder Provides a room map builder. Inheritance object ConsoleRoomMapBuilder Implements IRoomMapBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Rendering.FrameBuilders.Console Assembly: NetAF.dll Syntax public sealed class ConsoleRoomMapBuilder : IRoomMapBuilder Constructors | Edit this page View Source ConsoleRoomMapBuilder(GridStringBuilder) Provides a room map builder. Declaration public ConsoleRoomMapBuilder(GridStringBuilder gridStringBuilder) Parameters Type Name Description GridStringBuilder gridStringBuilder The grid string builder. Properties | Edit this page View Source BoundaryColor Get or set the room boundary color. Declaration public AnsiColor BoundaryColor { get; set; } Property Value Type Description AnsiColor | Edit this page View Source Corner Get or set the character to use for corners. Declaration public char Corner { get; set; } Property Value Type Description char | Edit this page View Source HorizontalBoundary Get or set the character to use for horizontal boundaries. Declaration public char HorizontalBoundary { get; set; } Property Value Type Description char | Edit this page View Source HorizontalExitBorder Get or set the character to use for horizontal exit borders. Declaration public char HorizontalExitBorder { get; set; } Property Value Type Description char | Edit this page View Source ItemOrCharacterColor Get or set the item or character color. Declaration public AnsiColor ItemOrCharacterColor { get; set; } Property Value Type Description AnsiColor | Edit this page View Source ItemOrCharacterInRoom Get or set the character used for representing there is an item or a character in the room. Declaration public char ItemOrCharacterInRoom { get; set; } Property Value Type Description char | Edit this page View Source KeyPadding Get or set the padding between the key and the map. Declaration public int KeyPadding { get; set; } Property Value Type Description int | Edit this page View Source LockedExit Get or set the character used for representing a locked exit. Declaration public char LockedExit { get; set; } Property Value Type Description char | Edit this page View Source LockedExitColor Get or set the locked exit color. Declaration public AnsiColor LockedExitColor { get; set; } Property Value Type Description AnsiColor | Edit this page View Source UnvisitedExitColor Get or set the unvisited exit color. Declaration public AnsiColor UnvisitedExitColor { get; set; } Property Value Type Description AnsiColor | Edit this page View Source VerticalBoundary Get or set the character to use for vertical boundaries. Declaration public char VerticalBoundary { get; set; } Property Value Type Description char | Edit this page View Source VerticalExitBorder Get or set the character to use for vertical exit borders. Declaration public char VerticalExitBorder { get; set; } Property Value Type Description char | Edit this page View Source VisitedExitColor Get or set the visited exit color. Declaration public AnsiColor VisitedExitColor { get; set; } Property Value Type Description AnsiColor Methods | Edit this page View Source BuildRoomMap(Room, ViewPoint, KeyType, Point2D, out int, out int) Build a map for a room. Declaration public void BuildRoomMap(Room room, ViewPoint viewPoint, KeyType key, Point2D startPosition, out int endX, out int endY) Parameters Type Name Description Room room The room. ViewPoint viewPoint The viewpoint from the room. KeyType key The key type. Point2D startPosition The start position. int endX The end position, x. int endY The end position, x. Implements IRoomMapBuilder"
  },
  "api/NetAF.Rendering.FrameBuilders.Console.ConsoleSceneFrameBuilder.html": {
    "href": "api/NetAF.Rendering.FrameBuilders.Console.ConsoleSceneFrameBuilder.html",
    "title": "Class ConsoleSceneFrameBuilder | NetAF",
    "keywords": "Class ConsoleSceneFrameBuilder Provides a builder for scene frames. Inheritance object ConsoleSceneFrameBuilder Implements ISceneFrameBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Rendering.FrameBuilders.Console Assembly: NetAF.dll Syntax public sealed class ConsoleSceneFrameBuilder : ISceneFrameBuilder Constructors | Edit this page View Source ConsoleSceneFrameBuilder(GridStringBuilder, IRoomMapBuilder) Provides a builder for scene frames. Declaration public ConsoleSceneFrameBuilder(GridStringBuilder gridStringBuilder, IRoomMapBuilder roomMapBuilder) Parameters Type Name Description GridStringBuilder gridStringBuilder A builder to use for the string layout. IRoomMapBuilder roomMapBuilder A builder to use for room maps. Properties | Edit this page View Source BackgroundColor Get or set the background color. Declaration public AnsiColor BackgroundColor { get; set; } Property Value Type Description AnsiColor | Edit this page View Source BorderColor Get or set the border color. Declaration public AnsiColor BorderColor { get; set; } Property Value Type Description AnsiColor | Edit this page View Source CommandTitle Get or set the command title. Declaration public string CommandTitle { get; set; } Property Value Type Description string | Edit this page View Source CommandsColor Get or set the commands color. Declaration public AnsiColor CommandsColor { get; set; } Property Value Type Description AnsiColor | Edit this page View Source DisplayMessagesInIsolation Get or set if messages should be displayed in isolation. Declaration public bool DisplayMessagesInIsolation { get; set; } Property Value Type Description bool | Edit this page View Source InputColor Get or set the input color. Declaration public AnsiColor InputColor { get; set; } Property Value Type Description AnsiColor | Edit this page View Source TextColor Get or set the text color. Declaration public AnsiColor TextColor { get; set; } Property Value Type Description AnsiColor Methods | Edit this page View Source Build(Room, ViewPoint, PlayableCharacter, CommandHelp[], KeyType, Size) Build a frame. Declaration public IFrame Build(Room room, ViewPoint viewPoint, PlayableCharacter player, CommandHelp[] contextualCommands, KeyType keyType, Size size) Parameters Type Name Description Room room Specify the Room. ViewPoint viewPoint Specify the viewpoint from the room. PlayableCharacter player Specify the player. CommandHelp[] contextualCommands The contextual commands to display. KeyType keyType The type of key to use. Size size The size of the frame. Returns Type Description IFrame Implements ISceneFrameBuilder"
  },
  "api/NetAF.Rendering.FrameBuilders.Console.ConsoleTitleFrameBuilder.html": {
    "href": "api/NetAF.Rendering.FrameBuilders.Console.ConsoleTitleFrameBuilder.html",
    "title": "Class ConsoleTitleFrameBuilder | NetAF",
    "keywords": "Class ConsoleTitleFrameBuilder Provides a builder of title frames. Inheritance object ConsoleTitleFrameBuilder Implements ITitleFrameBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Rendering.FrameBuilders.Console Assembly: NetAF.dll Syntax public sealed class ConsoleTitleFrameBuilder : ITitleFrameBuilder Constructors | Edit this page View Source ConsoleTitleFrameBuilder(GridStringBuilder) Provides a builder of title frames. Declaration public ConsoleTitleFrameBuilder(GridStringBuilder gridStringBuilder) Parameters Type Name Description GridStringBuilder gridStringBuilder A builder to use for the string layout. Properties | Edit this page View Source BackgroundColor Get or set the background color. Declaration public AnsiColor BackgroundColor { get; set; } Property Value Type Description AnsiColor | Edit this page View Source BorderColor Get or set the border color. Declaration public AnsiColor BorderColor { get; set; } Property Value Type Description AnsiColor | Edit this page View Source DescriptionColor Get or set the description color. Declaration public AnsiColor DescriptionColor { get; set; } Property Value Type Description AnsiColor | Edit this page View Source TitleColor Get or set the title color. Declaration public AnsiColor TitleColor { get; set; } Property Value Type Description AnsiColor Methods | Edit this page View Source Build(string, string, Size) Build a frame. Declaration public IFrame Build(string title, string description, Size size) Parameters Type Name Description string title The title. string description The description. Size size The size of the frame. Returns Type Description IFrame Implements ITitleFrameBuilder"
  },
  "api/NetAF.Rendering.FrameBuilders.Console.html": {
    "href": "api/NetAF.Rendering.FrameBuilders.Console.html",
    "title": "Namespace NetAF.Rendering.FrameBuilders.Console | NetAF",
    "keywords": "Namespace NetAF.Rendering.FrameBuilders.Console Classes ConsoleAboutFrameBuilder Provides a builder of console about frames. ConsoleCompletionFrameBuilder Provides a builder of completion frames. ConsoleConversationFrameBuilder Provides a builder of conversation frames. ConsoleGameOverFrameBuilder Provides a builder of game over frames. ConsoleHelpFrameBuilder Provides a builder of help frames. ConsoleReactionFrameBuilder Provides a builder of reaction frames. ConsoleRegionMapBuilder Provides a builder for region maps. ConsoleRegionMapFrameBuilder Provides a builder of region map frames. ConsoleRoomMapBuilder Provides a room map builder. ConsoleSceneFrameBuilder Provides a builder for scene frames. ConsoleTitleFrameBuilder Provides a builder of title frames. Enums AnsiColor Enumeration of ANSI colors."
  },
  "api/NetAF.Rendering.FrameBuilders.FrameBuilderCollection.html": {
    "href": "api/NetAF.Rendering.FrameBuilders.FrameBuilderCollection.html",
    "title": "Class FrameBuilderCollection | NetAF",
    "keywords": "Class FrameBuilderCollection Provides a collection of all of the frame builders required to run a game. Inheritance object FrameBuilderCollection Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Rendering.FrameBuilders Assembly: NetAF.dll Syntax public class FrameBuilderCollection Constructors | Edit this page View Source FrameBuilderCollection(ITitleFrameBuilder, ISceneFrameBuilder, IRegionMapFrameBuilder, IHelpFrameBuilder, ICompletionFrameBuilder, IGameOverFrameBuilder, IAboutFrameBuilder, IReactionFrameBuilder, IConversationFrameBuilder) Provides a collection of all of the frame builders required to run a game. Declaration public FrameBuilderCollection(ITitleFrameBuilder titleFrameBuilder, ISceneFrameBuilder sceneFrameBuilder, IRegionMapFrameBuilder regionMapFrameBuilder, IHelpFrameBuilder helpFrameBuilder, ICompletionFrameBuilder completionFrameBuilder, IGameOverFrameBuilder gameOverFrameBuilder, IAboutFrameBuilder aboutFrameBuilder, IReactionFrameBuilder reactionFrameBuilder, IConversationFrameBuilder conversationFrameBuilder) Parameters Type Name Description ITitleFrameBuilder titleFrameBuilder The builder to use for building title frames. ISceneFrameBuilder sceneFrameBuilder The builder to use for building scene frames. IRegionMapFrameBuilder regionMapFrameBuilder The builder to use for building region map frames. IHelpFrameBuilder helpFrameBuilder The builder to use for building help frames. ICompletionFrameBuilder completionFrameBuilder The builder to use for building completion frames. IGameOverFrameBuilder gameOverFrameBuilder The builder to use for building game over frames. IAboutFrameBuilder aboutFrameBuilder The builder to use for building about frames. IReactionFrameBuilder reactionFrameBuilder The builder to use for building reaction frames. IConversationFrameBuilder conversationFrameBuilder The builder to use for building conversation frames. Properties | Edit this page View Source AboutFrameBuilder Get the builder to use for about frames. Declaration public IAboutFrameBuilder AboutFrameBuilder { get; } Property Value Type Description IAboutFrameBuilder | Edit this page View Source CompletionFrameBuilder Get the builder to use for completion frames. Declaration public ICompletionFrameBuilder CompletionFrameBuilder { get; } Property Value Type Description ICompletionFrameBuilder | Edit this page View Source ConversationFrameBuilder Get the builder to use for conversation frames. Declaration public IConversationFrameBuilder ConversationFrameBuilder { get; } Property Value Type Description IConversationFrameBuilder | Edit this page View Source GameOverFrameBuilder Get the builder to use for game over frames. Declaration public IGameOverFrameBuilder GameOverFrameBuilder { get; } Property Value Type Description IGameOverFrameBuilder | Edit this page View Source HelpFrameBuilder Get the builder to use for help frames. Declaration public IHelpFrameBuilder HelpFrameBuilder { get; } Property Value Type Description IHelpFrameBuilder | Edit this page View Source ReactionModeFrameBuilder Get the builder to use for reaction frames. Declaration public IReactionFrameBuilder ReactionModeFrameBuilder { get; } Property Value Type Description IReactionFrameBuilder | Edit this page View Source RegionMapFrameBuilder Get the builder to use for region map frames. Declaration public IRegionMapFrameBuilder RegionMapFrameBuilder { get; } Property Value Type Description IRegionMapFrameBuilder | Edit this page View Source SceneFrameBuilder Get the builder to use for scene frames. Declaration public ISceneFrameBuilder SceneFrameBuilder { get; } Property Value Type Description ISceneFrameBuilder | Edit this page View Source TitleFrameBuilder Get the builder to use for title frames. Declaration public ITitleFrameBuilder TitleFrameBuilder { get; } Property Value Type Description ITitleFrameBuilder"
  },
  "api/NetAF.Rendering.FrameBuilders.FrameBuilderCollections.html": {
    "href": "api/NetAF.Rendering.FrameBuilders.FrameBuilderCollections.html",
    "title": "Class FrameBuilderCollections | NetAF",
    "keywords": "Class FrameBuilderCollections Provides a container from frame builder collections. Inheritance object FrameBuilderCollections Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Rendering.FrameBuilders Assembly: NetAF.dll Syntax public static class FrameBuilderCollections Properties | Edit this page View Source Default Get the default frame builder collection. Declaration public static FrameBuilderCollection Default { get; } Property Value Type Description FrameBuilderCollection"
  },
  "api/NetAF.Rendering.FrameBuilders.GridStringBuilder.html": {
    "href": "api/NetAF.Rendering.FrameBuilders.GridStringBuilder.html",
    "title": "Class GridStringBuilder | NetAF",
    "keywords": "Class GridStringBuilder Provides a class for building strings as part of a grid. Inheritance object GridStringBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Rendering.FrameBuilders Assembly: NetAF.dll Syntax public class GridStringBuilder Constructors | Edit this page View Source GridStringBuilder(char, char, char) Provides a class for building strings as part of a grid. Declaration public GridStringBuilder(char leftBoundaryCharacter = '|', char rightBoundaryCharacter = '|', char horizontalDividerCharacter = '-') Parameters Type Name Description char leftBoundaryCharacter The character to use for left boundaries. char rightBoundaryCharacter The character to use for right boundaries. char horizontalDividerCharacter The character to use for horizontal dividers. Properties | Edit this page View Source DisplaySize Get the display size. Declaration public Size DisplaySize { get; } Property Value Type Description Size | Edit this page View Source HorizontalDividerCharacter Get or set the character used for horizontal dividers. Declaration public char HorizontalDividerCharacter { get; set; } Property Value Type Description char | Edit this page View Source LeftBoundaryCharacter Get or set the character used for left boundary. Declaration public char LeftBoundaryCharacter { get; set; } Property Value Type Description char | Edit this page View Source LineTerminator Get or set the line terminator. Declaration public string LineTerminator { get; set; } Property Value Type Description string | Edit this page View Source RightBoundaryCharacter Get or set the character used for right boundary. Declaration public char RightBoundaryCharacter { get; set; } Property Value Type Description char Methods | Edit this page View Source DrawBoundary(AnsiColor) Draw the boundary. Declaration public void DrawBoundary(AnsiColor color) Parameters Type Name Description AnsiColor color The color to draw the boundary. | Edit this page View Source DrawCentralisedWrapped(string, int, int, AnsiColor, out int, out int) Draw a wrapped string. Declaration public void DrawCentralisedWrapped(string value, int startY, int maxWidth, AnsiColor color, out int endX, out int endY) Parameters Type Name Description string value The string. int startY The start y position. int maxWidth The max width of the string. AnsiColor color The color to draw the text. int endX The end x position. int endY The end y position. | Edit this page View Source DrawHorizontalDivider(int, AnsiColor) Draw a horizontal divider. Declaration public void DrawHorizontalDivider(int y, AnsiColor color) Parameters Type Name Description int y The y position of the divider. AnsiColor color The color to draw the boundary. | Edit this page View Source DrawUnderline(int, int, int, AnsiColor) Draw an underline. Declaration public void DrawUnderline(int x, int y, int length, AnsiColor color) Parameters Type Name Description int x The position of the underline, in x. int y The position of the underline, in y. int length The length of the underline. AnsiColor color The color of the underline. | Edit this page View Source DrawWrapped(string, int, int, int, AnsiColor, out int, out int) Draw a wrapped string. Declaration public void DrawWrapped(string value, int startX, int startY, int maxWidth, AnsiColor color, out int endX, out int endY) Parameters Type Name Description string value The string. int startX The start x position. int startY The start y position. int maxWidth The max width of the string. AnsiColor color The color to draw the text. int endX The end x position. int endY The end y position. | Edit this page View Source Flush() Flush the buffer. Declaration public void Flush() | Edit this page View Source GetCellColor(int, int) Get a color for a cell. Declaration public AnsiColor GetCellColor(int x, int y) Parameters Type Name Description int x The x position of the cell. int y The y position of the cell. Returns Type Description AnsiColor The cell color. | Edit this page View Source GetCharacter(int, int) Get a character from the buffer. Declaration public char GetCharacter(int x, int y) Parameters Type Name Description int x The x position of the character. int y The y position of the character. Returns Type Description char The character. | Edit this page View Source GetNumberOfLines(string, int, int) Get the number of lines a string will take up. Declaration public static int GetNumberOfLines(string value, int startY, int maxWidth) Parameters Type Name Description string value The string. int startY The start y position. int maxWidth The max width of the string. Returns Type Description int The number of lines the string will take up. | Edit this page View Source Resize(Size) Resize this builder. Declaration public void Resize(Size displaySize) Parameters Type Name Description Size displaySize The new size. | Edit this page View Source SetCell(int, int, char, AnsiColor) Set a cell. Declaration public void SetCell(int x, int y, char character, AnsiColor color) Parameters Type Name Description int x The x position of the cell. int y The y position of the cell. char character The character. AnsiColor color The color of the character."
  },
  "api/NetAF.Rendering.FrameBuilders.IAboutFrameBuilder.html": {
    "href": "api/NetAF.Rendering.FrameBuilders.IAboutFrameBuilder.html",
    "title": "Interface IAboutFrameBuilder | NetAF",
    "keywords": "Interface IAboutFrameBuilder Represents any object that can build about frames. Namespace: NetAF.Rendering.FrameBuilders Assembly: NetAF.dll Syntax public interface IAboutFrameBuilder Methods | Edit this page View Source Build(string, Game, Size) Build a frame. Declaration IFrame Build(string title, Game game, Size size) Parameters Type Name Description string title The title. Game game The game. Size size The size of the frame. Returns Type Description IFrame"
  },
  "api/NetAF.Rendering.FrameBuilders.ICompletionFrameBuilder.html": {
    "href": "api/NetAF.Rendering.FrameBuilders.ICompletionFrameBuilder.html",
    "title": "Interface ICompletionFrameBuilder | NetAF",
    "keywords": "Interface ICompletionFrameBuilder Represents any object that can build completion frames. Namespace: NetAF.Rendering.FrameBuilders Assembly: NetAF.dll Syntax public interface ICompletionFrameBuilder Methods | Edit this page View Source Build(string, string, Size) Build a frame. Declaration IFrame Build(string message, string reason, Size size) Parameters Type Name Description string message The message to display to the user. string reason The reason the game ended. Size size The size of the frame. Returns Type Description IFrame"
  },
  "api/NetAF.Rendering.FrameBuilders.IConversationFrameBuilder.html": {
    "href": "api/NetAF.Rendering.FrameBuilders.IConversationFrameBuilder.html",
    "title": "Interface IConversationFrameBuilder | NetAF",
    "keywords": "Interface IConversationFrameBuilder Represents any object that can build conversation frames. Namespace: NetAF.Rendering.FrameBuilders Assembly: NetAF.dll Syntax public interface IConversationFrameBuilder Methods | Edit this page View Source Build(string, IConverser, CommandHelp[], Size) Build a frame. Declaration IFrame Build(string title, IConverser converser, CommandHelp[] contextualCommands, Size size) Parameters Type Name Description string title The title to display to the user. IConverser converser The converser. CommandHelp[] contextualCommands The contextual commands to display. Size size The size of the frame. Returns Type Description IFrame"
  },
  "api/NetAF.Rendering.FrameBuilders.IGameOverFrameBuilder.html": {
    "href": "api/NetAF.Rendering.FrameBuilders.IGameOverFrameBuilder.html",
    "title": "Interface IGameOverFrameBuilder | NetAF",
    "keywords": "Interface IGameOverFrameBuilder Represents any object that can build game over frames. Namespace: NetAF.Rendering.FrameBuilders Assembly: NetAF.dll Syntax public interface IGameOverFrameBuilder Methods | Edit this page View Source Build(string, string, Size) Build a frame. Declaration IFrame Build(string message, string reason, Size size) Parameters Type Name Description string message The message to display to the user. string reason The reason the game ended. Size size The size of the frame. Returns Type Description IFrame"
  },
  "api/NetAF.Rendering.FrameBuilders.IHelpFrameBuilder.html": {
    "href": "api/NetAF.Rendering.FrameBuilders.IHelpFrameBuilder.html",
    "title": "Interface IHelpFrameBuilder | NetAF",
    "keywords": "Interface IHelpFrameBuilder Represents any object that can build help frames. Namespace: NetAF.Rendering.FrameBuilders Assembly: NetAF.dll Syntax public interface IHelpFrameBuilder Methods | Edit this page View Source Build(string, string, CommandHelp[], Size) Build a frame. Declaration IFrame Build(string title, string description, CommandHelp[] commandHelp, Size size) Parameters Type Name Description string title The title. string description The description. CommandHelp[] commandHelp The command help. Size size The size of the frame. Returns Type Description IFrame"
  },
  "api/NetAF.Rendering.FrameBuilders.IReactionFrameBuilder.html": {
    "href": "api/NetAF.Rendering.FrameBuilders.IReactionFrameBuilder.html",
    "title": "Interface IReactionFrameBuilder | NetAF",
    "keywords": "Interface IReactionFrameBuilder Represents any object that can build reaction frames. Namespace: NetAF.Rendering.FrameBuilders Assembly: NetAF.dll Syntax public interface IReactionFrameBuilder Methods | Edit this page View Source Build(string, string, bool, Size) Build a frame. Declaration IFrame Build(string title, string message, bool isError, Size size) Parameters Type Name Description string title The title to display to the user. string message The message to display to the user. bool isError If the message is an error. Size size The size of the frame. Returns Type Description IFrame"
  },
  "api/NetAF.Rendering.FrameBuilders.IRegionMapBuilder.html": {
    "href": "api/NetAF.Rendering.FrameBuilders.IRegionMapBuilder.html",
    "title": "Interface IRegionMapBuilder | NetAF",
    "keywords": "Interface IRegionMapBuilder Represents any object that can build region maps. Namespace: NetAF.Rendering.FrameBuilders Assembly: NetAF.dll Syntax public interface IRegionMapBuilder Methods | Edit this page View Source BuildRegionMap(Region, Point2D, Point3D, Size) Build a map of a region. Declaration void BuildRegionMap(Region region, Point2D startPosition, Point3D focusPosition, Size maxSize) Parameters Type Name Description Region region The region. Point2D startPosition The position to start building at. Point3D focusPosition The position to focus on. Size maxSize The maximum size available in which to build the map."
  },
  "api/NetAF.Rendering.FrameBuilders.IRegionMapFrameBuilder.html": {
    "href": "api/NetAF.Rendering.FrameBuilders.IRegionMapFrameBuilder.html",
    "title": "Interface IRegionMapFrameBuilder | NetAF",
    "keywords": "Interface IRegionMapFrameBuilder Represents any object that can build region map frames. Namespace: NetAF.Rendering.FrameBuilders Assembly: NetAF.dll Syntax public interface IRegionMapFrameBuilder Methods | Edit this page View Source Build(Region, Point3D, CommandHelp[], Size) Build a frame. Declaration IFrame Build(Region region, Point3D focusPosition, CommandHelp[] contextualCommands, Size size) Parameters Type Name Description Region region The region. Point3D focusPosition The position to focus on. CommandHelp[] contextualCommands The contextual commands to display. Size size The size of the frame. Returns Type Description IFrame"
  },
  "api/NetAF.Rendering.FrameBuilders.IRoomMapBuilder.html": {
    "href": "api/NetAF.Rendering.FrameBuilders.IRoomMapBuilder.html",
    "title": "Interface IRoomMapBuilder | NetAF",
    "keywords": "Interface IRoomMapBuilder Represents any object that can build room maps. Namespace: NetAF.Rendering.FrameBuilders Assembly: NetAF.dll Syntax public interface IRoomMapBuilder Methods | Edit this page View Source BuildRoomMap(Room, ViewPoint, KeyType, Point2D, out int, out int) Build a map for a room. Declaration void BuildRoomMap(Room room, ViewPoint viewPoint, KeyType key, Point2D startPosition, out int endX, out int endY) Parameters Type Name Description Room room The room. ViewPoint viewPoint The viewpoint from the room. KeyType key The key type. Point2D startPosition The position to start building at. int endX The end position, x. int endY The end position, x."
  },
  "api/NetAF.Rendering.FrameBuilders.ISceneFrameBuilder.html": {
    "href": "api/NetAF.Rendering.FrameBuilders.ISceneFrameBuilder.html",
    "title": "Interface ISceneFrameBuilder | NetAF",
    "keywords": "Interface ISceneFrameBuilder Represents any object that can build scene frames. Namespace: NetAF.Rendering.FrameBuilders Assembly: NetAF.dll Syntax public interface ISceneFrameBuilder Methods | Edit this page View Source Build(Room, ViewPoint, PlayableCharacter, CommandHelp[], KeyType, Size) Build a frame. Declaration IFrame Build(Room room, ViewPoint viewPoint, PlayableCharacter player, CommandHelp[] contextualCommands, KeyType keyType, Size size) Parameters Type Name Description Room room Specify the Room. ViewPoint viewPoint Specify the viewpoint from the room. PlayableCharacter player Specify the player. CommandHelp[] contextualCommands The contextual commands to display. KeyType keyType The type of key to use. Size size The size of the frame. Returns Type Description IFrame"
  },
  "api/NetAF.Rendering.FrameBuilders.ITitleFrameBuilder.html": {
    "href": "api/NetAF.Rendering.FrameBuilders.ITitleFrameBuilder.html",
    "title": "Interface ITitleFrameBuilder | NetAF",
    "keywords": "Interface ITitleFrameBuilder Represents any object that can build title frames. Namespace: NetAF.Rendering.FrameBuilders Assembly: NetAF.dll Syntax public interface ITitleFrameBuilder Methods | Edit this page View Source Build(string, string, Size) Build a frame. Declaration IFrame Build(string title, string description, Size size) Parameters Type Name Description string title The title. string description The description. Size size The size of the frame. Returns Type Description IFrame"
  },
  "api/NetAF.Rendering.FrameBuilders.SceneHelper.html": {
    "href": "api/NetAF.Rendering.FrameBuilders.SceneHelper.html",
    "title": "Class SceneHelper | NetAF",
    "keywords": "Class SceneHelper Provides helper functionality for scenes. Inheritance object SceneHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Rendering.FrameBuilders Assembly: NetAF.dll Syntax public static class SceneHelper Methods | Edit this page View Source CreateNPCString(Room) Create a description of the NPC's as a string. Declaration public static string CreateNPCString(Room room) Parameters Type Name Description Room room The room. Returns Type Description string The characters, as a string. | Edit this page View Source CreateViewpointAsString(Room, ViewPoint) Create a view point string. Declaration public static string CreateViewpointAsString(Room room, ViewPoint viewPoint) Parameters Type Name Description Room room The room. ViewPoint viewPoint The view point. Returns Type Description string The view point, as a string."
  },
  "api/NetAF.Rendering.FrameBuilders.html": {
    "href": "api/NetAF.Rendering.FrameBuilders.html",
    "title": "Namespace NetAF.Rendering.FrameBuilders | NetAF",
    "keywords": "Namespace NetAF.Rendering.FrameBuilders Classes FrameBuilderCollection Provides a collection of all of the frame builders required to run a game. FrameBuilderCollections Provides a container from frame builder collections. GridStringBuilder Provides a class for building strings as part of a grid. SceneHelper Provides helper functionality for scenes. Interfaces IAboutFrameBuilder Represents any object that can build about frames. ICompletionFrameBuilder Represents any object that can build completion frames. IConversationFrameBuilder Represents any object that can build conversation frames. IGameOverFrameBuilder Represents any object that can build game over frames. IHelpFrameBuilder Represents any object that can build help frames. IReactionFrameBuilder Represents any object that can build reaction frames. IRegionMapBuilder Represents any object that can build region maps. IRegionMapFrameBuilder Represents any object that can build region map frames. IRoomMapBuilder Represents any object that can build room maps. ISceneFrameBuilder Represents any object that can build scene frames. ITitleFrameBuilder Represents any object that can build title frames."
  },
  "api/NetAF.Rendering.Frames.GridTextFrame.html": {
    "href": "api/NetAF.Rendering.Frames.GridTextFrame.html",
    "title": "Class GridTextFrame | NetAF",
    "keywords": "Class GridTextFrame Provides a grid based frame for displaying a command based interface. Inheritance object GridTextFrame Implements IFrame Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Namespace: NetAF.Rendering.Frames Assembly: NetAF.dll Syntax public sealed class GridTextFrame : IFrame Constructors | Edit this page View Source GridTextFrame(GridStringBuilder, int, int, AnsiColor) Provides a grid based frame for displaying a command based interface. Declaration public GridTextFrame(GridStringBuilder builder, int cursorLeft, int cursorTop, AnsiColor backgroundColor) Parameters Type Name Description GridStringBuilder builder The builder that creates the frame. int cursorLeft The cursor left position. int cursorTop The cursor top position. AnsiColor backgroundColor The background color. Properties | Edit this page View Source BackgroundColor Get the background color. Declaration public AnsiColor BackgroundColor { get; } Property Value Type Description AnsiColor | Edit this page View Source CursorLeft Get the cursor left position. Declaration public int CursorLeft { get; } Property Value Type Description int | Edit this page View Source CursorTop Get the cursor top position. Declaration public int CursorTop { get; } Property Value Type Description int | Edit this page View Source ShowCursor Get or set if the cursor should be shown. Declaration public bool ShowCursor { get; set; } Property Value Type Description bool Methods | Edit this page View Source Render(IFramePresenter) Render this frame on a presenter. Declaration public void Render(IFramePresenter presenter) Parameters Type Name Description IFramePresenter presenter The presenter. | Edit this page View Source ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description string A string that represents the current object. Overrides object.ToString() Implements IFrame"
  },
  "api/NetAF.Rendering.Frames.IFrame.html": {
    "href": "api/NetAF.Rendering.Frames.IFrame.html",
    "title": "Interface IFrame | NetAF",
    "keywords": "Interface IFrame Represents any object that is a frame that can display a command based interface. Namespace: NetAF.Rendering.Frames Assembly: NetAF.dll Syntax public interface IFrame Properties | Edit this page View Source CursorLeft Get the cursor left position. Declaration int CursorLeft { get; } Property Value Type Description int | Edit this page View Source CursorTop Get the cursor top position. Declaration int CursorTop { get; } Property Value Type Description int | Edit this page View Source ShowCursor Get or set if the cursor should be shown. Declaration bool ShowCursor { get; set; } Property Value Type Description bool Methods | Edit this page View Source Render(IFramePresenter) Render this frame on a presenter. Declaration void Render(IFramePresenter presenter) Parameters Type Name Description IFramePresenter presenter The presenter."
  },
  "api/NetAF.Rendering.Frames.html": {
    "href": "api/NetAF.Rendering.Frames.html",
    "title": "Namespace NetAF.Rendering.Frames | NetAF",
    "keywords": "Namespace NetAF.Rendering.Frames Classes GridTextFrame Provides a grid based frame for displaying a command based interface. Interfaces IFrame Represents any object that is a frame that can display a command based interface."
  },
  "api/NetAF.Rendering.KeyType.html": {
    "href": "api/NetAF.Rendering.KeyType.html",
    "title": "Enum KeyType | NetAF",
    "keywords": "Enum KeyType Enumeration of key types. Namespace: NetAF.Rendering Assembly: NetAF.dll Syntax public enum KeyType Fields Name Description Dynamic Dynamic key, only show relevant key items. Full Full key. None No key."
  },
  "api/NetAF.Rendering.Presenters.IFramePresenter.html": {
    "href": "api/NetAF.Rendering.Presenters.IFramePresenter.html",
    "title": "Interface IFramePresenter | NetAF",
    "keywords": "Interface IFramePresenter Represents an object that can render a frame. Namespace: NetAF.Rendering.Presenters Assembly: NetAF.dll Syntax public interface IFramePresenter Methods | Edit this page View Source Write(char) Write a character. Declaration void Write(char value) Parameters Type Name Description char value The character to write. | Edit this page View Source Write(string) Write a string. Declaration void Write(string value) Parameters Type Name Description string value The string to write."
  },
  "api/NetAF.Rendering.Presenters.TextWriterPresenter.html": {
    "href": "api/NetAF.Rendering.Presenters.TextWriterPresenter.html",
    "title": "Class TextWriterPresenter | NetAF",
    "keywords": "Class TextWriterPresenter Represents a presenter for TextWriter. Inheritance object TextWriterPresenter Implements IFramePresenter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Namespace: NetAF.Rendering.Presenters Assembly: NetAF.dll Syntax public sealed class TextWriterPresenter : IFramePresenter Constructors | Edit this page View Source TextWriterPresenter(TextWriter) Represents a presenter for TextWriter. Declaration public TextWriterPresenter(TextWriter writer) Parameters Type Name Description TextWriter writer The writer. Methods | Edit this page View Source ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description string A string that represents the current object. Overrides object.ToString() | Edit this page View Source Write(char) Write a character. Declaration public void Write(char value) Parameters Type Name Description char value The character to write. | Edit this page View Source Write(string) Write a string. Declaration public void Write(string value) Parameters Type Name Description string value The string to write. Implements IFramePresenter"
  },
  "api/NetAF.Rendering.Presenters.html": {
    "href": "api/NetAF.Rendering.Presenters.html",
    "title": "Namespace NetAF.Rendering.Presenters | NetAF",
    "keywords": "Namespace NetAF.Rendering.Presenters Classes TextWriterPresenter Represents a presenter for TextWriter. Interfaces IFramePresenter Represents an object that can render a frame."
  },
  "api/NetAF.Rendering.RegionMapMode.html": {
    "href": "api/NetAF.Rendering.RegionMapMode.html",
    "title": "Enum RegionMapMode | NetAF",
    "keywords": "Enum RegionMapMode Enumeration of region map modes. Namespace: NetAF.Rendering Assembly: NetAF.dll Syntax public enum RegionMapMode Fields Name Description Detailed Shows rooms at a detailed level. Dynamic Dynamic region map - uses detailed if there is room, else map will be undetailed. Undetailed Shows rooms as one character, which allows larger maps to be displayed in a limited area."
  },
  "api/NetAF.Rendering.html": {
    "href": "api/NetAF.Rendering.html",
    "title": "Namespace NetAF.Rendering | NetAF",
    "keywords": "Namespace NetAF.Rendering Enums KeyType Enumeration of key types. RegionMapMode Enumeration of region map modes."
  },
  "api/NetAF.Serialization.Assets.AttributeManagerSerialization.html": {
    "href": "api/NetAF.Serialization.Assets.AttributeManagerSerialization.html",
    "title": "Class AttributeManagerSerialization | NetAF",
    "keywords": "Class AttributeManagerSerialization Represents a serialization of an AttributeManager. Inheritance object AttributeManagerSerialization Implements IObjectSerialization<AttributeManager> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Serialization.Assets Assembly: NetAF.dll Syntax public sealed class AttributeManagerSerialization : IObjectSerialization<AttributeManager> Constructors | Edit this page View Source AttributeManagerSerialization(AttributeManager) Represents a serialization of an AttributeManager. Declaration public AttributeManagerSerialization(AttributeManager attributeManager) Parameters Type Name Description AttributeManager attributeManager The attribute manager to serialize. Properties | Edit this page View Source Values Get or set the values. Declaration public Dictionary<AttributeSerialization, int> Values { get; set; } Property Value Type Description Dictionary<AttributeSerialization, int> Methods | Edit this page View Source Restore(AttributeManager) Restore an instance from this serialization. Declaration public void Restore(AttributeManager attributeManager) Parameters Type Name Description AttributeManager attributeManager The attribute manager to restore. Implements IObjectSerialization<T>"
  },
  "api/NetAF.Serialization.Assets.AttributeSerialization.html": {
    "href": "api/NetAF.Serialization.Assets.AttributeSerialization.html",
    "title": "Class AttributeSerialization | NetAF",
    "keywords": "Class AttributeSerialization Represents a serialization of an Attribute. Inheritance object AttributeSerialization Implements IObjectSerialization<Attribute> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Serialization.Assets Assembly: NetAF.dll Syntax public sealed class AttributeSerialization : IObjectSerialization<Attribute> Constructors | Edit this page View Source AttributeSerialization(Attribute) Represents a serialization of an Attribute. Declaration public AttributeSerialization(Attribute attribute) Parameters Type Name Description Attribute attribute The asset to serialize. Properties | Edit this page View Source Description Get or set the description. Declaration public string Description { get; set; } Property Value Type Description string | Edit this page View Source Maximum Get or set the maximum. Declaration public int Maximum { get; set; } Property Value Type Description int | Edit this page View Source Minimum Get or set the minimum. Declaration public int Minimum { get; set; } Property Value Type Description int | Edit this page View Source Name Get or set the name. Declaration public string Name { get; set; } Property Value Type Description string Methods | Edit this page View Source Restore(Attribute) Restore an instance from this serialization. Declaration public void Restore(Attribute attribute) Parameters Type Name Description Attribute attribute The attribute to restore. Implements IObjectSerialization<T>"
  },
  "api/NetAF.Serialization.Assets.CharacterSerialization.html": {
    "href": "api/NetAF.Serialization.Assets.CharacterSerialization.html",
    "title": "Class CharacterSerialization | NetAF",
    "keywords": "Class CharacterSerialization Represents a serialization of a Character. Inheritance object ExaminableSerialization CharacterSerialization NonPlayableCharacterSerialization Implements IObjectSerialization<IExaminable> IObjectSerialization<Character> Inherited Members ExaminableSerialization.Identifier ExaminableSerialization.IsPlayerVisible ExaminableSerialization.AttributeManager ExaminableSerialization.Commands ExaminableSerialization.Restore(IExaminable) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Serialization.Assets Assembly: NetAF.dll Syntax public class CharacterSerialization : ExaminableSerialization, IObjectSerialization<IExaminable>, IObjectSerialization<Character> Constructors | Edit this page View Source CharacterSerialization(Character) Represents a serialization of a Character. Declaration public CharacterSerialization(Character character) Parameters Type Name Description Character character The character to serialize. Properties | Edit this page View Source IsAlive Get or set if the character is alive. Declaration public bool IsAlive { get; set; } Property Value Type Description bool | Edit this page View Source Items Get or set the item serializations. Declaration public ItemSerialization[] Items { get; set; } Property Value Type Description ItemSerialization[] Methods | Edit this page View Source Restore(Character) Restore an instance from this serialization. Declaration public void Restore(Character character) Parameters Type Name Description Character character The character to restore. Implements IObjectSerialization<T> IObjectSerialization<T>"
  },
  "api/NetAF.Serialization.Assets.ConversationSerialization.html": {
    "href": "api/NetAF.Serialization.Assets.ConversationSerialization.html",
    "title": "Class ConversationSerialization | NetAF",
    "keywords": "Class ConversationSerialization Represents a serialization of a Conversation. Inheritance object ConversationSerialization Implements IObjectSerialization<Conversation> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Serialization.Assets Assembly: NetAF.dll Syntax public sealed class ConversationSerialization : IObjectSerialization<Conversation> Constructors | Edit this page View Source ConversationSerialization(Conversation) Represents a serialization of a Conversation. Declaration public ConversationSerialization(Conversation conversation) Parameters Type Name Description Conversation conversation The conversation to serialize. Fields | Edit this page View Source NoCurrentParagraph Get the value for no current paragraph. Declaration public const int NoCurrentParagraph = -1 Field Value Type Description int Properties | Edit this page View Source CurrentParagraph Get or set if the index of the current paragraph. Declaration public int CurrentParagraph { get; set; } Property Value Type Description int Methods | Edit this page View Source Restore(Conversation) Restore an instance from this serialization. Declaration public void Restore(Conversation conversation) Parameters Type Name Description Conversation conversation The conversation to restore. Implements IObjectSerialization<T>"
  },
  "api/NetAF.Serialization.Assets.ExaminableSerialization.html": {
    "href": "api/NetAF.Serialization.Assets.ExaminableSerialization.html",
    "title": "Class ExaminableSerialization | NetAF",
    "keywords": "Class ExaminableSerialization Represents a serialization of an Examinable. Inheritance object ExaminableSerialization CharacterSerialization ExitSerialization ItemSerialization OverworldSerialization RegionSerialization RoomSerialization Implements IObjectSerialization<IExaminable> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Serialization.Assets Assembly: NetAF.dll Syntax public class ExaminableSerialization : IObjectSerialization<IExaminable> Constructors | Edit this page View Source ExaminableSerialization(IExaminable) Represents a serialization of an Examinable. Declaration public ExaminableSerialization(IExaminable examinable) Parameters Type Name Description IExaminable examinable The examinable. Properties | Edit this page View Source AttributeManager Get or set the attribute manager serializations. Declaration public AttributeManagerSerialization AttributeManager { get; set; } Property Value Type Description AttributeManagerSerialization | Edit this page View Source Commands Get or set the command serializations. Declaration public CustomCommandSerialization[] Commands { get; set; } Property Value Type Description CustomCommandSerialization[] | Edit this page View Source Identifier Get or set the identifier. Declaration public string Identifier { get; set; } Property Value Type Description string | Edit this page View Source IsPlayerVisible Get or set if it is player visible. Declaration public bool IsPlayerVisible { get; set; } Property Value Type Description bool Methods | Edit this page View Source Restore(IExaminable) Restore an instance from this serialization. Declaration public virtual void Restore(IExaminable examinable) Parameters Type Name Description IExaminable examinable The examinable to restore. Implements IObjectSerialization<T>"
  },
  "api/NetAF.Serialization.Assets.ExitSerialization.html": {
    "href": "api/NetAF.Serialization.Assets.ExitSerialization.html",
    "title": "Class ExitSerialization | NetAF",
    "keywords": "Class ExitSerialization Represents a serialization of an Exit. Inheritance object ExaminableSerialization ExitSerialization Implements IObjectSerialization<IExaminable> IObjectSerialization<Exit> Inherited Members ExaminableSerialization.Identifier ExaminableSerialization.IsPlayerVisible ExaminableSerialization.AttributeManager ExaminableSerialization.Commands ExaminableSerialization.Restore(IExaminable) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Serialization.Assets Assembly: NetAF.dll Syntax public sealed class ExitSerialization : ExaminableSerialization, IObjectSerialization<IExaminable>, IObjectSerialization<Exit> Constructors | Edit this page View Source ExitSerialization(Exit) Represents a serialization of an Exit. Declaration public ExitSerialization(Exit exit) Parameters Type Name Description Exit exit The exit to serialize. Properties | Edit this page View Source IsLocked Get or set if the exit is locked. Declaration public bool IsLocked { get; set; } Property Value Type Description bool Methods | Edit this page View Source Restore(Exit) Restore an instance from this serialization. Declaration public void Restore(Exit exit) Parameters Type Name Description Exit exit The exit to restore. Implements IObjectSerialization<T> IObjectSerialization<T>"
  },
  "api/NetAF.Serialization.Assets.ItemSerialization.html": {
    "href": "api/NetAF.Serialization.Assets.ItemSerialization.html",
    "title": "Class ItemSerialization | NetAF",
    "keywords": "Class ItemSerialization Represents a serialization of an Item. Inheritance object ExaminableSerialization ItemSerialization Implements IObjectSerialization<IExaminable> IObjectSerialization<Item> Inherited Members ExaminableSerialization.Identifier ExaminableSerialization.IsPlayerVisible ExaminableSerialization.AttributeManager ExaminableSerialization.Commands ExaminableSerialization.Restore(IExaminable) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Serialization.Assets Assembly: NetAF.dll Syntax public sealed class ItemSerialization : ExaminableSerialization, IObjectSerialization<IExaminable>, IObjectSerialization<Item> Constructors | Edit this page View Source ItemSerialization(Item) Represents a serialization of an Item. Declaration public ItemSerialization(Item item) Parameters Type Name Description Item item The item to serialize. Methods | Edit this page View Source Restore(Item) Restore an instance from this serialization. Declaration public void Restore(Item item) Parameters Type Name Description Item item The item to restore. Implements IObjectSerialization<T> IObjectSerialization<T>"
  },
  "api/NetAF.Serialization.Assets.NonPlayableCharacterSerialization.html": {
    "href": "api/NetAF.Serialization.Assets.NonPlayableCharacterSerialization.html",
    "title": "Class NonPlayableCharacterSerialization | NetAF",
    "keywords": "Class NonPlayableCharacterSerialization Represents a serialization of a NonPlayableCharacter. Inheritance object ExaminableSerialization CharacterSerialization NonPlayableCharacterSerialization Implements IObjectSerialization<IExaminable> IObjectSerialization<Character> IObjectSerialization<NonPlayableCharacter> Inherited Members CharacterSerialization.Items CharacterSerialization.IsAlive CharacterSerialization.Restore(Character) ExaminableSerialization.Identifier ExaminableSerialization.IsPlayerVisible ExaminableSerialization.AttributeManager ExaminableSerialization.Commands ExaminableSerialization.Restore(IExaminable) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Serialization.Assets Assembly: NetAF.dll Syntax public sealed class NonPlayableCharacterSerialization : CharacterSerialization, IObjectSerialization<IExaminable>, IObjectSerialization<Character>, IObjectSerialization<NonPlayableCharacter> Constructors | Edit this page View Source NonPlayableCharacterSerialization(NonPlayableCharacter) Represents a serialization of a NonPlayableCharacter. Declaration public NonPlayableCharacterSerialization(NonPlayableCharacter character) Parameters Type Name Description NonPlayableCharacter character The character to serialize. Properties | Edit this page View Source Conversation Get or set the conversation serialization. Declaration public ConversationSerialization Conversation { get; set; } Property Value Type Description ConversationSerialization Methods | Edit this page View Source Restore(NonPlayableCharacter) Restore an instance from this serialization. Declaration public void Restore(NonPlayableCharacter character) Parameters Type Name Description NonPlayableCharacter character The character to restore. Implements IObjectSerialization<T> IObjectSerialization<T> IObjectSerialization<T>"
  },
  "api/NetAF.Serialization.Assets.OverworldSerialization.html": {
    "href": "api/NetAF.Serialization.Assets.OverworldSerialization.html",
    "title": "Class OverworldSerialization | NetAF",
    "keywords": "Class OverworldSerialization Represents a serialization of an Overworld. Inheritance object ExaminableSerialization OverworldSerialization Implements IObjectSerialization<IExaminable> IObjectSerialization<Overworld> Inherited Members ExaminableSerialization.Identifier ExaminableSerialization.IsPlayerVisible ExaminableSerialization.AttributeManager ExaminableSerialization.Commands ExaminableSerialization.Restore(IExaminable) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Serialization.Assets Assembly: NetAF.dll Syntax public sealed class OverworldSerialization : ExaminableSerialization, IObjectSerialization<IExaminable>, IObjectSerialization<Overworld> Constructors | Edit this page View Source OverworldSerialization(Overworld) Represents a serialization of an Overworld. Declaration public OverworldSerialization(Overworld overworld) Parameters Type Name Description Overworld overworld The overworld to serialize. Properties | Edit this page View Source CurrentRegion Get or set the current region. Declaration public string CurrentRegion { get; set; } Property Value Type Description string | Edit this page View Source Regions Get or set the region serializations. Declaration public RegionSerialization[] Regions { get; set; } Property Value Type Description RegionSerialization[] Methods | Edit this page View Source Restore(Overworld) Restore an instance from this serialization. Declaration public void Restore(Overworld overworld) Parameters Type Name Description Overworld overworld The overworld to restore. Implements IObjectSerialization<T> IObjectSerialization<T>"
  },
  "api/NetAF.Serialization.Assets.PlayableCharacterLocationSerialization.html": {
    "href": "api/NetAF.Serialization.Assets.PlayableCharacterLocationSerialization.html",
    "title": "Class PlayableCharacterLocationSerialization | NetAF",
    "keywords": "Class PlayableCharacterLocationSerialization Represents a serialization of a PlayableCharacterLocation. Inheritance object PlayableCharacterLocationSerialization Implements IObjectSerialization<PlayableCharacterLocation> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Serialization.Assets Assembly: NetAF.dll Syntax public sealed class PlayableCharacterLocationSerialization : IObjectSerialization<PlayableCharacterLocation> Constructors | Edit this page View Source PlayableCharacterLocationSerialization(PlayableCharacterLocation) Represents a serialization of a PlayableCharacterLocation. Declaration public PlayableCharacterLocationSerialization(PlayableCharacterLocation location) Parameters Type Name Description PlayableCharacterLocation location The location to serialize. Properties | Edit this page View Source PlayerIdentifier Get or set the player identifier. Declaration public string PlayerIdentifier { get; set; } Property Value Type Description string | Edit this page View Source RegionIdentifier Get or set the region identifier. Declaration public string RegionIdentifier { get; set; } Property Value Type Description string | Edit this page View Source RoomIdentifier Get or set the room identifier. Declaration public string RoomIdentifier { get; set; } Property Value Type Description string Methods | Edit this page View Source Restore(PlayableCharacterLocation) Restore an instance from this serialization. Declaration public void Restore(PlayableCharacterLocation location) Parameters Type Name Description PlayableCharacterLocation location The attribute to restore. Implements IObjectSerialization<T>"
  },
  "api/NetAF.Serialization.Assets.RegionSerialization.html": {
    "href": "api/NetAF.Serialization.Assets.RegionSerialization.html",
    "title": "Class RegionSerialization | NetAF",
    "keywords": "Class RegionSerialization Represents a serialization of a Region. Inheritance object ExaminableSerialization RegionSerialization Implements IObjectSerialization<IExaminable> IObjectSerialization<Region> Inherited Members ExaminableSerialization.Identifier ExaminableSerialization.IsPlayerVisible ExaminableSerialization.AttributeManager ExaminableSerialization.Commands ExaminableSerialization.Restore(IExaminable) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Serialization.Assets Assembly: NetAF.dll Syntax public sealed class RegionSerialization : ExaminableSerialization, IObjectSerialization<IExaminable>, IObjectSerialization<Region> Constructors | Edit this page View Source RegionSerialization(Region) Represents a serialization of a Region. Declaration public RegionSerialization(Region region) Parameters Type Name Description Region region The region to serialize. Properties | Edit this page View Source CurrentRoom Get or set the current room. Declaration public string CurrentRoom { get; set; } Property Value Type Description string | Edit this page View Source IsVisibleWithoutDiscovery Get or set if the region is visible without discovery. Declaration public bool IsVisibleWithoutDiscovery { get; set; } Property Value Type Description bool | Edit this page View Source Rooms Get or set the room serializations. Declaration public RoomSerialization[] Rooms { get; set; } Property Value Type Description RoomSerialization[] Methods | Edit this page View Source Restore(Region) Restore an instance from this serialization. Declaration public void Restore(Region region) Parameters Type Name Description Region region The region to restore. Implements IObjectSerialization<T> IObjectSerialization<T>"
  },
  "api/NetAF.Serialization.Assets.RoomSerialization.html": {
    "href": "api/NetAF.Serialization.Assets.RoomSerialization.html",
    "title": "Class RoomSerialization | NetAF",
    "keywords": "Class RoomSerialization Represents a serialization of a Room. Inheritance object ExaminableSerialization RoomSerialization Implements IObjectSerialization<IExaminable> IObjectSerialization<Room> Inherited Members ExaminableSerialization.Identifier ExaminableSerialization.IsPlayerVisible ExaminableSerialization.AttributeManager ExaminableSerialization.Commands ExaminableSerialization.Restore(IExaminable) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Serialization.Assets Assembly: NetAF.dll Syntax public sealed class RoomSerialization : ExaminableSerialization, IObjectSerialization<IExaminable>, IObjectSerialization<Room> Constructors | Edit this page View Source RoomSerialization(Room) Represents a serialization of a Room. Declaration public RoomSerialization(Room room) Parameters Type Name Description Room room The room to serialize. Properties | Edit this page View Source Characters Get or set the character serializations. Declaration public NonPlayableCharacterSerialization[] Characters { get; set; } Property Value Type Description NonPlayableCharacterSerialization[] | Edit this page View Source Exits Get or set the exit serializations. Declaration public ExitSerialization[] Exits { get; set; } Property Value Type Description ExitSerialization[] | Edit this page View Source HasBeenVisited Get or set if the room has been visited. Declaration public bool HasBeenVisited { get; set; } Property Value Type Description bool | Edit this page View Source Items Get or set the item serializations. Declaration public ItemSerialization[] Items { get; set; } Property Value Type Description ItemSerialization[] Methods | Edit this page View Source Restore(Room) Restore an instance from this serialization. Declaration public void Restore(Room room) Parameters Type Name Description Room room The room to restore. Implements IObjectSerialization<T> IObjectSerialization<T>"
  },
  "api/NetAF.Serialization.Assets.html": {
    "href": "api/NetAF.Serialization.Assets.html",
    "title": "Namespace NetAF.Serialization.Assets | NetAF",
    "keywords": "Namespace NetAF.Serialization.Assets Classes AttributeManagerSerialization Represents a serialization of an AttributeManager. AttributeSerialization Represents a serialization of an Attribute. CharacterSerialization Represents a serialization of a Character. ConversationSerialization Represents a serialization of a Conversation. ExaminableSerialization Represents a serialization of an Examinable. ExitSerialization Represents a serialization of an Exit. ItemSerialization Represents a serialization of an Item. NonPlayableCharacterSerialization Represents a serialization of a NonPlayableCharacter. OverworldSerialization Represents a serialization of an Overworld. PlayableCharacterLocationSerialization Represents a serialization of a PlayableCharacterLocation. RegionSerialization Represents a serialization of a Region. RoomSerialization Represents a serialization of a Room."
  },
  "api/NetAF.Serialization.CustomCommandSerialization.html": {
    "href": "api/NetAF.Serialization.CustomCommandSerialization.html",
    "title": "Class CustomCommandSerialization | NetAF",
    "keywords": "Class CustomCommandSerialization Represents a serialization of a CustomCommand. Inheritance object CustomCommandSerialization Implements IObjectSerialization<CustomCommand> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Serialization Assembly: NetAF.dll Syntax public class CustomCommandSerialization : IObjectSerialization<CustomCommand> Constructors | Edit this page View Source CustomCommandSerialization(CustomCommand) Represents a serialization of a CustomCommand. Declaration public CustomCommandSerialization(CustomCommand command) Parameters Type Name Description CustomCommand command The command. Properties | Edit this page View Source CommandName Get or set the command name. Declaration public string CommandName { get; set; } Property Value Type Description string | Edit this page View Source IsPlayerVisible Get or set if it is player visible. Declaration public bool IsPlayerVisible { get; set; } Property Value Type Description bool Methods | Edit this page View Source Restore(CustomCommand) Restore an instance from this serialization. Declaration public virtual void Restore(CustomCommand command) Parameters Type Name Description CustomCommand command The command to restore. Implements IObjectSerialization<T>"
  },
  "api/NetAF.Serialization.GameSerialization.html": {
    "href": "api/NetAF.Serialization.GameSerialization.html",
    "title": "Class GameSerialization | NetAF",
    "keywords": "Class GameSerialization Represents a serialization of a Game. Inheritance object GameSerialization Implements IObjectSerialization<Game> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Serialization Assembly: NetAF.dll Syntax public class GameSerialization : IObjectSerialization<Game> Constructors | Edit this page View Source GameSerialization(Game) Represents a serialization of a Game. Declaration public GameSerialization(Game game) Parameters Type Name Description Game game The game to serialize. Properties | Edit this page View Source ActivePlayerIdentifier Get or set the active player identifier. Declaration public string ActivePlayerIdentifier { get; set; } Property Value Type Description string | Edit this page View Source InactivePlayerLocations Get or set the overworld serialization. Declaration public PlayableCharacterLocationSerialization[] InactivePlayerLocations { get; set; } Property Value Type Description PlayableCharacterLocationSerialization[] | Edit this page View Source Overworld Get or set the overworld serialization. Declaration public OverworldSerialization Overworld { get; set; } Property Value Type Description OverworldSerialization | Edit this page View Source Players Get or set the player serializations. Declaration public CharacterSerialization[] Players { get; set; } Property Value Type Description CharacterSerialization[] Methods | Edit this page View Source Restore(Game) Restore an instance from this serialization. Declaration public void Restore(Game game) Parameters Type Name Description Game game The asset to restore. Implements IObjectSerialization<T>"
  },
  "api/NetAF.Serialization.IObjectSerialization-1.html": {
    "href": "api/NetAF.Serialization.IObjectSerialization-1.html",
    "title": "Interface IObjectSerialization<T> | NetAF",
    "keywords": "Interface IObjectSerialization<T> Represents any object that is a serialization of another object. Namespace: NetAF.Serialization Assembly: NetAF.dll Syntax public interface IObjectSerialization<in T> Type Parameters Name Description T The type of object that this serialization represents. Methods | Edit this page View Source Restore(T) Restore an instance from this serialization. Declaration void Restore(T obj) Parameters Type Name Description T obj The obj to restore."
  },
  "api/NetAF.Serialization.IRestoreFromObjectSerialization-1.html": {
    "href": "api/NetAF.Serialization.IRestoreFromObjectSerialization-1.html",
    "title": "Interface IRestoreFromObjectSerialization<T> | NetAF",
    "keywords": "Interface IRestoreFromObjectSerialization<T> Represents any object that can restore from an IObjectSerialization. Namespace: NetAF.Serialization Assembly: NetAF.dll Syntax public interface IRestoreFromObjectSerialization<in T> Type Parameters Name Description T The type of serialization that this object restores from. Methods | Edit this page View Source RestoreFrom(T) Restore this object from a serialization. Declaration void RestoreFrom(T serialization) Parameters Type Name Description T serialization The serialization to restore from."
  },
  "api/NetAF.Serialization.html": {
    "href": "api/NetAF.Serialization.html",
    "title": "Namespace NetAF.Serialization | NetAF",
    "keywords": "Namespace NetAF.Serialization Classes CustomCommandSerialization Represents a serialization of a CustomCommand. GameSerialization Represents a serialization of a Game. Interfaces IObjectSerialization<T> Represents any object that is a serialization of another object. IRestoreFromObjectSerialization<T> Represents any object that can restore from an IObjectSerialization."
  },
  "api/NetAF.Utilities.IAssetTemplate-1.html": {
    "href": "api/NetAF.Utilities.IAssetTemplate-1.html",
    "title": "Interface IAssetTemplate<T> | NetAF",
    "keywords": "Interface IAssetTemplate<T> Represents any object that is a template for an asset. Namespace: NetAF.Utilities Assembly: NetAF.dll Syntax public interface IAssetTemplate<out T> Type Parameters Name Description T The type of asset being templated. Methods | Edit this page View Source Instantiate() Instantiate a new instance of the templated asset. Declaration T Instantiate() Returns Type Description T The asset."
  },
  "api/NetAF.Utilities.OverworldMaker.html": {
    "href": "api/NetAF.Utilities.OverworldMaker.html",
    "title": "Class OverworldMaker | NetAF",
    "keywords": "Class OverworldMaker Provides a class for helping to make Regions. Inheritance object OverworldMaker Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Utilities Assembly: NetAF.dll Syntax public sealed class OverworldMaker Constructors | Edit this page View Source OverworldMaker(Identifier, Description, params RegionMaker[]) Provides a class for helping to make Regions. Declaration public OverworldMaker(Identifier identifier, Description description, params RegionMaker[] regionMakers) Parameters Type Name Description Identifier identifier An identifier for the region. Description description A description for the region. RegionMaker[] regionMakers The region makes to use to construct regions. | Edit this page View Source OverworldMaker(string, string, params RegionMaker[]) Initializes a new instance of the OverworldMaker class. Declaration public OverworldMaker(string identifier, string description, params RegionMaker[] regionMakers) Parameters Type Name Description string identifier An identifier for the region. string description A description for the region. RegionMaker[] regionMakers The region makes to use to construct regions. Methods | Edit this page View Source Make() Make an overworld. Declaration public Overworld Make() Returns Type Description Overworld The created overworld."
  },
  "api/NetAF.Utilities.RegionMaker.html": {
    "href": "api/NetAF.Utilities.RegionMaker.html",
    "title": "Class RegionMaker | NetAF",
    "keywords": "Class RegionMaker Provides a class for helping to make Regions. Inheritance object RegionMaker Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Utilities Assembly: NetAF.dll Syntax public sealed class RegionMaker Constructors | Edit this page View Source RegionMaker(Identifier, Description) Provides a class for helping to make Regions. Declaration public RegionMaker(Identifier identifier, Description description) Parameters Type Name Description Identifier identifier An identifier for the region. Description description A description for the region. | Edit this page View Source RegionMaker(string, string) Initializes a new instance of the RegionMaker class. Declaration public RegionMaker(string identifier, string description) Parameters Type Name Description string identifier An identifier for the region. string description A description for the region. Properties | Edit this page View Source this[int, int, int] Get or set the room at a location. Declaration public Room this[int x, int y, int z] { get; set; } Parameters Type Name Description int x The x position. int y The y position. int z The z position. Property Value Type Description Room The room. Methods | Edit this page View Source CanPlaceRoom(int, int, int) Determine if a room can be placed at a location Declaration public bool CanPlaceRoom(int x, int y, int z) Parameters Type Name Description int x The X position. int y The Y position. int z The Z position. Returns Type Description bool True if the room can be placed, else false. | Edit this page View Source GetRoomPositions() Get all current room positions. Declaration public RoomPosition[] GetRoomPositions() Returns Type Description RoomPosition[] The room positions. | Edit this page View Source Make() Make a region. Declaration public Region Make() Returns Type Description Region The created region. | Edit this page View Source Make(RoomPosition) Make a region. Declaration public Region Make(RoomPosition startPosition) Parameters Type Name Description RoomPosition startPosition The start position. Returns Type Description Region The created region. | Edit this page View Source Make(int, int, int) Make a region. Declaration public Region Make(int x, int y, int z) Parameters Type Name Description int x The start x position. int y The start y position. int z The start z position. Returns Type Description Region The created region."
  },
  "api/NetAF.Utilities.StringUtilities.html": {
    "href": "api/NetAF.Utilities.StringUtilities.html",
    "title": "Class StringUtilities | NetAF",
    "keywords": "Class StringUtilities Provides a helper class for string interpretation. Inheritance object StringUtilities Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NetAF.Utilities Assembly: NetAF.dll Syntax public static class StringUtilities Fields | Edit this page View Source CR Get the character for carriage return. Declaration public const char CR = '\\r' Field Value Type Description char | Edit this page View Source LF Get the character for line feed. Declaration public const char LF = '\\n' Field Value Type Description char | Edit this page View Source Newline Get the new line string. Declaration public const string Newline = \"\\n\" Field Value Type Description string Methods | Edit this page View Source ConstructAttributesAsString(Dictionary<Attribute, int>) Construct a line describing a series of attributes. Declaration public static string ConstructAttributesAsString(Dictionary<Attribute, int> attributes) Parameters Type Name Description Dictionary<Attribute, int> attributes The attributes. Returns Type Description string The sentence. | Edit this page View Source ConstructExaminablesAsSentence(IExaminable[]) Construct a sentence describing a series of examinables. Declaration public static string ConstructExaminablesAsSentence(IExaminable[] examinables) Parameters Type Name Description IExaminable[] examinables The examinables. Returns Type Description string The sentence. | Edit this page View Source CutLineFromParagraph(ref string, int) Cut a line from a paragraph. Declaration public static string CutLineFromParagraph(ref string paragraph, int maxWidth) Parameters Type Name Description string paragraph The paragraph. int maxWidth The max line length. Returns Type Description string The line cut from the paragraph. | Edit this page View Source ExtractNextWordFromString(ref string) Extract the next word from a string. This will remove the word from the input string. Declaration public static string ExtractNextWordFromString(ref string input) Parameters Type Name Description string input The input string. Returns Type Description string The extracted work. | Edit this page View Source PreenInput(string) Preen input to remove any ambiguity around special characters. Declaration public static string PreenInput(string input) Parameters Type Name Description string input The input. Returns Type Description string The preened input."
  },
  "api/NetAF.Utilities.html": {
    "href": "api/NetAF.Utilities.html",
    "title": "Namespace NetAF.Utilities | NetAF",
    "keywords": "Namespace NetAF.Utilities Classes OverworldMaker Provides a class for helping to make Regions. RegionMaker Provides a class for helping to make Regions. StringUtilities Provides a helper class for string interpretation. Interfaces IAssetTemplate<T> Represents any object that is a template for an asset."
  },
  "docs/architecture.html": {
    "href": "docs/architecture.html",
    "title": "Architecture | NetAF",
    "keywords": "Architecture Overview NetAF has a simple architecture and understanding it will help when developing games. A Game encapsulates all assets and provides top level logic. When the Game is executing the following loop runs for the duration of the execution: The Game renders the current GameMode. There are many different instances of IGameMode that provide different functionality, but generally they can be split in to two types: Interactive and Information. The Game then accepts user input by using an instance of IIOAdapter to receive input from the user. The Game then and passes the input to its own Interpreter (for handling global input) and the Interpreter for the current GameMode (for handling mode specific input) in order to process it. The Interpreter tries to parse the input and if successful return an instance of Command. The returned Command is then invoked and returns a Reaction that details the result. Some instances of ICommand deal with interactions between assets. In this case an Interaction between an Item and a target is invoked and the result returned the ICommand which will return an appropriate Reaction. The Game processes the Reaction. Some instances of Reaction will trigger the Game to change GameMode to either display the Reaction or enter anotherGameMode. When a GameMode is rendered a IFrameBuilder can be used to generate an instance of IFrame. An instance of IFrame can be rendered on to an IIOAdapter which will display the IFrame to the user. Extensibility NetAF is designed to be extensible. ICommand allows commands to be added. IInterpreter allows commands to be interpreted. IGameMode allows custom modes to be added to a Game. IFrameBuilders callows custom instances instances of IFrame to be created which are used to render the game state to the user. IIOAdaper provides an interface to get input from the user and render the game state back to them. SystemConsoleAdapter provides a wrapper around System.Console, however custom implementations can be added to support different types of application."
  },
  "docs/attributes.html": {
    "href": "docs/attributes.html",
    "title": "Attributes | NetAF",
    "keywords": "Attributes Overview All examinable objects can have attributes. Attributes provide a way of adding a lot of depth to games. For example, attributes could be used to buy and sell items, contain a characters XP or HP or even provide a way to add durability to items. Use To add to an existing attribute or to create a new one use the Add method. var player = new PlayableCharacter(\"Player\", string.Empty); player.Attributes.Add(\"$\", 10); To subtract from an existing attribute use the Subtract method. player.Attributes.Subtract(\"$\", 10); Attributes values can be capped. In this example the $ attribute is limited to a range of 0 - 100. Adding or subtracting will not cause the value of the attribute to change outside of this range. var cappedAttribute = new Attribute(\"$\", \"Dollars.\", 0, 100); player.Attributes.Add(cappedAttribute, 50); An example - buying an Item from a NonPlayableCharacter. The following is an example of buying an Item from NonPlayableCharacter. Here a trader has a spade. The player can only buy the spade if they have at least $5. The conversation will jump to the correct paragraph based on if they choose to buy the spade or not. If the player chooses to buy the spade and has enough $ the transaction is made and the spade changes hands. const string currency = \"$\"; var player = new PlayableCharacter(\"Player\", string.Empty); player.Attributes.Add(currency, 10); var trader = new NonPlayableCharacter(\"Trader\", string.Empty); var spade = new Item(\"Spade\", string.Empty); trader.AcquireItem(spade); trader.Conversation = new Conversation( new Paragraph(\"What will you buy?\") { Responses = [ new Response(\"Spade\", new ByCallback(() => player.Attributes.GetValue(currency) >= 5 ? new ToName(\"BoughtSpade\") : new ToName(\"NotEnough\"))), new Response(\"Nothing\", new Last()) ] }, new Paragraph(\"Here it is.\", _ => { player.Attributes.Subtract(currency, 5); trader.Attributes.Add(currency, 5); trader.Give(spade, player); }, new First(), \"BoughtSpade\"), new Paragraph(\"You don't have enough money.\", new First(), \"NotEnough\"), new Paragraph(\"Fine.\") ); This is just one example of using attributes to add depth to a game."
  },
  "docs/commands.html": {
    "href": "docs/commands.html",
    "title": "Commands | NetAF",
    "keywords": "Commands Overview There are three main types of Command. Game Commands are used to interact with the game. Global Commands are used to interact with the program running the game. Custom Commands allow developers to add custom commands to the game without having to worry about extended the games interpreters. Game Commands Drop Allows players to drop an item. R can be used as a shortcut. drop sword The player can also drop all items. drop all Examine Allows players to examine any asset. X can be used as a shortcut. Examine will examine the current room. examine The player themselves can be examined with me or the players name. examine me or examine ben The same is true for Regions, Overworlds, Items and Exits. Take Allows the player to take an Item. T can be used as a shortcut. take sword Take all allows the player to take all takeables Items in the current Room. take all Talk Talk allows the player to start a conversation with a NonPlayableCharacter. L can be used as a shortcut. If only a single NonPlayableCharacter is in the current Room no argument needs to be specified. talk However, if the current Room contains two or more NonPlayableCharacters then to and the NonPlayableCharacters name must be specified. talk to dave Use Use allows the player to use the Items that the player has or that are in the current Room. use sword Items can be used on the Player, the Room, an Exit, a NonPlayableCharacter or another Item. The target must be specified with the on keyword. use sword on me Or use sword on bush Move Regions are traversed with direction commands. North or N moves north. East or E moves east. South or S moves south. West or W moves west. Down or D moves down. Up or U moves up. End Only valid during a conversation with a NonPlayableCharacter, the End command will end the conversation. end Global Commands About Displays a screen containing information about the game. about CommandsOn / CommandsOff Toggles the display of the contextual commands on the screen on and off. commandson Or commandsoff Exit Exit the current game. exit Help Displays a Help screen listing all available commands. help KeyOn / KeyOff Toggles the display of the map key on and off. keyon Or keyoff Map Displays the Region map screen. map New Starts a new game. new Custom Commands Custom commands can be added to many of the assets, including Room, PlayableCharacter, NonPlayableCharacter, Item and Exit."
  },
  "docs/conditional-descriptions.html": {
    "href": "docs/conditional-descriptions.html",
    "title": "Conditional Descriptions | NetAF",
    "keywords": "Conditional Descriptions Overview Normally assets are assigned a Description during the constructor. This is what is returned when the asset is examined. Descriptions are usually specified as a string. var item = new Item(\"The items name\", \"The items description.\"); They can also be specified as a Description. var item = new Item(new Identifier(\"The items name\"), new Description(\"The items description.\")); However, sometimes it may be desirable to have a conditional description that can change based on the state of the asset. Conditional descriptions can be specified with ConditionalDescription and contain a lambda which determines which one of two strings are returned when the asset is examined. // the player, just for demo purposes var player = new PlayableCharacter(\"Ben\", \"A man.\"); // the description to use when the condition is true var trueString = \"A gleaming sword, owned by Ben.\"; // the string to use when the condition is false var falseString = \"A gleaming sword, without an owner.\"; // a lambda that determines which string is returned Condition condition = () => player.FindItem(\"Sword\", out _); // the conditional description itself var conditionalDescription = new ConditionalDescription(trueString, falseString, condition); // create the item with the conditional description var sword = new Item(new Identifier(\"Sword\"), conditionalDescription);"
  },
  "docs/end-conditions.html": {
    "href": "docs/end-conditions.html",
    "title": "End Conditions | NetAF",
    "keywords": "End Conditions Overview The EndCheck class allows the game to determine if it has come to an end. Each game has two end conditions GameOverCondition when the game is over, but has not been won. CompletionCondition when the game is over because it has been won. Use When an EndCheck is invoked it returns an EndCheckResult. The EndCheckResult details the result of the check to see if the game has ended. private static EndCheckResult IsGameOver(Game game) { if (game.Player.IsAlive) return EndCheckResult.NotEnded; return new EndCheckResult(true, \"Game Over\", \"You died!\"); } This method can be used as an EndCheck: EndCheck gameOverCheck = IsGameOver; The GameOverCondition and CompletionCondition are passed in to the game as arguments when a game is created."
  },
  "docs/exit.html": {
    "href": "docs/exit.html",
    "title": "Exit | NetAF",
    "keywords": "Exit Overview An Exit is essentially a connector between to adjoining rooms. Use An Exit can be simply instantiated with a direction. var exit = new Exit(Direction.North); An Exit can be hidden from the player by setting its IsPlayerVisible property to false, this can be set in the constructor. var exit = new Exit(Direction.North, false); Or set explicitly. exit.IsPlayerVisible = false; Optionally, a description of the Exit can be specified. var exit = new Exit(Direction.North, true, new Description(\"A door covered in ivy.\")); This will be returned if the player examines the Exit. Like all Examinable objects, an Exit can be assigned custom commands. Exit exit = null; exit = new(Direction.North, commands: [ new CustomCommand(new CommandHelp(\"Shove\", \"Shove the door.\"), true, true, (game, args) => { exit.Unlock(); return new Reaction(ReactionResult.OK, \"The door swung open.\"); }) ]);"
  },
  "docs/frame-builders.html": {
    "href": "docs/frame-builders.html",
    "title": "Frame Builders | NetAF",
    "keywords": "Frame Builders Overview In NetAF output is handled using the FrameBuilders. A FrameBuilder is essentially a class that builds a Frame that can render a specific state in the game. This Frame can then be rendered on a TextWriter by calling its Render method. Think of the FrameBuilder as the instructions that build the output display and the Frame as the output itself. There are a few types of FrameBuilder, each responsible for rendering a specific game state. SceneFrameBuilder is responsible for building frames that render the scenes in a game. TitleFrameBuilder is responsible for building the title screen frame. RegionMapFrameBuilder is responsible for building a frame that displays a map of a Region. TransitionFrameBuilder is responsible for building frames that display transitions. AboutFrameBuilder is responsible for building a frame to display the about information. HelpFrameBuilder is responsible for building frames to display the help. GameOverFrameBuilder is responsible for building a frame to display the game over screen. CompletionFrameBuilder is responsible for building a frame to display the completion screen. ConversationFrameBuilder is responsible for building a frame that can render a conversation. A game accepts a FrameBuilderCollection. A FrameBuilderCollection is a collection of all the different FrameBuilders required to render a game. All FrameBuilders are extensible, so the output for all parts of the game can be fully customised."
  },
  "docs/getting-started.html": {
    "href": "docs/getting-started.html",
    "title": "Getting Started | NetAF",
    "keywords": "Getting Started Adding the NuGet package to your project You need to pull NetAF into your project. The easiest way to do this is to add the NuGet package. The latest package and installation instructions are available here. First Game Once the package has been installed it's time to jump in and start building your first game. Setup To start with create a new Console application. Regardless of target framework, it should look something like this: namespace NetAF.GettingStarted { internal class Program { private static void Main(string[] args) { } } } Adding a PlayableCharacter Every game requires a character to play as, lets add that next: private static PlayableCharacter CreatePlayer() { return new PlayableCharacter(\"Dave\", \"A young boy on a quest to find the meaning of life.\"); } In this example whenever CreatePlayer is called a new PlayableCharacter will be created. The character is called \"Dave\" and has a description that describes him as \"A young boy on a quest to find the meaning of life.\". Creating the game world The game world consists of a hierarchy of three tiers: Overworld, Region and Room. We will create a simple Region with two Rooms. We can do this directly in the Main function for simplicity. To start with lets make the Rooms: private static void Main(string[] args) { var cavern = new Room(\"Cavern\", \"A dark cavern set in to the base of the mountain.\", new Exit(Direction.North)); var tunnel = new Room(\"Tunnel\", \"A dark tunnel leading inside the mountain.\", new Exit(Direction.South)); } Although the Rooms haven't been added to a Region yet there are exits in place that will allow the player to move between them. Games are boring without Items to interact with, let's add an item to the tunnel: var holyGrail = new Item(\"Holy Grail\", \"A dull golden cup, looks pretty old.\", true); tunnel.AddItem(holyGrail); Looking good, but the Rooms need to be contained within a Region. RegionMaker simplifies this process, but sometimes creating a Region directly may be more appropriate if more control is needed. Here we will use RegionMaker: var regionMaker = new RegionMaker(\"Mountain\", \"An imposing volcano just East of town.\") { [0, 0, 0] = cavern, [0, 1, 0] = tunnel }; This needs more breaking down. The RegionMaker will create a region called \"Mountain\" with a description of \"An imposing volcano just East of town.\". The region will contain two rooms, the cavern and the tunnel. The cavern will be added at position x 0, y 0, z 0. The tunnel will be added at position x 0, y 1, z 0, north of the cavern. The game world is nearly complete, but the Region needs to exist within an Overworld for it to be finished. We will use OverworldMaker to achieve this: var overworldMaker = new OverworldMaker(\"Daves World\", \"An ancient kingdom.\", regionMaker); This will create an Overworld called \"Daves World\" which is described as \"An ancient kingdom\" and contains a single Region. All together the code looks like this: var cavern = new Room(\"Cavern\", \"A dark cavern set in to the base of the mountain.\", new Exit(Direction.North)); var tunnel = new Room(\"Tunnel\", \"A dark tunnel leading inside the mountain.\", new Exit(Direction.South)); var holyGrail = new Item(\"Holy Grail\", \"A dull golden cup, looks pretty old.\", true); tunnel.AddItem(holyGrail); var regionMaker = new RegionMaker(\"Mountain\", \"An imposing volcano just East of town.\") { [0, 0, 0] = cavern, [0, 1, 0] = tunnel }; var overworldMaker = new OverworldMaker(\"Daves World\", \"An ancient kingdom.\", regionMaker); Checking if the game is complete For a game to come to an end it needs to reach either a game over state or a completion state. Firstly lets look at the logic that determines if the game is complete. An EndCheck is required, which returns an EndCheckResult that determines if the game is complete. In this example lets make a method that determines if the game is complete. The game is complete if the player has the holy grail: private static EndCheckResult IsGameComplete(Game game) { if (!game.Player.FindItem(\"Holy Grail\", out _)) return EndCheckResult.NotEnded; return new EndCheckResult(true, \"Game Complete\", \"You have the Holy Grail!\"); } If the player has the holy grail then the EndCheckResult will return that the game has ended, and have a title that will read \"Game Complete\" and a description that reads \"You have the Holy Grail!\". A common game over state may be if the player dies: private static EndCheckResult IsGameOver(Game game) { if (game.Player.IsAlive) return EndCheckResult.NotEnded; return new EndCheckResult(true, \"Game Over\", \"You died!\"); } Creating the game The game now has all the required assets and logic it just needs some boilerplate to tie everything together before it is ready to play. A GameCreationCallback is required to instantiate an instance of a Game. This is so that new instances of the Game can be created as required. var gameCreator = Game.Create( new GameInfo(\"The Life of Dave\", \"A very low budget adventure.\", \"Ben Pollard\"), \"Dave awakes to find himself in a cavern...\", AssetGenerator.Custom(overworldMaker.Make, CreatePlayer), new GameEndConditions(IsGameComplete, IsGameOver), ConsoleGameConfiguration.Default); This requires some breaking down. The Game class has a Create method that can be used to create instances of Game. This takes the following arguments: GameInfo - information about the game. Introduction - an introduction to the game. AssetGenerator - a generator for game assets. GameEndConditions - conditions for determining if the game has been completed or otherwise ended. GameConfiguration - a configuration for the game, including display size, error prefix and other elements. Executing the game The game is executed simply by calling the static Execute method on Game and passing in the game creation callback. Game.Execute(gameCreator); Bringing it all together The full example code should look like this: using NetAF.Assets; using NetAF.Assets.Characters; using NetAF.Assets.Locations; using NetAF.Logic; using NetAF.Logic.Coniguration; using NetAF.Utilities; namespace NetAF.GettingStarted { internal class Program { private static EndCheckResult IsGameComplete(Game game) { if (!game.Player.FindItem(\"Holy Grail\", out _)) return EndCheckResult.NotEnded; return new EndCheckResult(true, \"Game Complete\", \"You have the Holy Grail!\"); } private static EndCheckResult IsGameOver(Game game) { if (game.Player.IsAlive) return EndCheckResult.NotEnded; return new EndCheckResult(true, \"Game Over\", \"You died!\"); } private static PlayableCharacter CreatePlayer() { return new PlayableCharacter(\"Dave\", \"A young boy on a quest to find the meaning of life.\"); } private static void Main(string[] args) { var cavern = new Room(\"Cavern\", \"A dark cavern set in to the base of the mountain.\", new Exit(Direction.North)); var tunnel = new Room(\"Tunnel\", \"A dark tunnel leading inside the mountain.\", new Exit(Direction.South)); var holyGrail = new Item(\"Holy Grail\", \"A dull golden cup, looks pretty old.\", true); tunnel.AddItem(holyGrail); var regionMaker = new RegionMaker(\"Mountain\", \"An imposing volcano just East of town.\") { [0, 0, 0] = cavern, [0, 1, 0] = tunnel }; var overworldMaker = new OverworldMaker(\"Daves World\", \"An ancient kingdom.\", regionMaker); var gameCreator = Game.Create( new GameInfo(\"The Life of Dave\", \"A very low budget adventure.\", \"Ben Pollard\"), \"Dave awakes to find himself in a cavern...\", AssetGenerator.Custom(overworldMaker.Make, CreatePlayer), new GameEndConditions(IsGameComplete, IsGameOver), ConsoleGameConfiguration.Default); Game.Execute(gameCreator); } } } Simply build and run the application and congratulations, you have a working NetAF game!"
  },
  "docs/items.html": {
    "href": "docs/items.html",
    "title": "Item | NetAF",
    "keywords": "Item Overview Items can be used to add interactivity with a game. Items can be something that a player can take with them, or they may be static in a Room. Use An Item can be simply instantiated with a name and description. var sword = new Item(\"Sword\", \"A heroes sword.\"); By default, an Item is not takeable and is tied to a Room. If it is takeable this can be specified in the constructor. var sword = new Item(\"Sword\", \"A heroes sword.\", true); Like all Examinable objects, an Item can be assigned custom commands. Item bomb = new(\"Bomb\", \"A bomb\", commands: [ new CustomCommand(new CommandHelp(\"Cut wire\", \"Cut the red wire.\"), true, (game, args) => { game.Player.Kill(); return new Reaction(ReactionResult.Fatal, \"Boom!\"); }) ]); Interaction Interactions can be set up between different assets in the game. The Interaction contains the result of the interaction, and allows the game to react to the interaction. var dartsBoard = new Item(\"Darts board\", \"A darts board.\"); var dart = new Item(\"Dart\", \"A dart\", interaction: item => { if (item == dartsBoard) return new Interaction(InteractionResult.NoChange, item, \"The dart stuck in the darts board.\"); return new Interaction(InteractionResult.NoChange, item); });"
  },
  "docs/non-playable-character.html": {
    "href": "docs/non-playable-character.html",
    "title": "NonPlayableCharacter | NetAF",
    "keywords": "NonPlayableCharacter Overview A NonPlayableCharacter represents any character that the player may meet throughout the game. Use A NonPlayableCharacter can be simply instantiated with a name and description. var goblin = new NonPlayableCharacter(\"Goblin\", \"A vile goblin.\"); A NonPlayableCharacter can give an item to another NonPlayableCharacter. var daisy = new Item(\"Daisy\", \"A beautiful daisy that is sure to cheer up even the most miserable creature.\"); npc.Give(daisy, goblin); NonPlayableCharacters can contain custom commands that allow the user to directly interact with the character or other assets. NonPlayableCharacter goblin = new(\"Goblin\", \"A vile goblin\", commands: [ new CustomCommand(new CommandHelp(\"Smile\", \"Crack a smile.\"), true, (game, args) => { return new Reaction(ReactionResult.OK, \"Well that felt weird.\"); }) ]); Conversations A NonPlayableCharacter can hold a conversation with the player. A Conversation contains Paragraphs. A Paragraph can contain one or more Responses. A Response can contain a delta or other implementation of IEndOfPargraphInstruction to shift the conversation by, which will cause the conversation to jump paragraphs by the specified value. A Response can also contain a callback to perform some action when the player selects that option. NonPlayableCharacter goblin = new(\"Goblin\", \"A vile goblin\", conversation: new( new Paragraph(\"This is a question.\") { Responses = [ new Response(\"This is the first response.\", new Jump(1)), new Response(\"This is the second response.\", new Jump(2)), new Response(\"This is the third response.\", new Jump(3)) ] }, new Paragraph(\"You picked first response, return to start of conversation.\", new GoTo(1)), new Paragraph(\"You picked second response, return to start of conversation.\", new GoTo(1)), new Paragraph(\"You picked third response, you are dead.\", game => game.Player.Kill()) ));"
  },
  "docs/overworld.html": {
    "href": "docs/overworld.html",
    "title": "Overworld | NetAF",
    "keywords": "Overworld Overview An Overworld is the top level location in a game. A game can only contain a single Overworld. An Overworld can contain multiple Regions. Overworld ├── Region │ ├── Room │ ├── Room │ ├── Room ├── Region │ ├── Room │ ├── Room Use An Overworld can be simply instantiated with a name and description. var overworld = new Overworld(\"Name\", \"Description.\"); Regions can be added to the Overworld with the AddRegion method. overworld.AddRegion(region); Regions can be removed from an Overworld with the RemoveRegion method. overworld.RemoveRegion(region); The Overworld can be traversed with the Move method. overworld.Move(region); OverworldMaker The OverworldMaker simplifies the creation of the Overworld, when used in conjunction with RegionMakers. var overworldMaker = new OverworldMaker(\"Name\", \"Description.\", regionMakers); However, the main benefit of using an OverworldMaker is that it allows multiple instances of an Overworld to be created from a single definition of an Overworld. var overworld = overworldMaker.Make();"
  },
  "docs/persistence.html": {
    "href": "docs/persistence.html",
    "title": "Persistence | NetAF",
    "keywords": "Persistence Overview NetAF provides persistence for game states. This allows a game to be saved and restored at any time. Saving Creating a restore point A named restore point can be created at any time by using the RestorePoint class: var restorePoint = RestorePoint.Create(\"File 1\", game); RestorePoint will serialize the state of the game so that it can be restored later. However it still needs to be saved to file if persistence is required. Saving a restore point to file NetAF uses Json for persistence as default, provided by the JsonSave class: JsonSave.ToFile(@\"C:\\save.json\", restorePoint, out _); Note: The extension is not important. Any extension can be used. Loading Loading a restore point from file A restore point can be loaded from file using the JsonSave class: JsonSave.FromFile(@\"C:\\save.json\", out var restorePoint, out _); Applying a restore point to a game The restore point can then be applied to a game to restore the state of the game: restorePoint.Game.Restore(game); Commands To simplify adding persistence to your game the Save and Load commands have been added. Both Save and Load are custom commands, which means they can be applied to any IExaminable. This gives you the power to choose how you implement saving and loading. Add these commands to the PlayableCharacter or Overworld to have them always available, or add them to items, rooms or any other in game object. Item typewriter = new(\"Typewriter\", \"An old style typewriter\") { Commands = [ new Save(), new Load() ] }; Registering dynamically loaded content It is recommended to add and remove content in the game by using the IsPlayerVisible property. This allows all content to be loaded when a game is created, which in turn allows serialization to function correctly. When a game is instantiated an instance of AssetCatalog is created which is a key component of serialization. If you choose to dynamically add an Item, NonPlayableCharacter or Room while a game is executing it may not serialize correctly as it will not be in the games AssetCatalog. This may be acceptable, however if you wish for the IExaminable to be serialized you need to register the instance of the IExaminable with the games AssetCatalog. Item sword = new(\"Sword\", \"The sword of destiny\"); game.Catalog.Register(sword); By registering with the AssetCatalog the game will be able to resolve references to the object when deserialization is applied. Sequencing Save Load"
  },
  "docs/playable-character.html": {
    "href": "docs/playable-character.html",
    "title": "PlayableCharacter | NetAF",
    "keywords": "PlayableCharacter Overview A PlayableCharacter represents the character that the player plays as throughout the game. Each game has only a single PlayableCharacter. Use A PlayableCharacter can be simply instantiated with a name and description. var player = new PlayableCharacter(\"Ben\", \"A 39 year old man.\"); A PlayableCharacter can be also be instantiated with a list of Items. var player = new PlayableCharacter(\"Ben\", \"A 39 year old man.\", [ new Item(\"Guitar\", \"A PRS Custom 22, in whale blue, of course.\"), new Item(\"Wallet\", \"An empty wallet, of course.\") ]); A PlayableCharacter can be given items with the AddItem method. player.AddItem(new Item(\"Mallet\", \"A large mallet.\")); A PlayableCharacter can lose an item with the RemoveItem method. player.RemoveItem(mallet); A PlayableCharacter can give an item to a non-playable character. var goblin = new NonPlayableCharacter(\"Goblin\", \"A vile goblin.\"); var daisy = new Item(\"Daisy\", \"A beautiful daisy that is sure to cheer up even the most miserable creature.\"); player.Give(daisy, goblin); PlayableCharacters can contain custom commands that allow the user to directly interact with the character or other assets. PlayableCharacter player = new(\"Daisy\", \"A beautiful daisy that is sure to cheer up even the most miserable creature.\", commands: [ new CustomCommand(new CommandHelp(\"Punch wall\", \"Punch the wall.\"), true, (game, args) => { return new Reaction(ReactionResult.OK, \"You punched the wall.\"); }) ]);"
  },
  "docs/region.html": {
    "href": "docs/region.html",
    "title": "Region | NetAF",
    "keywords": "Region Overview A Region is the intermediate level location in a game. An Overworld can contain multiple Regions. A Region can contain multiple Rooms. Overworld ├── Region │ ├── Room │ ├── Room │ ├── Room ├── Region │ ├── Room │ ├── Room A Region represents a 3D space. The x location always refers to the horizontal axis, with lower values being west and higher values being east. The y location always refers to the vertical axis, with lower values being south and higher values being north. The z location always refers to the depth axis, with lower values being down and higher values being up. Use A Region can be simply instantiated with a name and description. var region = new Region(\"Name\", \"Description.\"); Rooms can be added to the Region with the AddRoom method. The x, y and z location within the Region must be specified. region.AddRoom(room, 0, 0, 0); Rooms can be removed from a Region with the RemoveRoom method. region.RemoveRoom(room); The Region can be traversed with the Move method. region.Move(Direction.North); The start position, that is the position that the Player will start in when entering a Region, can be specified with SetStartPosition. region.SetStartPosition(0, 0, 0); The UnlockDoorPair method can be used to unlock an Exit in the current Room, which will also unlock the corresponding Exit in the adjoining Room. region.UnlockDoorPair(Direction.East); Like all Examinable objects, Regions can be assigned custom commands. Region region = null; region = new(\"Woodlands\", \"A quiet woodland.\", commands: [ new CustomCommand(new CommandHelp(\"Warp\", \"Warp to the start.\"), true, (game, args) => { region.JumpToRoom(0, 0, 0); return new Reaction(ReactionResult.OK, \"You warped to the start.\"); }) ]); RegionMaker The RegionMaker simplifies the creation of a Region. Rooms are added to the Region with a specified x, y and z position within the Region. var regionMaker = new RegionMaker(\"Region\", \"Description.\") { [0, 0, 0] = new Room(\"Room 1\", \"Description of room 1.\"), [1, 0, 0] = new Room(\"Room 2\", \"Description of room 2.\"), }; The main benefit of using a RegionMaker is that it allows multiple instances of a Region to be created from a single definition of a Region. var region = regionMaker.Make();"
  },
  "docs/room.html": {
    "href": "docs/room.html",
    "title": "Room | NetAF",
    "keywords": "Room Overview A Room is the lowest level location in a game. A Region can contain multiple Rooms. Overworld ├── Region │ ├── Room │ ├── Room │ ├── Room ├── Region │ ├── Room │ ├── Room A Room can contain up to six Exits, one for each of the directions north, east, south, west, up and down. Use A Region can be simply instantiated with a name and description. var room = new Room(\"Name\", \"Description.\"); Items can be added to the Room with the AddItem method. room.AddItem(new Item(\"Name\", \"Description.\")); Items can be removed from a Room with the RemoveItem method. region.RemoveItem(item); Characters can be added to the Room with the AddCharacter method. room.AddCharacter(new NonPlayableCharacter(\"Name\", \"Description.\")); Characters can be removed from a Room with the RemoveCharacter method. region.RemoveCharacter(character); Rooms can contain custom commands that allow the user to directly interact with the Room. Room room = null; room = new(\"Dungeon\", \"A grim dungeon.\", commands: [ new CustomCommand(new CommandHelp(\"Pull lever\", \"Pull the lever.\"), true, (game, args) => { room.FindExit(Direction.East, true, out var exit); exit.Unlock(); return new Reaction(ReactionResult.OK, \"The exit was unlocked.\"); }) ]);"
  },
  "index.html": {
    "href": "index.html",
    "title": "NetAF | NetAF",
    "keywords": "NetAF NetAF is a C# library that provides a framework for building text adventures and interactive stories in .NET. The repo is open source and is available at https://github.com/benpollarduk/netaf. NetAF has a sister Kotlin implementation, Ktaf, which is available at https://github.com/benpollarduk/ktaf. This documentation site is a work in progress, if there are any topics that aren't covered that you would like to see included, or if you spot any mistakes please report them on the Issues page on GitHub."
  }
}